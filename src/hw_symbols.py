from sympy import symbols

symbolic_latency = {
    "And": symbols("latency_And", positive=True),
    "Or": symbols("latency_Or", positive=True),
    "Add": symbols("latency_Add", positive=True),
    "Sub": symbols("latency_Sub", positive=True),
    "Mult": symbols("latency_Mult", positive=True),
    "FloorDiv": symbols("latency_FloorDiv", positive=True),
    "Mod": symbols("latency_Mod", positive=True),
    "LShift": symbols("latency_LShift", positive=True),
    "RShift": symbols("latency_RShift", positive=True),
    "BitOr": symbols("latency_BitOr", positive=True),
    "BitXor": symbols("latency_BitXor", positive=True),
    "BitAnd": symbols("latency_BitAnd", positive=True),
    "Eq": symbols("latency_Eq", positive=True),
    "NotEq": symbols("latency_NotEq", positive=True),
    "Lt": symbols("latency_Lt", positive=True),
    "LtE": symbols("latency_LtE", positive=True),
    "Gt": symbols("latency_Gt", positive=True),
    "GtE": symbols("latency_GtE", positive=True),
    "USub": symbols("latency_USub", positive=True),
    "UAdd": symbols("latency_UAdd", positive=True),
    "IsNot": symbols("latency_IsNot", positive=True),
    "Not": symbols("latency_Not", positive=True),
    "Invert": symbols("latency_Invert", positive=True),
    "Regs": symbols("latency_Regs", positive=True),
}

symbolic_power = {
    "And": symbols("power_And"),
    "Or": symbols("power_Or"),
    "Add": symbols("power_Add"),
    "Sub": symbols("power_Sub"),
    "Mult": symbols("power_Mult"),
    "FloorDiv": symbols("power_FloorDiv"),
    "Mod": symbols("power_Mod"),
    "LShift": symbols("power_LShift"),
    "RShift": symbols("power_RShift"),
    "BitOr": symbols("power_BitOr"),
    "BitXor": symbols("power_BitXor"),
    "BitAnd": symbols("power_BitAnd"),
    "Eq": symbols("power_Eq"),
    "NotEq": symbols("power_NotEq"),
    "Lt": symbols("power_Lt"),
    "LtE": symbols("power_LtE"),
    "Gt": symbols("power_Gt"),
    "GtE": symbols("power_GtE"),
    "USub": symbols("power_USub"),
    "UAdd": symbols("power_UAdd"),
    "IsNot": symbols("power_IsNot"),
    "Not": symbols("power_Not"), 
    "Invert": symbols("power_Invert"),
    "Regs": symbols("power_Regs")
}