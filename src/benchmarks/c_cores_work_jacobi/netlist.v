// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2024.2_2/1156857 Production Release
//  HLS Date:       Tue Jan 14 16:38:07 PST 2025
// 
//  Generated by:   edubbers@ece007.ece.local.cmu.edu
//  Generated date: Tue Mar  4 20:11:25 2025
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    MatMult_ccs_sample_mem_ccs_ram_sync_1R1W_wport_9_16_14_10000_10000_16_5_gen
// ------------------------------------------------------------------


module MatMult_ccs_sample_mem_ccs_ram_sync_1R1W_wport_9_16_14_10000_10000_16_5_gen
    (
  we, d, wadr, wadr_d, d_d, we_d, port_1_w_ram_ir_internal_WMASK_B_d
);
  output we;
  output [15:0] d;
  output [13:0] wadr;
  input [13:0] wadr_d;
  input [15:0] d_d;
  input we_d;
  input port_1_w_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign we = (port_1_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    MatMult_ccs_sample_mem_ccs_ram_sync_1R1W_rport_8_16_14_10000_10000_16_5_gen
// ------------------------------------------------------------------


module MatMult_ccs_sample_mem_ccs_ram_sync_1R1W_rport_8_16_14_10000_10000_16_5_gen
    (
  q, re, radr, radr_d, re_d, q_d, port_0_r_ram_ir_internal_RMASK_B_d
);
  input [15:0] q;
  output re;
  output [13:0] radr;
  input [13:0] radr_d;
  input re_d;
  output [15:0] q_d;
  input port_0_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign re = (port_0_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    MatMult_ccs_sample_mem_ccs_ram_sync_1R1W_rport_7_16_14_10000_10000_16_5_gen
// ------------------------------------------------------------------


module MatMult_ccs_sample_mem_ccs_ram_sync_1R1W_rport_7_16_14_10000_10000_16_5_gen
    (
  q, re, radr, radr_d, re_d, q_d, port_0_r_ram_ir_internal_RMASK_B_d
);
  input [15:0] q;
  output re;
  output [13:0] radr;
  input [13:0] radr_d;
  input re_d;
  output [15:0] q_d;
  input port_0_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign re = (port_0_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    MatMult_run_run_fsm
//  FSM Module
// ------------------------------------------------------------------


module MatMult_run_run_fsm (
  clk, arst_n, run_wen, fsm_output, for_C_0_tr0, for_1_C_0_tr0
);
  input clk;
  input arst_n;
  input run_wen;
  output [4:0] fsm_output;
  reg [4:0] fsm_output;
  input for_C_0_tr0;
  input for_1_C_0_tr0;


  // FSM State Type Declaration for MatMult_run_run_fsm_1
  parameter
    run_rlp_C_0 = 3'd0,
    main_C_0 = 3'd1,
    for_C_0 = 3'd2,
    for_1_C_0 = 3'd3,
    main_C_1 = 3'd4;

  reg [2:0] state_var;
  reg [2:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : MatMult_run_run_fsm_1
    case (state_var)
      main_C_0 : begin
        fsm_output = 5'b00010;
        state_var_NS = for_C_0;
      end
      for_C_0 : begin
        fsm_output = 5'b00100;
        if ( for_C_0_tr0 ) begin
          state_var_NS = for_1_C_0;
        end
        else begin
          state_var_NS = for_C_0;
        end
      end
      for_1_C_0 : begin
        fsm_output = 5'b01000;
        if ( for_1_C_0_tr0 ) begin
          state_var_NS = main_C_1;
        end
        else begin
          state_var_NS = for_1_C_0;
        end
      end
      main_C_1 : begin
        fsm_output = 5'b10000;
        state_var_NS = main_C_0;
      end
      // run_rlp_C_0
      default : begin
        fsm_output = 5'b00001;
        state_var_NS = main_C_0;
      end
    endcase
  end

  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      state_var <= run_rlp_C_0;
    end
    else if ( run_wen ) begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    MatMult_run_staller
// ------------------------------------------------------------------


module MatMult_run_staller (
  clk, arst_n, run_wen, run_wten, c_chan_rsc_req_obj_wen_comp, b_chan_rsc_req_obj_wen_comp,
      a_chan_rsc_req_obj_wen_comp
);
  input clk;
  input arst_n;
  output run_wen;
  output run_wten;
  input c_chan_rsc_req_obj_wen_comp;
  input b_chan_rsc_req_obj_wen_comp;
  input a_chan_rsc_req_obj_wen_comp;


  // Interconnect Declarations
  reg run_wten_reg;


  // Interconnect Declarations for Component Instantiations 
  assign run_wen = c_chan_rsc_req_obj_wen_comp & b_chan_rsc_req_obj_wen_comp & a_chan_rsc_req_obj_wen_comp;
  assign run_wten = run_wten_reg;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      run_wten_reg <= 1'b0;
    end
    else begin
      run_wten_reg <= ~ run_wen;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    MatMult_run_a_chan_rsc_req_obj_a_chan_rsc_req_wait_dp
// ------------------------------------------------------------------


module MatMult_run_a_chan_rsc_req_obj_a_chan_rsc_req_wait_dp (
  clk, arst_n, a_chan_rsc_req_obj_oswt, a_chan_rsc_req_obj_wen_comp, a_chan_rsc_req_obj_biwt,
      a_chan_rsc_req_obj_bdwt, a_chan_rsc_req_obj_bcwt
);
  input clk;
  input arst_n;
  input a_chan_rsc_req_obj_oswt;
  output a_chan_rsc_req_obj_wen_comp;
  input a_chan_rsc_req_obj_biwt;
  input a_chan_rsc_req_obj_bdwt;
  output a_chan_rsc_req_obj_bcwt;
  reg a_chan_rsc_req_obj_bcwt;



  // Interconnect Declarations for Component Instantiations 
  assign a_chan_rsc_req_obj_wen_comp = (~ a_chan_rsc_req_obj_oswt) | a_chan_rsc_req_obj_biwt
      | a_chan_rsc_req_obj_bcwt;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      a_chan_rsc_req_obj_bcwt <= 1'b0;
    end
    else begin
      a_chan_rsc_req_obj_bcwt <= ~((~(a_chan_rsc_req_obj_bcwt | a_chan_rsc_req_obj_biwt))
          | a_chan_rsc_req_obj_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    MatMult_run_a_chan_rsc_req_obj_a_chan_rsc_req_wait_ctrl
// ------------------------------------------------------------------


module MatMult_run_a_chan_rsc_req_obj_a_chan_rsc_req_wait_ctrl (
  run_wen, a_chan_rsc_req_obj_oswt, a_chan_rsc_req_obj_biwt, a_chan_rsc_req_obj_bdwt,
      a_chan_rsc_req_obj_bcwt, a_chan_rsc_req_obj_vd
);
  input run_wen;
  input a_chan_rsc_req_obj_oswt;
  output a_chan_rsc_req_obj_biwt;
  output a_chan_rsc_req_obj_bdwt;
  input a_chan_rsc_req_obj_bcwt;
  input a_chan_rsc_req_obj_vd;



  // Interconnect Declarations for Component Instantiations 
  assign a_chan_rsc_req_obj_bdwt = a_chan_rsc_req_obj_oswt & run_wen;
  assign a_chan_rsc_req_obj_biwt = a_chan_rsc_req_obj_oswt & (~ a_chan_rsc_req_obj_bcwt)
      & a_chan_rsc_req_obj_vd;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    MatMult_run_b_chan_rsc_req_obj_b_chan_rsc_req_wait_dp
// ------------------------------------------------------------------


module MatMult_run_b_chan_rsc_req_obj_b_chan_rsc_req_wait_dp (
  clk, arst_n, b_chan_rsc_req_obj_oswt, b_chan_rsc_req_obj_wen_comp, b_chan_rsc_req_obj_biwt,
      b_chan_rsc_req_obj_bdwt, b_chan_rsc_req_obj_bcwt
);
  input clk;
  input arst_n;
  input b_chan_rsc_req_obj_oswt;
  output b_chan_rsc_req_obj_wen_comp;
  input b_chan_rsc_req_obj_biwt;
  input b_chan_rsc_req_obj_bdwt;
  output b_chan_rsc_req_obj_bcwt;
  reg b_chan_rsc_req_obj_bcwt;



  // Interconnect Declarations for Component Instantiations 
  assign b_chan_rsc_req_obj_wen_comp = (~ b_chan_rsc_req_obj_oswt) | b_chan_rsc_req_obj_biwt
      | b_chan_rsc_req_obj_bcwt;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      b_chan_rsc_req_obj_bcwt <= 1'b0;
    end
    else begin
      b_chan_rsc_req_obj_bcwt <= ~((~(b_chan_rsc_req_obj_bcwt | b_chan_rsc_req_obj_biwt))
          | b_chan_rsc_req_obj_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    MatMult_run_b_chan_rsc_req_obj_b_chan_rsc_req_wait_ctrl
// ------------------------------------------------------------------


module MatMult_run_b_chan_rsc_req_obj_b_chan_rsc_req_wait_ctrl (
  run_wen, b_chan_rsc_req_obj_oswt, b_chan_rsc_req_obj_biwt, b_chan_rsc_req_obj_bdwt,
      b_chan_rsc_req_obj_bcwt, b_chan_rsc_req_obj_vd
);
  input run_wen;
  input b_chan_rsc_req_obj_oswt;
  output b_chan_rsc_req_obj_biwt;
  output b_chan_rsc_req_obj_bdwt;
  input b_chan_rsc_req_obj_bcwt;
  input b_chan_rsc_req_obj_vd;



  // Interconnect Declarations for Component Instantiations 
  assign b_chan_rsc_req_obj_bdwt = b_chan_rsc_req_obj_oswt & run_wen;
  assign b_chan_rsc_req_obj_biwt = b_chan_rsc_req_obj_oswt & (~ b_chan_rsc_req_obj_bcwt)
      & b_chan_rsc_req_obj_vd;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    MatMult_run_c_chan_rsc_req_obj_c_chan_rsc_req_wait_dp
// ------------------------------------------------------------------


module MatMult_run_c_chan_rsc_req_obj_c_chan_rsc_req_wait_dp (
  clk, arst_n, c_chan_rsc_req_obj_oswt, c_chan_rsc_req_obj_wen_comp, c_chan_rsc_req_obj_biwt,
      c_chan_rsc_req_obj_bdwt, c_chan_rsc_req_obj_bcwt
);
  input clk;
  input arst_n;
  input c_chan_rsc_req_obj_oswt;
  output c_chan_rsc_req_obj_wen_comp;
  input c_chan_rsc_req_obj_biwt;
  input c_chan_rsc_req_obj_bdwt;
  output c_chan_rsc_req_obj_bcwt;
  reg c_chan_rsc_req_obj_bcwt;



  // Interconnect Declarations for Component Instantiations 
  assign c_chan_rsc_req_obj_wen_comp = (~ c_chan_rsc_req_obj_oswt) | c_chan_rsc_req_obj_biwt
      | c_chan_rsc_req_obj_bcwt;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      c_chan_rsc_req_obj_bcwt <= 1'b0;
    end
    else begin
      c_chan_rsc_req_obj_bcwt <= ~((~(c_chan_rsc_req_obj_bcwt | c_chan_rsc_req_obj_biwt))
          | c_chan_rsc_req_obj_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    MatMult_run_c_chan_rsc_req_obj_c_chan_rsc_req_wait_ctrl
// ------------------------------------------------------------------


module MatMult_run_c_chan_rsc_req_obj_c_chan_rsc_req_wait_ctrl (
  run_wen, c_chan_rsc_req_obj_oswt, c_chan_rsc_req_obj_biwt, c_chan_rsc_req_obj_bdwt,
      c_chan_rsc_req_obj_bcwt, c_chan_rsc_req_obj_vd
);
  input run_wen;
  input c_chan_rsc_req_obj_oswt;
  output c_chan_rsc_req_obj_biwt;
  output c_chan_rsc_req_obj_bdwt;
  input c_chan_rsc_req_obj_bcwt;
  input c_chan_rsc_req_obj_vd;



  // Interconnect Declarations for Component Instantiations 
  assign c_chan_rsc_req_obj_bdwt = c_chan_rsc_req_obj_oswt & run_wen;
  assign c_chan_rsc_req_obj_biwt = c_chan_rsc_req_obj_oswt & (~ c_chan_rsc_req_obj_bcwt)
      & c_chan_rsc_req_obj_vd;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    MatMult_run_b_chan_rsc_rls_obj_b_chan_rsc_rls_wait_ctrl
// ------------------------------------------------------------------


module MatMult_run_b_chan_rsc_rls_obj_b_chan_rsc_rls_wait_ctrl (
  run_wten, b_chan_rsc_rls_obj_iswt0, b_chan_rsc_rls_obj_ld_run_sct
);
  input run_wten;
  input b_chan_rsc_rls_obj_iswt0;
  output b_chan_rsc_rls_obj_ld_run_sct;



  // Interconnect Declarations for Component Instantiations 
  assign b_chan_rsc_rls_obj_ld_run_sct = (~ run_wten) & b_chan_rsc_rls_obj_iswt0;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    MatMult_run_a_chan_rsc_rls_obj_a_chan_rsc_rls_wait_ctrl
// ------------------------------------------------------------------


module MatMult_run_a_chan_rsc_rls_obj_a_chan_rsc_rls_wait_ctrl (
  run_wten, a_chan_rsc_rls_obj_iswt0, a_chan_rsc_rls_obj_ld_run_sct
);
  input run_wten;
  input a_chan_rsc_rls_obj_iswt0;
  output a_chan_rsc_rls_obj_ld_run_sct;



  // Interconnect Declarations for Component Instantiations 
  assign a_chan_rsc_rls_obj_ld_run_sct = (~ run_wten) & a_chan_rsc_rls_obj_iswt0;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    MatMult_run_c_chan_rsc_rls_obj_c_chan_rsc_rls_wait_ctrl
// ------------------------------------------------------------------


module MatMult_run_c_chan_rsc_rls_obj_c_chan_rsc_rls_wait_ctrl (
  run_wten, c_chan_rsc_rls_obj_iswt0, c_chan_rsc_rls_obj_ld_run_sct
);
  input run_wten;
  input c_chan_rsc_rls_obj_iswt0;
  output c_chan_rsc_rls_obj_ld_run_sct;



  // Interconnect Declarations for Component Instantiations 
  assign c_chan_rsc_rls_obj_ld_run_sct = (~ run_wten) & c_chan_rsc_rls_obj_iswt0;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    MatMult_run_c_chan_rsci_1_c_chan_rsc_wait_ctrl
// ------------------------------------------------------------------


module MatMult_run_c_chan_rsci_1_c_chan_rsc_wait_ctrl (
  c_chan_rsci_biwt_pff, run_wten_pff, c_chan_rsci_iswt0_pff
);
  output c_chan_rsci_biwt_pff;
  input run_wten_pff;
  input c_chan_rsci_iswt0_pff;



  // Interconnect Declarations for Component Instantiations 
  assign c_chan_rsci_biwt_pff = (~ run_wten_pff) & c_chan_rsci_iswt0_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    MatMult_run_b_chan_rsci_1_b_chan_rsc_wait_dp
// ------------------------------------------------------------------


module MatMult_run_b_chan_rsci_1_b_chan_rsc_wait_dp (
  clk, arst_n, b_chan_rsci_q_d, b_chan_rsci_q_d_mxwt, b_chan_rsci_biwt, b_chan_rsci_bdwt
);
  input clk;
  input arst_n;
  input [15:0] b_chan_rsci_q_d;
  output [15:0] b_chan_rsci_q_d_mxwt;
  input b_chan_rsci_biwt;
  input b_chan_rsci_bdwt;


  // Interconnect Declarations
  reg b_chan_rsci_bcwt;
  reg [15:0] b_chan_rsci_q_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign b_chan_rsci_q_d_mxwt = MUX_v_16_2_2(b_chan_rsci_q_d, b_chan_rsci_q_d_bfwt,
      b_chan_rsci_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      b_chan_rsci_bcwt <= 1'b0;
    end
    else begin
      b_chan_rsci_bcwt <= ~((~(b_chan_rsci_bcwt | b_chan_rsci_biwt)) | b_chan_rsci_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      b_chan_rsci_q_d_bfwt <= 16'b0000000000000000;
    end
    else if ( b_chan_rsci_biwt ) begin
      b_chan_rsci_q_d_bfwt <= b_chan_rsci_q_d;
    end
  end

  function automatic [15:0] MUX_v_16_2_2;
    input [15:0] input_0;
    input [15:0] input_1;
    input  sel;
    reg [15:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_16_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    MatMult_run_b_chan_rsci_1_b_chan_rsc_wait_ctrl
// ------------------------------------------------------------------


module MatMult_run_b_chan_rsci_1_b_chan_rsc_wait_ctrl (
  run_wen, run_wten, b_chan_rsci_oswt, b_chan_rsci_biwt, b_chan_rsci_bdwt, b_chan_rsci_biwt_pff,
      b_chan_rsci_oswt_pff
);
  input run_wen;
  input run_wten;
  input b_chan_rsci_oswt;
  output b_chan_rsci_biwt;
  output b_chan_rsci_bdwt;
  output b_chan_rsci_biwt_pff;
  input b_chan_rsci_oswt_pff;



  // Interconnect Declarations for Component Instantiations 
  assign b_chan_rsci_bdwt = b_chan_rsci_oswt & run_wen;
  assign b_chan_rsci_biwt = (~ run_wten) & b_chan_rsci_oswt;
  assign b_chan_rsci_biwt_pff = run_wen & b_chan_rsci_oswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    MatMult_run_a_chan_rsci_1_a_chan_rsc_wait_dp
// ------------------------------------------------------------------


module MatMult_run_a_chan_rsci_1_a_chan_rsc_wait_dp (
  clk, arst_n, a_chan_rsci_q_d, a_chan_rsci_q_d_mxwt, a_chan_rsci_biwt, a_chan_rsci_bdwt
);
  input clk;
  input arst_n;
  input [15:0] a_chan_rsci_q_d;
  output [15:0] a_chan_rsci_q_d_mxwt;
  input a_chan_rsci_biwt;
  input a_chan_rsci_bdwt;


  // Interconnect Declarations
  reg a_chan_rsci_bcwt;
  reg [15:0] a_chan_rsci_q_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign a_chan_rsci_q_d_mxwt = MUX_v_16_2_2(a_chan_rsci_q_d, a_chan_rsci_q_d_bfwt,
      a_chan_rsci_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      a_chan_rsci_bcwt <= 1'b0;
    end
    else begin
      a_chan_rsci_bcwt <= ~((~(a_chan_rsci_bcwt | a_chan_rsci_biwt)) | a_chan_rsci_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      a_chan_rsci_q_d_bfwt <= 16'b0000000000000000;
    end
    else if ( a_chan_rsci_biwt ) begin
      a_chan_rsci_q_d_bfwt <= a_chan_rsci_q_d;
    end
  end

  function automatic [15:0] MUX_v_16_2_2;
    input [15:0] input_0;
    input [15:0] input_1;
    input  sel;
    reg [15:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_16_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    MatMult_run_a_chan_rsci_1_a_chan_rsc_wait_ctrl
// ------------------------------------------------------------------


module MatMult_run_a_chan_rsci_1_a_chan_rsc_wait_ctrl (
  run_wen, run_wten, a_chan_rsci_oswt, a_chan_rsci_biwt, a_chan_rsci_bdwt, a_chan_rsci_biwt_pff,
      a_chan_rsci_oswt_pff
);
  input run_wen;
  input run_wten;
  input a_chan_rsci_oswt;
  output a_chan_rsci_biwt;
  output a_chan_rsci_bdwt;
  output a_chan_rsci_biwt_pff;
  input a_chan_rsci_oswt_pff;



  // Interconnect Declarations for Component Instantiations 
  assign a_chan_rsci_bdwt = a_chan_rsci_oswt & run_wen;
  assign a_chan_rsci_biwt = (~ run_wten) & a_chan_rsci_oswt;
  assign a_chan_rsci_biwt_pff = run_wen & a_chan_rsci_oswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    MatMult_run_a_chan_rsc_req_obj
// ------------------------------------------------------------------


module MatMult_run_a_chan_rsc_req_obj (
  clk, arst_n, a_chan_rsc_req_vz, run_wen, a_chan_rsc_req_obj_oswt, a_chan_rsc_req_obj_wen_comp
);
  input clk;
  input arst_n;
  input a_chan_rsc_req_vz;
  input run_wen;
  input a_chan_rsc_req_obj_oswt;
  output a_chan_rsc_req_obj_wen_comp;


  // Interconnect Declarations
  wire a_chan_rsc_req_obj_biwt;
  wire a_chan_rsc_req_obj_bdwt;
  wire a_chan_rsc_req_obj_bcwt;
  wire a_chan_rsc_req_obj_vd;


  // Interconnect Declarations for Component Instantiations 
  mgc_in_sync_v2 #(.valid(32'sd1)) a_chan_rsc_req_obj (
      .vd(a_chan_rsc_req_obj_vd),
      .vz(a_chan_rsc_req_vz)
    );
  MatMult_run_a_chan_rsc_req_obj_a_chan_rsc_req_wait_ctrl MatMult_run_a_chan_rsc_req_obj_a_chan_rsc_req_wait_ctrl_inst
      (
      .run_wen(run_wen),
      .a_chan_rsc_req_obj_oswt(a_chan_rsc_req_obj_oswt),
      .a_chan_rsc_req_obj_biwt(a_chan_rsc_req_obj_biwt),
      .a_chan_rsc_req_obj_bdwt(a_chan_rsc_req_obj_bdwt),
      .a_chan_rsc_req_obj_bcwt(a_chan_rsc_req_obj_bcwt),
      .a_chan_rsc_req_obj_vd(a_chan_rsc_req_obj_vd)
    );
  MatMult_run_a_chan_rsc_req_obj_a_chan_rsc_req_wait_dp MatMult_run_a_chan_rsc_req_obj_a_chan_rsc_req_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .a_chan_rsc_req_obj_oswt(a_chan_rsc_req_obj_oswt),
      .a_chan_rsc_req_obj_wen_comp(a_chan_rsc_req_obj_wen_comp),
      .a_chan_rsc_req_obj_biwt(a_chan_rsc_req_obj_biwt),
      .a_chan_rsc_req_obj_bdwt(a_chan_rsc_req_obj_bdwt),
      .a_chan_rsc_req_obj_bcwt(a_chan_rsc_req_obj_bcwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    MatMult_run_b_chan_rsc_req_obj
// ------------------------------------------------------------------


module MatMult_run_b_chan_rsc_req_obj (
  clk, arst_n, b_chan_rsc_req_vz, run_wen, b_chan_rsc_req_obj_oswt, b_chan_rsc_req_obj_wen_comp
);
  input clk;
  input arst_n;
  input b_chan_rsc_req_vz;
  input run_wen;
  input b_chan_rsc_req_obj_oswt;
  output b_chan_rsc_req_obj_wen_comp;


  // Interconnect Declarations
  wire b_chan_rsc_req_obj_biwt;
  wire b_chan_rsc_req_obj_bdwt;
  wire b_chan_rsc_req_obj_bcwt;
  wire b_chan_rsc_req_obj_vd;


  // Interconnect Declarations for Component Instantiations 
  mgc_in_sync_v2 #(.valid(32'sd1)) b_chan_rsc_req_obj (
      .vd(b_chan_rsc_req_obj_vd),
      .vz(b_chan_rsc_req_vz)
    );
  MatMult_run_b_chan_rsc_req_obj_b_chan_rsc_req_wait_ctrl MatMult_run_b_chan_rsc_req_obj_b_chan_rsc_req_wait_ctrl_inst
      (
      .run_wen(run_wen),
      .b_chan_rsc_req_obj_oswt(b_chan_rsc_req_obj_oswt),
      .b_chan_rsc_req_obj_biwt(b_chan_rsc_req_obj_biwt),
      .b_chan_rsc_req_obj_bdwt(b_chan_rsc_req_obj_bdwt),
      .b_chan_rsc_req_obj_bcwt(b_chan_rsc_req_obj_bcwt),
      .b_chan_rsc_req_obj_vd(b_chan_rsc_req_obj_vd)
    );
  MatMult_run_b_chan_rsc_req_obj_b_chan_rsc_req_wait_dp MatMult_run_b_chan_rsc_req_obj_b_chan_rsc_req_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .b_chan_rsc_req_obj_oswt(b_chan_rsc_req_obj_oswt),
      .b_chan_rsc_req_obj_wen_comp(b_chan_rsc_req_obj_wen_comp),
      .b_chan_rsc_req_obj_biwt(b_chan_rsc_req_obj_biwt),
      .b_chan_rsc_req_obj_bdwt(b_chan_rsc_req_obj_bdwt),
      .b_chan_rsc_req_obj_bcwt(b_chan_rsc_req_obj_bcwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    MatMult_run_c_chan_rsc_req_obj
// ------------------------------------------------------------------


module MatMult_run_c_chan_rsc_req_obj (
  clk, arst_n, c_chan_rsc_req_vz, run_wen, c_chan_rsc_req_obj_oswt, c_chan_rsc_req_obj_wen_comp
);
  input clk;
  input arst_n;
  input c_chan_rsc_req_vz;
  input run_wen;
  input c_chan_rsc_req_obj_oswt;
  output c_chan_rsc_req_obj_wen_comp;


  // Interconnect Declarations
  wire c_chan_rsc_req_obj_biwt;
  wire c_chan_rsc_req_obj_bdwt;
  wire c_chan_rsc_req_obj_bcwt;
  wire c_chan_rsc_req_obj_vd;


  // Interconnect Declarations for Component Instantiations 
  mgc_in_sync_v2 #(.valid(32'sd1)) c_chan_rsc_req_obj (
      .vd(c_chan_rsc_req_obj_vd),
      .vz(c_chan_rsc_req_vz)
    );
  MatMult_run_c_chan_rsc_req_obj_c_chan_rsc_req_wait_ctrl MatMult_run_c_chan_rsc_req_obj_c_chan_rsc_req_wait_ctrl_inst
      (
      .run_wen(run_wen),
      .c_chan_rsc_req_obj_oswt(c_chan_rsc_req_obj_oswt),
      .c_chan_rsc_req_obj_biwt(c_chan_rsc_req_obj_biwt),
      .c_chan_rsc_req_obj_bdwt(c_chan_rsc_req_obj_bdwt),
      .c_chan_rsc_req_obj_bcwt(c_chan_rsc_req_obj_bcwt),
      .c_chan_rsc_req_obj_vd(c_chan_rsc_req_obj_vd)
    );
  MatMult_run_c_chan_rsc_req_obj_c_chan_rsc_req_wait_dp MatMult_run_c_chan_rsc_req_obj_c_chan_rsc_req_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .c_chan_rsc_req_obj_oswt(c_chan_rsc_req_obj_oswt),
      .c_chan_rsc_req_obj_wen_comp(c_chan_rsc_req_obj_wen_comp),
      .c_chan_rsc_req_obj_biwt(c_chan_rsc_req_obj_biwt),
      .c_chan_rsc_req_obj_bdwt(c_chan_rsc_req_obj_bdwt),
      .c_chan_rsc_req_obj_bcwt(c_chan_rsc_req_obj_bcwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    MatMult_run_b_chan_rsc_rls_obj
// ------------------------------------------------------------------


module MatMult_run_b_chan_rsc_rls_obj (
  b_chan_rsc_rls_lz, run_wten, b_chan_rsc_rls_obj_iswt0
);
  output b_chan_rsc_rls_lz;
  input run_wten;
  input b_chan_rsc_rls_obj_iswt0;


  // Interconnect Declarations
  wire b_chan_rsc_rls_obj_ld_run_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) b_chan_rsc_rls_obj (
      .ld(b_chan_rsc_rls_obj_ld_run_sct),
      .lz(b_chan_rsc_rls_lz)
    );
  MatMult_run_b_chan_rsc_rls_obj_b_chan_rsc_rls_wait_ctrl MatMult_run_b_chan_rsc_rls_obj_b_chan_rsc_rls_wait_ctrl_inst
      (
      .run_wten(run_wten),
      .b_chan_rsc_rls_obj_iswt0(b_chan_rsc_rls_obj_iswt0),
      .b_chan_rsc_rls_obj_ld_run_sct(b_chan_rsc_rls_obj_ld_run_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    MatMult_run_a_chan_rsc_rls_obj
// ------------------------------------------------------------------


module MatMult_run_a_chan_rsc_rls_obj (
  a_chan_rsc_rls_lz, run_wten, a_chan_rsc_rls_obj_iswt0
);
  output a_chan_rsc_rls_lz;
  input run_wten;
  input a_chan_rsc_rls_obj_iswt0;


  // Interconnect Declarations
  wire a_chan_rsc_rls_obj_ld_run_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) a_chan_rsc_rls_obj (
      .ld(a_chan_rsc_rls_obj_ld_run_sct),
      .lz(a_chan_rsc_rls_lz)
    );
  MatMult_run_a_chan_rsc_rls_obj_a_chan_rsc_rls_wait_ctrl MatMult_run_a_chan_rsc_rls_obj_a_chan_rsc_rls_wait_ctrl_inst
      (
      .run_wten(run_wten),
      .a_chan_rsc_rls_obj_iswt0(a_chan_rsc_rls_obj_iswt0),
      .a_chan_rsc_rls_obj_ld_run_sct(a_chan_rsc_rls_obj_ld_run_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    MatMult_run_c_chan_rsc_rls_obj
// ------------------------------------------------------------------


module MatMult_run_c_chan_rsc_rls_obj (
  c_chan_rsc_rls_lz, run_wten, c_chan_rsc_rls_obj_iswt0
);
  output c_chan_rsc_rls_lz;
  input run_wten;
  input c_chan_rsc_rls_obj_iswt0;


  // Interconnect Declarations
  wire c_chan_rsc_rls_obj_ld_run_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) c_chan_rsc_rls_obj (
      .ld(c_chan_rsc_rls_obj_ld_run_sct),
      .lz(c_chan_rsc_rls_lz)
    );
  MatMult_run_c_chan_rsc_rls_obj_c_chan_rsc_rls_wait_ctrl MatMult_run_c_chan_rsc_rls_obj_c_chan_rsc_rls_wait_ctrl_inst
      (
      .run_wten(run_wten),
      .c_chan_rsc_rls_obj_iswt0(c_chan_rsc_rls_obj_iswt0),
      .c_chan_rsc_rls_obj_ld_run_sct(c_chan_rsc_rls_obj_ld_run_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    MatMult_run_c_chan_rsci_1
// ------------------------------------------------------------------


module MatMult_run_c_chan_rsci_1 (
  c_chan_rsci_we_d_pff, run_wten_pff, c_chan_rsci_iswt0_pff
);
  output c_chan_rsci_we_d_pff;
  input run_wten_pff;
  input c_chan_rsci_iswt0_pff;


  // Interconnect Declarations
  wire c_chan_rsci_biwt_iff;


  // Interconnect Declarations for Component Instantiations 
  MatMult_run_c_chan_rsci_1_c_chan_rsc_wait_ctrl MatMult_run_c_chan_rsci_1_c_chan_rsc_wait_ctrl_inst
      (
      .c_chan_rsci_biwt_pff(c_chan_rsci_biwt_iff),
      .run_wten_pff(run_wten_pff),
      .c_chan_rsci_iswt0_pff(c_chan_rsci_iswt0_pff)
    );
  assign c_chan_rsci_we_d_pff = c_chan_rsci_biwt_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    MatMult_run_b_chan_rsci_1
// ------------------------------------------------------------------


module MatMult_run_b_chan_rsci_1 (
  clk, arst_n, b_chan_rsci_q_d, run_wen, run_wten, b_chan_rsci_oswt, b_chan_rsci_q_d_mxwt,
      b_chan_rsci_re_d_pff, b_chan_rsci_oswt_pff
);
  input clk;
  input arst_n;
  input [15:0] b_chan_rsci_q_d;
  input run_wen;
  input run_wten;
  input b_chan_rsci_oswt;
  output [15:0] b_chan_rsci_q_d_mxwt;
  output b_chan_rsci_re_d_pff;
  input b_chan_rsci_oswt_pff;


  // Interconnect Declarations
  wire b_chan_rsci_biwt;
  wire b_chan_rsci_bdwt;
  wire b_chan_rsci_biwt_iff;


  // Interconnect Declarations for Component Instantiations 
  MatMult_run_b_chan_rsci_1_b_chan_rsc_wait_ctrl MatMult_run_b_chan_rsci_1_b_chan_rsc_wait_ctrl_inst
      (
      .run_wen(run_wen),
      .run_wten(run_wten),
      .b_chan_rsci_oswt(b_chan_rsci_oswt),
      .b_chan_rsci_biwt(b_chan_rsci_biwt),
      .b_chan_rsci_bdwt(b_chan_rsci_bdwt),
      .b_chan_rsci_biwt_pff(b_chan_rsci_biwt_iff),
      .b_chan_rsci_oswt_pff(b_chan_rsci_oswt_pff)
    );
  MatMult_run_b_chan_rsci_1_b_chan_rsc_wait_dp MatMult_run_b_chan_rsci_1_b_chan_rsc_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .b_chan_rsci_q_d(b_chan_rsci_q_d),
      .b_chan_rsci_q_d_mxwt(b_chan_rsci_q_d_mxwt),
      .b_chan_rsci_biwt(b_chan_rsci_biwt),
      .b_chan_rsci_bdwt(b_chan_rsci_bdwt)
    );
  assign b_chan_rsci_re_d_pff = b_chan_rsci_biwt_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    MatMult_run_a_chan_rsci_1
// ------------------------------------------------------------------


module MatMult_run_a_chan_rsci_1 (
  clk, arst_n, a_chan_rsci_q_d, run_wen, run_wten, a_chan_rsci_oswt, a_chan_rsci_q_d_mxwt,
      a_chan_rsci_re_d_pff, a_chan_rsci_oswt_pff
);
  input clk;
  input arst_n;
  input [15:0] a_chan_rsci_q_d;
  input run_wen;
  input run_wten;
  input a_chan_rsci_oswt;
  output [15:0] a_chan_rsci_q_d_mxwt;
  output a_chan_rsci_re_d_pff;
  input a_chan_rsci_oswt_pff;


  // Interconnect Declarations
  wire a_chan_rsci_biwt;
  wire a_chan_rsci_bdwt;
  wire a_chan_rsci_biwt_iff;


  // Interconnect Declarations for Component Instantiations 
  MatMult_run_a_chan_rsci_1_a_chan_rsc_wait_ctrl MatMult_run_a_chan_rsci_1_a_chan_rsc_wait_ctrl_inst
      (
      .run_wen(run_wen),
      .run_wten(run_wten),
      .a_chan_rsci_oswt(a_chan_rsci_oswt),
      .a_chan_rsci_biwt(a_chan_rsci_biwt),
      .a_chan_rsci_bdwt(a_chan_rsci_bdwt),
      .a_chan_rsci_biwt_pff(a_chan_rsci_biwt_iff),
      .a_chan_rsci_oswt_pff(a_chan_rsci_oswt_pff)
    );
  MatMult_run_a_chan_rsci_1_a_chan_rsc_wait_dp MatMult_run_a_chan_rsci_1_a_chan_rsc_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .a_chan_rsci_q_d(a_chan_rsci_q_d),
      .a_chan_rsci_q_d_mxwt(a_chan_rsci_q_d_mxwt),
      .a_chan_rsci_biwt(a_chan_rsci_biwt),
      .a_chan_rsci_bdwt(a_chan_rsci_bdwt)
    );
  assign a_chan_rsci_re_d_pff = a_chan_rsci_biwt_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    MatMult_run
// ------------------------------------------------------------------


module MatMult_run (
  clk, arst_n, a_chan_rsc_req_vz, a_chan_rsc_rls_lz, b_chan_rsc_req_vz, b_chan_rsc_rls_lz,
      c_chan_rsc_req_vz, c_chan_rsc_rls_lz, a_chan_rsci_radr_d, a_chan_rsci_q_d,
      b_chan_rsci_radr_d, b_chan_rsci_q_d, c_chan_rsci_wadr_d, c_chan_rsci_d_d, a_chan_rsci_re_d_pff,
      b_chan_rsci_re_d_pff, c_chan_rsci_we_d_pff
);
  input clk;
  input arst_n;
  input a_chan_rsc_req_vz;
  output a_chan_rsc_rls_lz;
  input b_chan_rsc_req_vz;
  output b_chan_rsc_rls_lz;
  input c_chan_rsc_req_vz;
  output c_chan_rsc_rls_lz;
  output [13:0] a_chan_rsci_radr_d;
  input [15:0] a_chan_rsci_q_d;
  output [13:0] b_chan_rsci_radr_d;
  input [15:0] b_chan_rsci_q_d;
  output [13:0] c_chan_rsci_wadr_d;
  output [15:0] c_chan_rsci_d_d;
  output a_chan_rsci_re_d_pff;
  output b_chan_rsci_re_d_pff;
  output c_chan_rsci_we_d_pff;


  // Interconnect Declarations
  wire run_wen;
  wire run_wten;
  wire [15:0] a_chan_rsci_q_d_mxwt;
  wire [15:0] b_chan_rsci_q_d_mxwt;
  wire c_chan_rsc_req_obj_wen_comp;
  wire b_chan_rsc_req_obj_wen_comp;
  wire a_chan_rsc_req_obj_wen_comp;
  wire [4:0] fsm_output;
  wire and_dcpl_4;
  wire or_tmp_16;
  reg for_1_stage_0;
  reg for_1_for_for_slc_for_1_for_for_acc_5_svs_st_1;
  reg exit_for_1_for_sva_2;
  reg reg_a_chan_rsc_req_obj_iswt0_cse;
  reg reg_b_chan_rsc_rls_obj_iswt0_cse;
  wire or_12_cse;
  wire a_chan_rsci_re_d_iff;
  wire and_34_rmff;
  wire b_chan_rsci_re_d_iff;
  wire c_chan_rsci_we_d_iff;
  wire [7:0] for_for_for_for_conc_2_10_3;
  wire [8:0] nl_for_for_for_for_conc_2_10_3;
  reg [6:0] for_1_i_6_0_sva;
  wire [6:0] for_1_for_for_k_6_0_lpi_2_dfm_3;
  reg [6:0] for_1_for_j_6_0_sva;
  wire [11:0] c_chan_rsci_wadr_d_run_13_2_mx0w0;
  wire [12:0] nl_c_chan_rsci_wadr_d_run_13_2_mx0w0;
  reg [11:0] for_1_for_acc_4_itm_1;
  reg [1:0] for_1_for_j_slc_for_1_for_j_6_0_1_0_itm_1;
  reg lfst_exit_for_1_for_sva;
  reg [6:0] for_1_for_for_k_6_0_lpi_2;
  reg [15:0] for_1_for_for_1_for_and_itm_1;
  wire for_1_stage_0_mx0c0;
  wire for_1_i_6_0_sva_mx1c1;
  wire lfst_exit_for_1_for_sva_dfm_1;
  wire [6:0] for_i_6_0_sva_2;
  wire [7:0] nl_for_i_6_0_sva_2;
  wire [6:0] for_for_j_6_0_sva_2;
  wire [7:0] nl_for_for_j_6_0_sva_2;
  wire [6:0] for_1_for_for_k_6_0_sva_2;
  wire [7:0] nl_for_1_for_for_k_6_0_sva_2;
  wire [15:0] mul_inst_run_out_1;
  wire [15:0] add_inst_run_out_1;
  wire for_1_for_and_1_cse;
  wire for_1_for_for_and_cse;
  reg reg_b_chan_rsci_iswt0_cse_1;
  wire for_1_for_for_acc_itm_5_1;
  wire for_1_acc_1_itm_5_1;
  wire for_1_for_acc_1_itm_5_1;

  wire[6:0] or_44_nl;
  wire nor_10_nl;
  wire nor_9_nl;
  wire for_1_i_mux_nl;
  wire for_1_i_or_nl;
  wire[6:0] for_i_mux_nl;
  wire[6:0] for_i_nand_nl;
  wire for_for_for_for_or_nl;
  wire[6:0] for_i_nand_1_nl;
  wire[6:0] for_1_for_j_mux_nl;
  wire and_67_nl;
  wire[5:0] for_1_for_for_acc_nl;
  wire[6:0] nl_for_1_for_for_acc_nl;
  wire[6:0] for_for_acc_9_nl;
  wire[7:0] nl_for_for_acc_9_nl;
  wire[5:0] for_1_acc_1_nl;
  wire[6:0] nl_for_1_acc_1_nl;
  wire[5:0] for_1_for_acc_1_nl;
  wire[6:0] nl_for_1_for_acc_1_nl;
  wire[11:0] for_1_for_for_acc_6_nl;
  wire[12:0] nl_for_1_for_for_acc_6_nl;
  wire[11:0] for_1_for_for_acc_7_nl;
  wire[12:0] nl_for_1_for_for_acc_7_nl;
  wire[7:0] for_1_for_for_acc_15_nl;
  wire[8:0] nl_for_1_for_for_acc_15_nl;
  wire[6:0] for_1_for_for_acc_14_nl;
  wire[7:0] nl_for_1_for_for_acc_14_nl;
  wire[11:0] for_for_mux_1_nl;
  wire[1:0] for_for_mux_nl;

  // Interconnect Declarations for Component Instantiations 
  wire  nl_MatMult_run_c_chan_rsci_1_inst_run_wten_pff;
  assign nl_MatMult_run_c_chan_rsci_1_inst_run_wten_pff = ~ run_wen;
  wire  nl_MatMult_run_c_chan_rsci_1_inst_c_chan_rsci_iswt0_pff;
  assign nl_MatMult_run_c_chan_rsci_1_inst_c_chan_rsci_iswt0_pff = ((~ for_1_for_for_slc_for_1_for_for_acc_5_svs_st_1)
      & reg_b_chan_rsci_iswt0_cse_1 & (fsm_output[3])) | (for_1_stage_0 & (fsm_output[2]));
  wire  nl_MatMult_run_run_fsm_inst_for_C_0_tr0;
  assign nl_MatMult_run_run_fsm_inst_for_C_0_tr0 = ~ for_1_stage_0;
  mult  mul_inst_run_rg (
      .a(a_chan_rsci_q_d_mxwt),
      .b(b_chan_rsci_q_d_mxwt),
      .z(mul_inst_run_out_1)
    );
  adder  add_inst_run_rg (
      .a(for_1_for_for_1_for_and_itm_1),
      .b(mul_inst_run_out_1),
      .z(add_inst_run_out_1)
    );
  MatMult_run_a_chan_rsci_1 MatMult_run_a_chan_rsci_1_inst (
      .clk(clk),
      .arst_n(arst_n),
      .a_chan_rsci_q_d(a_chan_rsci_q_d),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .a_chan_rsci_oswt(reg_b_chan_rsci_iswt0_cse_1),
      .a_chan_rsci_q_d_mxwt(a_chan_rsci_q_d_mxwt),
      .a_chan_rsci_re_d_pff(a_chan_rsci_re_d_iff),
      .a_chan_rsci_oswt_pff(and_34_rmff)
    );
  MatMult_run_b_chan_rsci_1 MatMult_run_b_chan_rsci_1_inst (
      .clk(clk),
      .arst_n(arst_n),
      .b_chan_rsci_q_d(b_chan_rsci_q_d),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .b_chan_rsci_oswt(reg_b_chan_rsci_iswt0_cse_1),
      .b_chan_rsci_q_d_mxwt(b_chan_rsci_q_d_mxwt),
      .b_chan_rsci_re_d_pff(b_chan_rsci_re_d_iff),
      .b_chan_rsci_oswt_pff(and_34_rmff)
    );
  MatMult_run_c_chan_rsci_1 MatMult_run_c_chan_rsci_1_inst (
      .c_chan_rsci_we_d_pff(c_chan_rsci_we_d_iff),
      .run_wten_pff(nl_MatMult_run_c_chan_rsci_1_inst_run_wten_pff),
      .c_chan_rsci_iswt0_pff(nl_MatMult_run_c_chan_rsci_1_inst_c_chan_rsci_iswt0_pff)
    );
  MatMult_run_c_chan_rsc_rls_obj MatMult_run_c_chan_rsc_rls_obj_inst (
      .c_chan_rsc_rls_lz(c_chan_rsc_rls_lz),
      .run_wten(run_wten),
      .c_chan_rsc_rls_obj_iswt0(reg_b_chan_rsc_rls_obj_iswt0_cse)
    );
  MatMult_run_a_chan_rsc_rls_obj MatMult_run_a_chan_rsc_rls_obj_inst (
      .a_chan_rsc_rls_lz(a_chan_rsc_rls_lz),
      .run_wten(run_wten),
      .a_chan_rsc_rls_obj_iswt0(reg_b_chan_rsc_rls_obj_iswt0_cse)
    );
  MatMult_run_b_chan_rsc_rls_obj MatMult_run_b_chan_rsc_rls_obj_inst (
      .b_chan_rsc_rls_lz(b_chan_rsc_rls_lz),
      .run_wten(run_wten),
      .b_chan_rsc_rls_obj_iswt0(reg_b_chan_rsc_rls_obj_iswt0_cse)
    );
  MatMult_run_c_chan_rsc_req_obj MatMult_run_c_chan_rsc_req_obj_inst (
      .clk(clk),
      .arst_n(arst_n),
      .c_chan_rsc_req_vz(c_chan_rsc_req_vz),
      .run_wen(run_wen),
      .c_chan_rsc_req_obj_oswt(reg_a_chan_rsc_req_obj_iswt0_cse),
      .c_chan_rsc_req_obj_wen_comp(c_chan_rsc_req_obj_wen_comp)
    );
  MatMult_run_b_chan_rsc_req_obj MatMult_run_b_chan_rsc_req_obj_inst (
      .clk(clk),
      .arst_n(arst_n),
      .b_chan_rsc_req_vz(b_chan_rsc_req_vz),
      .run_wen(run_wen),
      .b_chan_rsc_req_obj_oswt(reg_a_chan_rsc_req_obj_iswt0_cse),
      .b_chan_rsc_req_obj_wen_comp(b_chan_rsc_req_obj_wen_comp)
    );
  MatMult_run_a_chan_rsc_req_obj MatMult_run_a_chan_rsc_req_obj_inst (
      .clk(clk),
      .arst_n(arst_n),
      .a_chan_rsc_req_vz(a_chan_rsc_req_vz),
      .run_wen(run_wen),
      .a_chan_rsc_req_obj_oswt(reg_a_chan_rsc_req_obj_iswt0_cse),
      .a_chan_rsc_req_obj_wen_comp(a_chan_rsc_req_obj_wen_comp)
    );
  MatMult_run_staller MatMult_run_staller_inst (
      .clk(clk),
      .arst_n(arst_n),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .c_chan_rsc_req_obj_wen_comp(c_chan_rsc_req_obj_wen_comp),
      .b_chan_rsc_req_obj_wen_comp(b_chan_rsc_req_obj_wen_comp),
      .a_chan_rsc_req_obj_wen_comp(a_chan_rsc_req_obj_wen_comp)
    );
  MatMult_run_run_fsm MatMult_run_run_fsm_inst (
      .clk(clk),
      .arst_n(arst_n),
      .run_wen(run_wen),
      .fsm_output(fsm_output),
      .for_C_0_tr0(nl_MatMult_run_run_fsm_inst_for_C_0_tr0),
      .for_1_C_0_tr0(and_dcpl_4)
    );
  assign and_34_rmff = for_1_stage_0 & (fsm_output[3]);
  assign or_12_cse = for_1_for_acc_1_itm_5_1 | for_1_for_for_acc_itm_5_1;
  assign for_1_for_for_and_cse = run_wen & for_1_stage_0;
  assign for_1_for_and_1_cse = run_wen & for_1_stage_0 & (~ for_1_for_for_acc_itm_5_1);
  assign nl_c_chan_rsci_wadr_d_run_13_2_mx0w0 = conv_s2u_11_12({for_for_for_for_conc_2_10_3
      , (for_1_i_6_0_sva[2:0])}) + ({for_1_i_6_0_sva , (for_1_for_j_6_0_sva[6:2])});
  assign c_chan_rsci_wadr_d_run_13_2_mx0w0 = nl_c_chan_rsci_wadr_d_run_13_2_mx0w0[11:0];
  assign lfst_exit_for_1_for_sva_dfm_1 = (~ for_1_acc_1_itm_5_1) | for_1_for_acc_1_itm_5_1
      | for_1_for_for_acc_itm_5_1;
  assign nl_for_i_6_0_sva_2 = for_1_i_6_0_sva + 7'b0000001;
  assign for_i_6_0_sva_2 = nl_for_i_6_0_sva_2[6:0];
  assign nl_for_for_j_6_0_sva_2 = for_1_for_j_6_0_sva + 7'b0000001;
  assign for_for_j_6_0_sva_2 = nl_for_for_j_6_0_sva_2[6:0];
  assign nl_for_1_for_for_acc_nl = conv_u2s_5_6(for_1_for_for_k_6_0_sva_2[6:2]) +
      6'b100111;
  assign for_1_for_for_acc_nl = nl_for_1_for_for_acc_nl[5:0];
  assign for_1_for_for_acc_itm_5_1 = readslicef_6_1_5(for_1_for_for_acc_nl);
  assign nl_for_1_for_for_k_6_0_sva_2 = for_1_for_for_k_6_0_lpi_2_dfm_3 + 7'b0000001;
  assign for_1_for_for_k_6_0_sva_2 = nl_for_1_for_for_k_6_0_sva_2[6:0];
  assign for_1_for_for_k_6_0_lpi_2_dfm_3 = MUX_v_7_2_2(7'b0000000, for_1_for_for_k_6_0_lpi_2,
      lfst_exit_for_1_for_sva);
  assign nl_for_for_acc_9_nl = (~ for_1_i_6_0_sva) + conv_u2s_4_7(for_1_i_6_0_sva[6:3]);
  assign for_for_acc_9_nl = nl_for_for_acc_9_nl[6:0];
  assign nl_for_for_for_for_conc_2_10_3 = ({1'b1 , for_for_acc_9_nl}) + 8'b00000001;
  assign for_for_for_for_conc_2_10_3 = nl_for_for_for_for_conc_2_10_3[7:0];
  assign nl_for_1_acc_1_nl = conv_u2s_5_6(for_i_6_0_sva_2[6:2]) + 6'b100111;
  assign for_1_acc_1_nl = nl_for_1_acc_1_nl[5:0];
  assign for_1_acc_1_itm_5_1 = readslicef_6_1_5(for_1_acc_1_nl);
  assign nl_for_1_for_acc_1_nl = conv_u2s_5_6(for_for_j_6_0_sva_2[6:2]) + 6'b100111;
  assign for_1_for_acc_1_nl = nl_for_1_for_acc_1_nl[5:0];
  assign for_1_for_acc_1_itm_5_1 = readslicef_6_1_5(for_1_for_acc_1_nl);
  assign and_dcpl_4 = ~(for_1_stage_0 | reg_b_chan_rsci_iswt0_cse_1);
  assign or_tmp_16 = ~((fsm_output[3:2]!=2'b00));
  assign for_1_stage_0_mx0c0 = (fsm_output[1]) | ((~ for_1_stage_0) & (fsm_output[2]));
  assign for_1_i_6_0_sva_mx1c1 = (~ for_1_for_acc_1_itm_5_1) & for_1_stage_0;
  assign nl_for_1_for_for_acc_6_nl = conv_s2u_11_12({for_for_for_for_conc_2_10_3
      , (for_1_i_6_0_sva[2:0])}) + ({for_1_i_6_0_sva , (for_1_for_for_k_6_0_lpi_2_dfm_3[6:2])});
  assign for_1_for_for_acc_6_nl = nl_for_1_for_for_acc_6_nl[11:0];
  assign a_chan_rsci_radr_d = {for_1_for_for_acc_6_nl , (for_1_for_for_k_6_0_lpi_2_dfm_3[1:0])};
  assign a_chan_rsci_re_d_pff = a_chan_rsci_re_d_iff;
  assign nl_for_1_for_for_acc_14_nl = (~ for_1_for_for_k_6_0_lpi_2_dfm_3) + conv_u2s_4_7(for_1_for_for_k_6_0_lpi_2_dfm_3[6:3]);
  assign for_1_for_for_acc_14_nl = nl_for_1_for_for_acc_14_nl[6:0];
  assign nl_for_1_for_for_acc_15_nl = ({1'b1 , for_1_for_for_acc_14_nl}) + 8'b00000001;
  assign for_1_for_for_acc_15_nl = nl_for_1_for_for_acc_15_nl[7:0];
  assign nl_for_1_for_for_acc_7_nl = conv_s2u_11_12({for_1_for_for_acc_15_nl , (for_1_for_for_k_6_0_lpi_2_dfm_3[2:0])})
      + ({for_1_for_for_k_6_0_lpi_2_dfm_3 , (for_1_for_j_6_0_sva[6:2])});
  assign for_1_for_for_acc_7_nl = nl_for_1_for_for_acc_7_nl[11:0];
  assign b_chan_rsci_radr_d = {for_1_for_for_acc_7_nl , (for_1_for_j_6_0_sva[1:0])};
  assign b_chan_rsci_re_d_pff = b_chan_rsci_re_d_iff;
  assign for_for_mux_1_nl = MUX_v_12_2_2(c_chan_rsci_wadr_d_run_13_2_mx0w0, for_1_for_acc_4_itm_1,
      fsm_output[3]);
  assign for_for_mux_nl = MUX_v_2_2_2((for_1_for_j_6_0_sva[1:0]), for_1_for_j_slc_for_1_for_j_6_0_1_0_itm_1,
      fsm_output[3]);
  assign c_chan_rsci_wadr_d = {for_for_mux_1_nl , for_for_mux_nl};
  assign c_chan_rsci_d_d = MUX_v_16_2_2(16'b0000000000000000, add_inst_run_out_1,
      (fsm_output[3]));
  assign c_chan_rsci_we_d_pff = c_chan_rsci_we_d_iff;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      reg_a_chan_rsc_req_obj_iswt0_cse <= 1'b0;
      reg_b_chan_rsc_rls_obj_iswt0_cse <= 1'b0;
      reg_b_chan_rsci_iswt0_cse_1 <= 1'b0;
      for_1_for_j_6_0_sva <= 7'b0000000;
      lfst_exit_for_1_for_sva <= 1'b0;
    end
    else if ( run_wen ) begin
      reg_a_chan_rsc_req_obj_iswt0_cse <= (fsm_output[0]) | (fsm_output[4]);
      reg_b_chan_rsc_rls_obj_iswt0_cse <= and_dcpl_4 & (fsm_output[3]);
      reg_b_chan_rsci_iswt0_cse_1 <= and_34_rmff;
      for_1_for_j_6_0_sva <= ~(MUX_v_7_2_2(for_i_mux_nl, 7'b1111111, or_tmp_16));
      lfst_exit_for_1_for_sva <= lfst_exit_for_1_for_sva_dfm_1 & (fsm_output[3]);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      exit_for_1_for_sva_2 <= 1'b0;
    end
    else if ( run_wen & (~((~ for_1_stage_0) | for_1_for_for_acc_itm_5_1 | (~ (fsm_output[3]))))
        ) begin
      exit_for_1_for_sva_2 <= ~ for_1_for_acc_1_itm_5_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      for_1_stage_0 <= 1'b0;
    end
    else if ( run_wen & (((~(for_1_for_acc_1_itm_5_1 | (~ for_1_stage_0) | for_1_acc_1_itm_5_1
        | for_1_for_for_acc_itm_5_1)) & (~(((for_1_for_acc_1_itm_5_1 | for_1_acc_1_itm_5_1)
        & for_1_stage_0 & (fsm_output[2])) | (fsm_output[0]) | (fsm_output[4]))))
        | for_1_stage_0_mx0c0 | ((~(for_1_for_acc_1_itm_5_1 | for_1_acc_1_itm_5_1))
        & for_1_stage_0 & (fsm_output[2]))) ) begin
      for_1_stage_0 <= for_1_stage_0_mx0c0;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      for_1_i_6_0_sva <= 7'b0000000;
    end
    else if ( run_wen & (for_1_i_mux_nl | or_tmp_16) ) begin
      for_1_i_6_0_sva <= MUX_v_7_2_2(7'b0000000, or_44_nl, nor_9_nl);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      for_1_for_for_slc_for_1_for_for_acc_5_svs_st_1 <= 1'b0;
      for_1_for_for_1_for_and_itm_1 <= 16'b0000000000000000;
    end
    else if ( for_1_for_for_and_cse ) begin
      for_1_for_for_slc_for_1_for_for_acc_5_svs_st_1 <= for_1_for_for_acc_itm_5_1;
      for_1_for_for_1_for_and_itm_1 <= MUX_v_16_2_2(16'b0000000000000000, add_inst_run_out_1,
          and_67_nl);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      for_1_for_for_k_6_0_lpi_2 <= 7'b0000000;
    end
    else if ( run_wen & or_12_cse & for_1_stage_0 ) begin
      for_1_for_for_k_6_0_lpi_2 <= MUX_v_7_2_2((signext_7_1(~ for_1_for_acc_1_itm_5_1)),
          for_1_for_for_k_6_0_sva_2, for_1_for_for_acc_itm_5_1);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      for_1_for_acc_4_itm_1 <= 12'b000000000000;
      for_1_for_j_slc_for_1_for_j_6_0_1_0_itm_1 <= 2'b00;
    end
    else if ( for_1_for_and_1_cse ) begin
      for_1_for_acc_4_itm_1 <= c_chan_rsci_wadr_d_run_13_2_mx0w0;
      for_1_for_j_slc_for_1_for_j_6_0_1_0_itm_1 <= for_1_for_j_6_0_sva[1:0];
    end
  end
  assign for_for_for_for_or_nl = (~ for_1_acc_1_itm_5_1) | for_1_for_acc_1_itm_5_1;
  assign for_i_nand_nl = ~(for_for_j_6_0_sva_2 & (signext_7_1(for_for_for_for_or_nl))
      & ({{6{for_1_stage_0}}, for_1_stage_0}));
  assign for_1_for_j_mux_nl = MUX_v_7_2_2(for_for_j_6_0_sva_2, for_1_for_j_6_0_sva,
      for_1_for_for_acc_itm_5_1);
  assign for_i_nand_1_nl = ~(MUX_v_7_2_2(7'b0000000, for_1_for_j_mux_nl, lfst_exit_for_1_for_sva_dfm_1));
  assign for_i_mux_nl = MUX_v_7_2_2(for_i_nand_nl, for_i_nand_1_nl, fsm_output[3]);
  assign nor_10_nl = ~((fsm_output[3]) | ((~ or_tmp_16) & for_1_i_6_0_sva_mx1c1));
  assign or_44_nl = MUX_v_7_2_2(for_i_6_0_sva_2, 7'b1111111, nor_10_nl);
  assign nor_9_nl = ~(or_tmp_16 | (~(for_1_i_6_0_sva_mx1c1 | (fsm_output[3]))));
  assign for_1_i_or_nl = (~ for_1_stage_0) | for_1_i_6_0_sva_mx1c1;
  assign for_1_i_mux_nl = MUX_s_1_2_2(for_1_i_or_nl, (~ or_12_cse), fsm_output[3]);
  assign and_67_nl = (for_1_for_for_slc_for_1_for_for_acc_5_svs_st_1 | exit_for_1_for_sva_2)
      & lfst_exit_for_1_for_sva;

  function automatic  MUX_s_1_2_2;
    input  input_0;
    input  input_1;
    input  sel;
    reg  result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input  sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction


  function automatic [15:0] MUX_v_16_2_2;
    input [15:0] input_0;
    input [15:0] input_1;
    input  sel;
    reg [15:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_16_2_2 = result;
  end
  endfunction


  function automatic [1:0] MUX_v_2_2_2;
    input [1:0] input_0;
    input [1:0] input_1;
    input  sel;
    reg [1:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_2_2_2 = result;
  end
  endfunction


  function automatic [6:0] MUX_v_7_2_2;
    input [6:0] input_0;
    input [6:0] input_1;
    input  sel;
    reg [6:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_7_2_2 = result;
  end
  endfunction


  function automatic [0:0] readslicef_6_1_5;
    input [5:0] vector;
    reg [5:0] tmp;
  begin
    tmp = vector >> 5;
    readslicef_6_1_5 = tmp[0:0];
  end
  endfunction


  function automatic [6:0] signext_7_1;
    input  vector;
  begin
    signext_7_1= {{6{vector}}, vector};
  end
  endfunction


  function automatic [11:0] conv_s2u_11_12 ;
    input [10:0]  vector ;
  begin
    conv_s2u_11_12 = {vector[10], vector};
  end
  endfunction


  function automatic [6:0] conv_u2s_4_7 ;
    input [3:0]  vector ;
  begin
    conv_u2s_4_7 = {{3{1'b0}}, vector};
  end
  endfunction


  function automatic [5:0] conv_u2s_5_6 ;
    input [4:0]  vector ;
  begin
    conv_u2s_5_6 =  {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    MatMult_struct
// ------------------------------------------------------------------


module MatMult_struct (
  clk, arst_n, a_chan_rsc_radr, a_chan_rsc_re, a_chan_rsc_q, a_chan_rsc_req_vz, a_chan_rsc_rls_lz,
      b_chan_rsc_radr, b_chan_rsc_re, b_chan_rsc_q, b_chan_rsc_req_vz, b_chan_rsc_rls_lz,
      c_chan_rsc_wadr, c_chan_rsc_d, c_chan_rsc_we, c_chan_rsc_req_vz, c_chan_rsc_rls_lz
);
  input clk;
  input arst_n;
  output [13:0] a_chan_rsc_radr;
  output a_chan_rsc_re;
  input [15:0] a_chan_rsc_q;
  input a_chan_rsc_req_vz;
  output a_chan_rsc_rls_lz;
  output [13:0] b_chan_rsc_radr;
  output b_chan_rsc_re;
  input [15:0] b_chan_rsc_q;
  input b_chan_rsc_req_vz;
  output b_chan_rsc_rls_lz;
  output [13:0] c_chan_rsc_wadr;
  output [15:0] c_chan_rsc_d;
  output c_chan_rsc_we;
  input c_chan_rsc_req_vz;
  output c_chan_rsc_rls_lz;


  // Interconnect Declarations
  wire [13:0] a_chan_rsci_radr_d;
  wire [15:0] a_chan_rsci_q_d;
  wire [13:0] b_chan_rsci_radr_d;
  wire [15:0] b_chan_rsci_q_d;
  wire [13:0] c_chan_rsci_wadr_d;
  wire [15:0] c_chan_rsci_d_d;
  wire a_chan_rsci_re_d_iff;
  wire b_chan_rsci_re_d_iff;
  wire c_chan_rsci_we_d_iff;


  // Interconnect Declarations for Component Instantiations 
  MatMult_ccs_sample_mem_ccs_ram_sync_1R1W_rport_7_16_14_10000_10000_16_5_gen a_chan_rsci
      (
      .q(a_chan_rsc_q),
      .re(a_chan_rsc_re),
      .radr(a_chan_rsc_radr),
      .radr_d(a_chan_rsci_radr_d),
      .re_d(a_chan_rsci_re_d_iff),
      .q_d(a_chan_rsci_q_d),
      .port_0_r_ram_ir_internal_RMASK_B_d(a_chan_rsci_re_d_iff)
    );
  MatMult_ccs_sample_mem_ccs_ram_sync_1R1W_rport_8_16_14_10000_10000_16_5_gen b_chan_rsci
      (
      .q(b_chan_rsc_q),
      .re(b_chan_rsc_re),
      .radr(b_chan_rsc_radr),
      .radr_d(b_chan_rsci_radr_d),
      .re_d(b_chan_rsci_re_d_iff),
      .q_d(b_chan_rsci_q_d),
      .port_0_r_ram_ir_internal_RMASK_B_d(b_chan_rsci_re_d_iff)
    );
  MatMult_ccs_sample_mem_ccs_ram_sync_1R1W_wport_9_16_14_10000_10000_16_5_gen c_chan_rsci
      (
      .we(c_chan_rsc_we),
      .d(c_chan_rsc_d),
      .wadr(c_chan_rsc_wadr),
      .wadr_d(c_chan_rsci_wadr_d),
      .d_d(c_chan_rsci_d_d),
      .we_d(c_chan_rsci_we_d_iff),
      .port_1_w_ram_ir_internal_WMASK_B_d(c_chan_rsci_we_d_iff)
    );
  MatMult_run MatMult_run_inst (
      .clk(clk),
      .arst_n(arst_n),
      .a_chan_rsc_req_vz(a_chan_rsc_req_vz),
      .a_chan_rsc_rls_lz(a_chan_rsc_rls_lz),
      .b_chan_rsc_req_vz(b_chan_rsc_req_vz),
      .b_chan_rsc_rls_lz(b_chan_rsc_rls_lz),
      .c_chan_rsc_req_vz(c_chan_rsc_req_vz),
      .c_chan_rsc_rls_lz(c_chan_rsc_rls_lz),
      .a_chan_rsci_radr_d(a_chan_rsci_radr_d),
      .a_chan_rsci_q_d(a_chan_rsci_q_d),
      .b_chan_rsci_radr_d(b_chan_rsci_radr_d),
      .b_chan_rsci_q_d(b_chan_rsci_q_d),
      .c_chan_rsci_wadr_d(c_chan_rsci_wadr_d),
      .c_chan_rsci_d_d(c_chan_rsci_d_d),
      .a_chan_rsci_re_d_pff(a_chan_rsci_re_d_iff),
      .b_chan_rsci_re_d_pff(b_chan_rsci_re_d_iff),
      .c_chan_rsci_we_d_pff(c_chan_rsci_we_d_iff)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    MatMult
// ------------------------------------------------------------------


module MatMult (
  clk, arst_n, a_chan_rsc_radr, a_chan_rsc_re, a_chan_rsc_q, a_chan_rsc_req_vz, a_chan_rsc_rls_lz,
      b_chan_rsc_radr, b_chan_rsc_re, b_chan_rsc_q, b_chan_rsc_req_vz, b_chan_rsc_rls_lz,
      c_chan_rsc_wadr, c_chan_rsc_d, c_chan_rsc_we, c_chan_rsc_req_vz, c_chan_rsc_rls_lz
);
  input clk;
  input arst_n;
  output [13:0] a_chan_rsc_radr;
  output a_chan_rsc_re;
  input [15:0] a_chan_rsc_q;
  input a_chan_rsc_req_vz;
  output a_chan_rsc_rls_lz;
  output [13:0] b_chan_rsc_radr;
  output b_chan_rsc_re;
  input [15:0] b_chan_rsc_q;
  input b_chan_rsc_req_vz;
  output b_chan_rsc_rls_lz;
  output [13:0] c_chan_rsc_wadr;
  output [15:0] c_chan_rsc_d;
  output c_chan_rsc_we;
  input c_chan_rsc_req_vz;
  output c_chan_rsc_rls_lz;



  // Interconnect Declarations for Component Instantiations 
  MatMult_struct MatMult_struct_inst (
      .clk(clk),
      .arst_n(arst_n),
      .a_chan_rsc_radr(a_chan_rsc_radr),
      .a_chan_rsc_re(a_chan_rsc_re),
      .a_chan_rsc_q(a_chan_rsc_q),
      .a_chan_rsc_req_vz(a_chan_rsc_req_vz),
      .a_chan_rsc_rls_lz(a_chan_rsc_rls_lz),
      .b_chan_rsc_radr(b_chan_rsc_radr),
      .b_chan_rsc_re(b_chan_rsc_re),
      .b_chan_rsc_q(b_chan_rsc_q),
      .b_chan_rsc_req_vz(b_chan_rsc_req_vz),
      .b_chan_rsc_rls_lz(b_chan_rsc_rls_lz),
      .c_chan_rsc_wadr(c_chan_rsc_wadr),
      .c_chan_rsc_d(c_chan_rsc_d),
      .c_chan_rsc_we(c_chan_rsc_we),
      .c_chan_rsc_req_vz(c_chan_rsc_req_vz),
      .c_chan_rsc_rls_lz(c_chan_rsc_rls_lz)
    );
endmodule



