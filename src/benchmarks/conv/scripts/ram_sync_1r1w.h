#ifndef __INCLUDED_ram_sync_1r1w_H__
#define __INCLUDED_ram_sync_1r1w_H__

// SystemC memory model of ram_sync_1r1w
// Generated by Catapult memory generator
// Generated by:   pmcewen
// Generated date: Mon Feb 24 13:46:39 2025

// The following classes have been defined:
//     class ram_sync_1r1w a 0 delay "structural" model of the RAM

//     class ram_sync_1r1w_model<TLM/SYN>::mem<T,size,TLM/SYN>
//         A memory model that can be instanced and used for simulation and synthesis

//     class ram_sync_1r1w_model<TLM/SYN>::port_0_port<T,size,TLM/SYN>
//         a model of an external port with read capability

//     class ram_sync_1r1w_model<TLM/SYN>::port_1_port<T,size,TLM/SYN>
//         a model of an external port with write capability

#include <ccs_types.h>
#ifndef NO_ASSERTS
#include <assert.h>
#endif

#pragma map_to_operator ram_sync_1r1w
template <
  int ram_id,
  int DATA_WIDTH,
  int ADDR_WIDTH,
  int DEPTH>
class ram_sync_1r1w : public sc_module
{
public:
  sc_in< bool >   clk;
  sc_in< bool >   wen;
  sc_in< sc_lv<ADDR_WIDTH> >   wadr;
  sc_in< sc_lv<DATA_WIDTH> >   wdata;
  sc_in< bool >   ren;
  sc_in< sc_lv<ADDR_WIDTH> >   radr;
  sc_out< sc_lv<DATA_WIDTH> >   rdata;

#if !defined(__SYNTHESIS__)
  sc_signal<sc_lv<DATA_WIDTH> > mem[DEPTH];
#endif

  SC_CTOR(ram_sync_1r1w) :
    clk("clk")
    ,wen("wen")
    ,wadr("wadr")
    ,wdata("wdata")
    ,ren("ren")
    ,radr("radr")
    ,rdata("rdata")
  {
    SC_METHOD(seq_proc_1);
    dont_initialize();
    sensitive << clk.pos();
  }

  void seq_proc_1() {
#if !defined(__SYNTHESIS__)
    int address;
    // write X
    if ((wen==1)) {
      vector_to_type( wadr.read(), false, &address );
#if !defined(NO_ASSERTS) && !defined(__SYNTHESIS__)
      assert( address>=0 && address <DEPTH );
#endif
      mem[address] = wdata.read();
    }

    // read
    if ( (ren==1) ) {
      vector_to_type( radr.read(), false, &address );
#if !defined(NO_ASSERTS) && !defined(__SYNTHESIS__)
      assert( address>=0 && address <DEPTH );
#endif
      rdata.write( mem[address] );
    }
    else rdata.write( sc_lv< DATA_WIDTH>() );

    // write
    if ((wen==1)) {
      vector_to_type( wadr.read(), false, &address );
#if !defined(NO_ASSERTS) && !defined(__SYNTHESIS__)
      assert( address>=0 && address <DEPTH );
#endif
      mem[address] = wdata.read();
    }

#endif
  }

#if !defined(__SYNTHESIS__)
  // NOTE: this method is intended for use by testbenches only. It is not synthesizable!
  sc_lv< DATA_WIDTH> tb_read( int address ) const {
#ifndef NO_ASSERTS
    assert( address>=0 && address < DEPTH);
#endif
    return mem[address];
  }

  // NOTE: this method is intended for use by testbenches only. It is not synthesizable!
  void tb_write( int address, sc_lv<DATA_WIDTH> data ) {
#ifndef NO_ASSERTS
    assert( address>=0 && address < DEPTH);
#endif
    mem[address] = data;
  }

#endif
};

template <abstraction_t source_abstraction = AUTO>
class ram_sync_1r1w_model {
public:
#if defined(__SYNTHESIS__)
  template <class T, unsigned int size, abstraction_t impl_abstraction = SYN> class mem{};
private:
  template <class T, unsigned int size, abstraction_t impl_abstraction = SYN> class port_0_local;
  template <class T, unsigned int size, abstraction_t impl_abstraction = SYN> class port_1_local;
public:
  template <class T, unsigned int size, abstraction_t impl_abstraction = SYN> class port_0_port;
  template <class T, unsigned int size, abstraction_t impl_abstraction = SYN> class port_1_port;

#elif defined (CCS_DUT_CYCLE) || defined (CCS_DUT_RTL)
  template <class T, unsigned int size, abstraction_t impl_abstraction = (source_abstraction==AUTO) ? SYN : source_abstraction>
      class mem{};
private:
  template <class T, unsigned int size, abstraction_t impl_abstraction = (source_abstraction==AUTO) ? SYN : source_abstraction>
      class port_0_local;
  template <class T, unsigned int size, abstraction_t impl_abstraction = (source_abstraction==AUTO) ? SYN : source_abstraction>
      class port_1_local;
public:
  template <class T, unsigned int size, abstraction_t impl_abstraction = (source_abstraction==AUTO) ? SYN : source_abstraction>
      class port_0_port;
  template <class T, unsigned int size, abstraction_t impl_abstraction = (source_abstraction==AUTO) ? SYN : source_abstraction>
      class port_1_port;

#else
  template <class T, unsigned int size, abstraction_t impl_abstraction = (source_abstraction==AUTO) ? P2P_DEFAULT_VIEW
      : source_abstraction> class mem{};
private:
  template <class T, unsigned int size, abstraction_t impl_abstraction = (source_abstraction==AUTO) ? P2P_DEFAULT_VIEW
      : source_abstraction> class port_0_local;
  template <class T, unsigned int size, abstraction_t impl_abstraction = (source_abstraction==AUTO) ? P2P_DEFAULT_VIEW
      : source_abstraction> class port_1_local;
public:
  template <class T, unsigned int size, abstraction_t impl_abstraction = (source_abstraction==AUTO) ? P2P_DEFAULT_VIEW
      : source_abstraction> class port_0_port;
  template <class T, unsigned int size, abstraction_t impl_abstraction = (source_abstraction==AUTO) ? P2P_DEFAULT_VIEW
      : source_abstraction> class port_1_port;

#endif

  // ***********************************************
  // TLM TLM TLM TLM TLM TLM TLM TLM TLM TLM TLM TLM
  //    This code is only for TLM simulation only
  // ***********************************************

  template <class T, unsigned int size>
  class mem <T,size,TLM>
  {
    enum {
      addr_width = nbits<size-1>::val,
      signedtype = mc_typedef_T_traits<T>::issigned,
      data_width = mc_typedef_T_traits<T>::bitwidth
    };
  public:
    void write (ac_int<addr_width,false> addr, T data=0) {
      port_1_port_instance.reset_chk.test();
#ifndef NO_ASSERTS
      assert( addr>=0 && addr<size );
#endif
      array[addr] = data;
    };

    T read ( ac_int<addr_width,false> addr ) {
#ifndef NO_ASSERTS
      assert( addr>=0 && addr<size );
#endif
      port_0_port_instance.reset_chk.test();
      return array[addr];
    }

    T &operator [] (int index) {
#ifndef NO_ASSERTS
      assert( index>=0 && index<size );
#endif
      return array[index];
    }

    const T &operator [] (int index) const {
#ifndef NO_ASSERTS
      assert( index>=0 && index<size );
#endif
      return array[index];
    }

    // NOTE: this method is intended for use by testbenches only. It is not synthesizable!
    T tb_read( int address ) const {
#ifndef NO_ASSERTS
      assert( address>=0 && address <size );
#endif
      return array[address];
    }

    // NOTE: this method is intended for use by testbenches only. It is not synthesizable!
    void tb_write( int address, T data ) {
#ifndef NO_ASSERTS
      assert( address>=0 && address <size );
#endif
      array[address] = data;
    }

  public:
    mem(const char* name)
      : port_0_port_instance(*this, ccs_concat(name,"port_0"))
      , port_1_port_instance(*this, ccs_concat(name,"port_1"))
      {}

    void reset_read() {
      port_0_port_instance.reset();
    }

    void reset_write() {
      port_1_port_instance.reset();
    }

    void clk(sc_in<bool> &clk_arg) {
      port_0_port_instance.clock_ok();
      port_1_port_instance.clock_ok();
    }
    void clk(sc_signal<bool> &clk_arg) {
      port_0_port_instance.clock_ok();
      port_1_port_instance.clock_ok();
    }

    port_0_local<T,size,TLM> port_0_port_instance;
    port_1_local<T,size,TLM> port_1_port_instance;
  private:
    T array[size];
    friend class port_0_local<T,size,TLM>;
    friend class port_1_local<T,size,TLM>;
  };

private:
  template <class T, unsigned int size>
  class port_0_local<T,size,TLM>
  {
    enum {
      addr_width = nbits<size-1>::val,
      signedtype = mc_typedef_T_traits<T>::issigned,
      data_width = mc_typedef_T_traits<T>::bitwidth
    };
    p2p_checker reset_chk;
    p2p_checker clock_chk;
    void clock_ok() {clock_chk.ok();}

  public:
    port_0_local (mem<T,size,TLM> &my_parent, const char *name)
      : reset_chk( name, "call reset()", "access this memory")
      , clock_chk( name, "bind the clock port", "access this memory")
      , parent(my_parent)
      {}

    void reset() {reset_chk.ok();}

    const T &operator [] (int index) const {
      reset_chk.test();
      clock_chk.test();
#ifndef NO_ASSERTS
      assert( index>=0 && index<size );
#endif
      return parent.array[index];
    }

    T read ( ac_int<addr_width,false> addr ) {
      reset_chk.test();
      clock_chk.test();
#ifndef NO_ASSERTS
      assert( addr>=0 && addr<size );
#endif
      return parent.read(addr);
    }

  private:
    mem<T,size,TLM> &parent;
    friend class mem<T,size,TLM>;
  };

  template <class T, unsigned int size>
  class port_1_local<T,size,TLM>
  {
    enum {
      addr_width = nbits<size-1>::val,
      signedtype = mc_typedef_T_traits<T>::issigned,
      data_width = mc_typedef_T_traits<T>::bitwidth
    };
    p2p_checker reset_chk;
    p2p_checker clock_chk;
    void clock_ok() {clock_chk.ok();}

  public:
    port_1_local (mem<T,size,TLM> &my_parent, const char *name)
      : reset_chk( name, "call reset()", "access this memory")
      , clock_chk( name, "bind the clock port", "access this memory")
      , parent(my_parent)
      {}

    void reset() {reset_chk.ok();}

    T &operator [] (int index) {
      reset_chk.test();
      clock_chk.test();
      return parent.array[index];
    }

    const T &operator [] (int index) const {
      reset_chk.test();
      clock_chk.test();
#ifndef NO_ASSERTS
      assert( index>=0 && index<size );
#endif
      return parent.array[index];
    }

    void write (ac_int<addr_width,false> addr, T data=0) {
      reset_chk.test();
      clock_chk.test();
#ifndef NO_ASSERTS
      assert( addr>=0 && addr<size );
#endif
      parent.array[addr] = data;
    };

  private:
    mem<T,size,TLM> &parent;
    friend class mem<T,size,TLM>;
  };

public:
  template <class T, unsigned int size>
  class port_0_port<T,size,TLM>
  {
    enum {
      addr_width = nbits<size-1>::val,
      signedtype = mc_typedef_T_traits<T>::issigned,
      data_width = mc_typedef_T_traits<T>::bitwidth
    };
    p2p_checker reset_chk;

  public:
    port_0_port(const char *name)
      : reset_chk(name, "call reset()", "access this port")
      , chan_ptr(0)
      , port_ptr(0)
      {}

    T read(unsigned int addr) {
      reset_chk.test();
      if ( bound_to_port )
        return port_ptr->read(addr);
      else
        return chan_ptr->read(addr);
    }

    const T &operator [] (int index) {
      reset_chk.test();
      return (bound_to_port? (*port_ptr)[index] : (*chan_ptr)[index]);
    }

    void reset() {reset_chk.ok();}

    void operator() (port_0_local<T,size,TLM> &c) {
      chan_ptr = &c;
      c.reset(); // Supress reset error on bound memory
      bound_to_port = false;
    }

    void operator() (port_0_port<T,size,TLM> &c) {
      port_ptr = &c;
      c.reset(); // Supress reset error on bound port
      bound_to_port = true;
    }

    void operator() (mem<T,size,TLM> &m) {
      chan_ptr = &m.port_0_port_instance;
      chan_ptr->reset(); // Supress reset error on bound memory
      bound_to_port = false;
    }

  private:
    bool bound_to_port;
    port_0_local<T,size,TLM> *chan_ptr;
    port_0_port<T,size,TLM> *port_ptr;
  };

  template <class T, unsigned int size>
  class port_1_port<T,size,TLM>
  {
    enum {
      addr_width = nbits<size-1>::val,
      signedtype = mc_typedef_T_traits<T>::issigned,
      data_width = mc_typedef_T_traits<T>::bitwidth
    };
    p2p_checker reset_chk;

  public:
    port_1_port(const char *name)
      : reset_chk(name, "call reset()", "access this port")
      , chan_ptr(0)
      , port_ptr(0)
      {}

    void write(unsigned int addr, T data ) {
      reset_chk.test();
      if ( bound_to_port )
        port_ptr->write(addr,data);
      else
        chan_ptr->write(addr,data);
    }

    T &operator [] (int index) {
      reset_chk.test();
      return (bound_to_port? (*port_ptr)[index] : (*chan_ptr)[index]);
    }

    void reset() {reset_chk.ok();}

    void operator() (port_1_local<T,size,TLM> &c) {
      chan_ptr = &c;
      c.reset(); // Supress reset error on bound memory
      bound_to_port = false;
    }

    void operator() (port_1_port<T,size,TLM> &c) {
      port_ptr = &c;
      c.reset(); // Supress reset error on bound port
      bound_to_port = true;
    }

    void operator() (mem<T,size,TLM> &m) {
      chan_ptr = &m.port_1_port_instance;
      chan_ptr->reset(); // Supress reset error on bound memory
      bound_to_port = false;
    }

  private:
    bool bound_to_port;
    port_1_local<T,size,TLM> *chan_ptr;
    port_1_port<T,size,TLM> *port_ptr;
  };

  // ***********************************************
  // SYN SYN SYN SYN SYN SYN SYN SYN SYN SYN SYN SYN
  // Synthesis code
  // ***********************************************

private:
  template <class T, unsigned int size>
  class port_0_local<T,size,SYN>
  {
    enum {
      addr_width = nbits<size-1>::val,
      signedtype = mc_typedef_T_traits<T>::issigned,
      data_width = mc_typedef_T_traits<T>::bitwidth
    };
    p2p_checker reset_chk;
    p2p_checker clock_chk;
    class mem_ref
    {
    public:
      mem_ref( port_0_local<T,size,SYN> &my_parent, ac_int<addr_width,false> addr)
      : address(addr), parent(my_parent) {}

      operator T() const { return parent.read(address); }

      inline mem_ref operator = ( const mem_ref &val ) { return operator = ((T)val); }

    private:
      ac_int<addr_width,false> address;
      port_0_local<T,size,SYN> &parent;
    };

    void clock_ok() {clock_chk.ok();}

  public:
    port_0_local( const char *name)
      : reset_chk( name, "call reset()", "access this memory")
      , clock_chk( name, "bind the clock port", "access this memory")
      , ren(ccs_concat(name,"ren"))
      , radr(ccs_concat(name,"radr"))
      , rdata(ccs_concat(name,"rdata"))
      {}

    #pragma remove_out_reg
    #pragma design modulario
    T read (ac_int<addr_width,false> addr) {
      reset_chk.test();
      clock_chk.test();
      sc_lv<addr_width> temp_addr;
      type_to_vector(addr, (signedtype?true:false), temp_addr);
      ren.write(1);
      radr.write( temp_addr );
      #pragma unroll
      for (int lcnt=0; lcnt<1; lcnt++) wait();
#if defined(CALYPTO_SC)
      wait(); // Account for unreg outputs for SLEC
#elif !defined(__SYNTHESIS__)
      wait(0.3, SC_NS);  // Account for unreg outputs in simulation
#endif
      ren.write(0);
#if !defined(CALYPTO_SC)
      // Return outputs to don't care to save area
      sc_lv<data_width> dc;
      radr.write( dc );
#endif
      T return_data;
      vector_to_type(rdata.read(), (signedtype?true:false), &return_data);
      return return_data;
    }

    mem_ref operator [] (int index) {
      mem_ref write_ref(*this, index);
      return write_ref;
    }

    void reset() {
      ren.write(0);
      radr.write(sc_dt::Log_0);
      reset_chk.ok();
    }

    sc_signal< bool > ren;
    sc_signal< sc_lv<addr_width> > radr;
    sc_signal< sc_lv<data_width> > rdata;
  private:
    friend class mem<T,size,SYN>;
  };

  template <class T, unsigned int size>
  class port_1_local<T,size,SYN>
  {
    enum {
      addr_width = nbits<size-1>::val,
      signedtype = mc_typedef_T_traits<T>::issigned,
      data_width = mc_typedef_T_traits<T>::bitwidth
    };
    p2p_checker reset_chk;
    p2p_checker clock_chk;
    class mem_ref
    {
    public:
      mem_ref( port_1_local<T,size,SYN> &my_parent, ac_int<addr_width,false> addr)
      : address(addr), parent(my_parent) {}

      inline mem_ref operator = ( T val ) {
        parent.write(address,val);
        return *this;
      }

      inline mem_ref operator = ( const mem_ref &val ) { return operator = ((T)val); }

    private:
      ac_int<addr_width,false> address;
      port_1_local<T,size,SYN> &parent;
    };

    void clock_ok() {clock_chk.ok();}

  public:
    port_1_local( const char *name)
      : reset_chk( name, "call reset()", "access this memory")
      , clock_chk( name, "bind the clock port", "access this memory")
      , wen(ccs_concat(name,"wen"))
      , wadr(ccs_concat(name,"wadr"))
      , wdata(ccs_concat(name,"wdata"))
      {}

    #pragma remove_out_reg
    #pragma design modulario
    void write (ac_int<addr_width,false> addr, T data=0) {
      reset_chk.test();
      clock_chk.test();
      sc_lv<data_width> temp_data;
      type_to_vector(data, (signedtype?true:false), temp_data);
      sc_lv<addr_width> temp_addr;
      type_to_vector(addr, (signedtype?true:false), temp_addr);
      wen.write(1);
      wadr.write( temp_addr );
      wdata.write( temp_data );
      #pragma unroll
      for (int lcnt=0; lcnt<1; lcnt++) wait();
#if defined(CALYPTO_SC)
      wait(); // Account for unreg outputs for SLEC
#elif !defined(__SYNTHESIS__)
      wait(0.3, SC_NS);  // Account for unreg outputs in simulation
#endif
      wen.write(0);
#if !defined(CALYPTO_SC)
      // Return outputs to don't care to save area
      sc_lv<data_width> dc;
      wdata.write( dc );
      wadr.write( dc );
#endif
    }

    mem_ref operator [] (int index) {
      mem_ref write_ref(*this, index);
      return write_ref;
    }

    void reset() {
      wen.write(0);
      wadr.write(sc_dt::Log_0);
      wdata.write(sc_dt::Log_0);
      reset_chk.ok();
    }

    sc_signal< bool > wen;
    sc_signal< sc_lv<addr_width> > wadr;
    sc_signal< sc_lv<data_width> > wdata;
  private:
    friend class mem<T,size,SYN>;
  };

public:
  template <class T, unsigned int size>
  class mem <T,size,SYN>
  {
    enum {
      addr_width = nbits<size-1>::val,
      signedtype = mc_typedef_T_traits<T>::issigned,
      data_width = mc_typedef_T_traits<T>::bitwidth
    };
    class mem_ref
    {
    public:
      mem_ref( mem<T,size,SYN> &my_parent, ac_int<addr_width,false> addr)
      : address(addr), parent(my_parent) {}

      operator T() const { return parent.read(address); }

      inline mem_ref operator = ( T val ) {
        parent.write(address,val);
        return *this;
      }

      inline mem_ref operator = ( const mem_ref &val ) { return operator = ((T)val); }

    private:
      ac_int<addr_width,false> address;
      mem<T,size,SYN> &parent;
    };

  public:
    mem ( const char *name)
      : RAM(ccs_concat(name, "RAM"))
      , port_0_port_instance(ccs_concat(name,"port_0"))
      , port_1_port_instance(ccs_concat(name,"port_1"))
    {
      RAM.ren(port_0_port_instance.ren);
      RAM.radr(port_0_port_instance.radr);
      RAM.rdata(port_0_port_instance.rdata);
      RAM.wen(port_1_port_instance.wen);
      RAM.wadr(port_1_port_instance.wadr);
      RAM.wdata(port_1_port_instance.wdata);
    }

    port_0_local<T,size,SYN> port_0_port_instance;
    port_1_local<T,size,SYN> port_1_port_instance;

    void clk(sc_in<bool> &clk_arg) {
      RAM.clk(clk_arg);
      port_0_port_instance.clock_ok();
      port_1_port_instance.clock_ok();
    }
    void clk(sc_signal<bool> &clk_arg) {
      RAM.clk(clk_arg);
      port_0_port_instance.clock_ok();
      port_1_port_instance.clock_ok();
    }


    T read ( ac_int<addr_width,false> addr ) {
      return port_0_port_instance.read( addr );
    }

    void write (ac_int<addr_width,false> addr, T data=0) {
      port_1_port_instance.write( addr, data );
    }

    mem_ref operator [] (int index) {
      mem_ref write_ref(*this, index);
      return write_ref;
    }

    void reset_read() {
      port_0_port_instance.reset();
    }

    void reset_write() {
      port_1_port_instance.reset();
    }

    // NOTE: this method is intended for use by testbenches only. It is not synthesizable!
    T tb_read(int address) const {
#ifndef NO_ASSERTS
      assert( address>=0 && address<size );
#endif
      T return_data;
      vector_to_type( RAM.tb_read(address) , (signedtype?true:false), &return_data);
      return return_data;
    }

    // NOTE: this method is intended for use by testbenches only. It is not synthesizable!
    void tb_write( int address, T val) {
#ifndef NO_ASSERTS
      assert( address>=0 && address<size );
#endif
      sc_lv<data_width> temp_data;
      type_to_vector(val, (signedtype?true:false), temp_data);
      RAM.tb_write(address, temp_data);
    }

  private:
    ram_sync_1r1w<0, data_width, addr_width, size> RAM;
  };

  template <class T, unsigned int size>
  class port_0_port<T,size,SYN>
  {
    enum {
      addr_width = nbits<size-1>::val,
      signedtype = mc_typedef_T_traits<T>::issigned,
      data_width = mc_typedef_T_traits<T>::bitwidth
    };
    p2p_checker reset_chk;

    class mem_ref
    {
    public:
      mem_ref( port_0_port<T,size,SYN> &my_parent, ac_int<addr_width,false> addr)
      : address(addr), parent(my_parent) {}

      operator T() const { return parent.read(address); }

      inline mem_ref operator = ( const mem_ref &val ) { return operator = ((T)val); }

    private:
      ac_int<addr_width,false> address;
      port_0_port<T,size,SYN> &parent;
    };

  public:
    port_0_port( const char *name)
      : reset_chk( name, "call reset()", "access this memory")
      , ren(ccs_concat(name,"ren"))
      , radr(ccs_concat(name,"radr"))
      , rdata(ccs_concat(name,"rdata"))
      {}

    #pragma remove_out_reg
    #pragma design modulario
    T read (ac_int<addr_width,false> addr) {
      reset_chk.test();
      sc_lv<addr_width> temp_addr;
      type_to_vector(addr, (signedtype?true:false), temp_addr);
      ren.write(1);
      radr.write( temp_addr );
      #pragma unroll
      for (int lcnt=0; lcnt<1; lcnt++) wait();
#if defined(CALYPTO_SC)
      wait(); // Account for unreg outputs for SLEC
#elif !defined(__SYNTHESIS__)
      wait(0.3, SC_NS);  // Account for unreg outputs in simulation
#endif
      ren.write(0);
#if !defined(CALYPTO_SC)
      // Return outputs to don't care to save area
      sc_lv<data_width> dc;
      radr.write( dc );
#endif
      T return_data;
      vector_to_type(rdata.read(), (signedtype?true:false), &return_data);
      return return_data;
    }

    void reset() {
      ren.write(0);
      radr.write(sc_dt::Log_0);
      reset_chk.ok();
    }

    sc_out< bool > ren;
    sc_out< sc_lv<addr_width> > radr;
    sc_in< sc_lv<data_width> > rdata;

    mem_ref operator [] (int index) {
      mem_ref write_ref(*this, index);
      return write_ref;
    }

    template <class C> void bind( C &c ) {
      ren(c.ren);
      radr(c.radr);
      rdata(c.rdata);
    }

    template <class C> void operator() (C& c) {
      bind(c);
    }

    void operator() (mem<T,size,SYN> &m) {
      ren(m.port_0_port_instance.ren);
      radr(m.port_0_port_instance.radr);
      rdata(m.port_0_port_instance.rdata);
    }

  };


  template <class T, unsigned int size>
  class port_1_port<T,size,SYN>
  {
    enum {
      addr_width = nbits<size-1>::val,
      signedtype = mc_typedef_T_traits<T>::issigned,
      data_width = mc_typedef_T_traits<T>::bitwidth
    };
    p2p_checker reset_chk;

    class mem_ref
    {
    public:
      mem_ref( port_1_port<T,size,SYN> &my_parent, ac_int<addr_width,false> addr)
      : address(addr), parent(my_parent) {}

      inline mem_ref operator = ( T val ) {
        parent.write(address,val);
        return *this;
      }

      inline mem_ref operator = ( const mem_ref &val ) { return operator = ((T)val); }

    private:
      ac_int<addr_width,false> address;
      port_1_port<T,size,SYN> &parent;
    };

  public:
    port_1_port( const char *name)
      : reset_chk( name, "call reset()", "access this memory")
      , wen(ccs_concat(name,"wen"))
      , wadr(ccs_concat(name,"wadr"))
      , wdata(ccs_concat(name,"wdata"))
      {}

    #pragma remove_out_reg
    #pragma design modulario
    void write (ac_int<addr_width,false> addr, T data=0) {
      reset_chk.test();
      sc_lv<data_width> temp_data;
      type_to_vector(data, (signedtype?true:false), temp_data);
      sc_lv<addr_width> temp_addr;
      type_to_vector(addr, (signedtype?true:false), temp_addr);
      wen.write(1);
      wadr.write( temp_addr );
      wdata.write( temp_data );
      #pragma unroll
      for (int lcnt=0; lcnt<1; lcnt++) wait();
#if defined(CALYPTO_SC)
      wait(); // Account for unreg outputs for SLEC
#elif !defined(__SYNTHESIS__)
      wait(0.3, SC_NS);  // Account for unreg outputs in simulation
#endif
      wen.write(0);
#if !defined(CALYPTO_SC)
      // Return outputs to don't care to save area
      sc_lv<data_width> dc;
      wdata.write( dc );
      wadr.write( dc );
#endif
    }

    void reset() {
      wen.write(0);
      wadr.write(sc_dt::Log_0);
      wdata.write(sc_dt::Log_0);
      reset_chk.ok();
    }

    sc_out< bool > wen;
    sc_out< sc_lv<addr_width> > wadr;
    sc_out< sc_lv<data_width> > wdata;

    mem_ref operator [] (int index) {
      mem_ref write_ref(*this, index);
      return write_ref;
    }

    template <class C> void bind( C &c ) {
      wen(c.wen);
      wadr(c.wadr);
      wdata(c.wdata);
    }

    template <class C> void operator() (C& c) {
      bind(c);
    }

    void operator() (mem<T,size,SYN> &m) {
      wen(m.port_1_port_instance.wen);
      wadr(m.port_1_port_instance.wadr);
      wdata(m.port_1_port_instance.wdata);
    }

  };

};
#endif // ifndef __INCLUDED_ram_sync_1r1w_H__


