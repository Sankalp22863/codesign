digraph {
	651 [label="source code:
filt = np.random.rand(1, len(filt[0]), len(filt[0][0]))
byPass = np.copy(img)
byPass = conv_layer(byPass, filt, 1, 3, 2)
byPass = BN_layer(byPass, 1, weights, biases)
img = conv_layer(img, filt, 1, 3, 1)
img = BN_layer(img, 1, weights, biases)
img = reLU(img)
img = conv_layer(img, filt, 1, 3, 2)
img += byPass
img = reLU(img)
byPass = np.copy(img)
img = conv_layer(img, filt, 1, 3, 1)
img = BN_layer(img, 1, weights, biases)
img = reLU(img)
img = conv_layer(img, filt, 1, 3, 1)
img = BN_layer(img, 1, weights, biases)
img += byPass
img = reLU(img)
filt = np.random.rand(1, len(filt[0]), len(filt[0][0]))
byPass = np.copy(img)
byPass = conv_layer(byPass, filt, 1, 3, 2)
byPass = BN_layer(byPass, 1, weights, biases)
img = conv_layer(img, filt, 1, 3, 1)
img = BN_layer(img, 1, weights, biases)
img = reLU(img)
img = conv_layer(img, filt, 1, 3, 2)
img += byPass
img = reLU(img)
byPass = np.copy(img)
img = conv_layer(img, filt, 1, 3, 1)
img = BN_layer(img, 1, weights, biases)
img = reLU(img)
img = conv_layer(img, filt, 1, 3, 1)
img = BN_layer(img, 1, weights, biases)
img += byPass
img = reLU(img)
filt = np.random.rand(1, len(filt[0]), len(filt[0][0]))
byPass = np.copy(img)
byPass = conv_layer(byPass, filt, 1, 3, 2)
byPass = BN_layer(byPass, 1, weights, biases)
img = conv_layer(img, filt, 1, 3, 1)
img = BN_layer(img, 1, weights, biases)
img = reLU(img)
img = conv_layer(img, filt, 1, 3, 2)
img += byPass
img = reLU(img)
byPass = np.copy(img)
img = conv_layer(img, filt, 1, 3, 1)
img = BN_layer(img, 1, weights, biases)
img = reLU(img)
img = conv_layer(img, filt, 1, 3, 1)
img = BN_layer(img, 1, weights, biases)
img += byPass
img = reLU(img)
img = avg_pool(img, len(img[0]), len(img[0][0]), 3, 1)
flat = flatten_layer(img)
weights = np.random.rand(len(img) * len(img[0]) * len(img[0][0]), 7)
w_0 = np.random.rand(7)
flat = fc_layer(flat, weights, w_0)
final = softmax(flat)
return 0
"]
	652 [label="np.random.rand(1, len(filt[0]), len(filt[0][0]))
"]
	653 [label=1
]
	653 -> 652
	654 [label="len(filt[0])
"]
	655 [label="filt
Read"]
	656 [label="filt[0]
Read"]
	655 -> 656
	656 -> 654
	654 -> 652
	657 [label="len(filt[0][0])
"]
	658 [label="filt
Read"]
	659 [label="filt[0]
Read"]
	658 -> 659
	660 [label="filt[0][0]
Read"]
	659 -> 660
	660 -> 657
	657 -> 652
	661 [label="filt
Write"]
	652 -> 661
	662 [label="np.copy(img)
"]
	663 [label="img
Read"]
	663 -> 662
	664 [label="byPass
Write"]
	662 -> 664
	665 [label="conv_layer(byPass, filt, 1, 3, 2)
"]
	666 [label="byPass
Read"]
	666 -> 665
	667 [label="filt
Read"]
	667 -> 665
	668 [label=1
]
	668 -> 665
	669 [label=3
]
	669 -> 665
	670 [label=2
]
	670 -> 665
	671 [label="byPass
Write"]
	665 -> 671
	672 [label="BN_layer(byPass, 1, weights, biases)
"]
	673 [label="byPass
Read"]
	673 -> 672
	674 [label=1
]
	674 -> 672
	675 [label="weights
Read"]
	675 -> 672
	676 [label="biases
Read"]
	676 -> 672
	677 [label="byPass
Write"]
	672 -> 677
	678 [label="conv_layer(img, filt, 1, 3, 1)
"]
	679 [label="img
Read"]
	679 -> 678
	680 [label="filt
Read"]
	680 -> 678
	681 [label=1
]
	681 -> 678
	682 [label=3
]
	682 -> 678
	683 [label=1
]
	683 -> 678
	684 [label="img
Write"]
	678 -> 684
	685 [label="BN_layer(img, 1, weights, biases)
"]
	686 [label="img
Read"]
	686 -> 685
	687 [label=1
]
	687 -> 685
	688 [label="weights
Read"]
	688 -> 685
	689 [label="biases
Read"]
	689 -> 685
	690 [label="img
Write"]
	685 -> 690
	691 [label="reLU(img)
"]
	692 [label="img
Read"]
	692 -> 691
	693 [label="img
Write"]
	691 -> 693
	694 [label="conv_layer(img, filt, 1, 3, 2)
"]
	695 [label="img
Read"]
	695 -> 694
	696 [label="filt
Read"]
	696 -> 694
	697 [label=1
]
	697 -> 694
	698 [label=3
]
	698 -> 694
	699 [label=2
]
	699 -> 694
	700 [label="img
Write"]
	694 -> 700
	701 [label="byPass
Read"]
	702 [label="img
Read"]
	703 [label="+
"]
	701 -> 703
	702 -> 703
	704 [label="img
Write"]
	703 -> 704
	705 [label="reLU(img)
"]
	706 [label="img
Read"]
	706 -> 705
	707 [label="img
Write"]
	705 -> 707
	708 [label="np.copy(img)
"]
	709 [label="img
Read"]
	709 -> 708
	710 [label="byPass
Write"]
	708 -> 710
	711 [label="conv_layer(img, filt, 1, 3, 1)
"]
	712 [label="img
Read"]
	712 -> 711
	713 [label="filt
Read"]
	713 -> 711
	714 [label=1
]
	714 -> 711
	715 [label=3
]
	715 -> 711
	716 [label=1
]
	716 -> 711
	717 [label="img
Write"]
	711 -> 717
	718 [label="BN_layer(img, 1, weights, biases)
"]
	719 [label="img
Read"]
	719 -> 718
	720 [label=1
]
	720 -> 718
	721 [label="weights
Read"]
	721 -> 718
	722 [label="biases
Read"]
	722 -> 718
	723 [label="img
Write"]
	718 -> 723
	724 [label="reLU(img)
"]
	725 [label="img
Read"]
	725 -> 724
	726 [label="img
Write"]
	724 -> 726
	727 [label="conv_layer(img, filt, 1, 3, 1)
"]
	728 [label="img
Read"]
	728 -> 727
	729 [label="filt
Read"]
	729 -> 727
	730 [label=1
]
	730 -> 727
	731 [label=3
]
	731 -> 727
	732 [label=1
]
	732 -> 727
	733 [label="img
Write"]
	727 -> 733
	734 [label="BN_layer(img, 1, weights, biases)
"]
	735 [label="img
Read"]
	735 -> 734
	736 [label=1
]
	736 -> 734
	737 [label="weights
Read"]
	737 -> 734
	738 [label="biases
Read"]
	738 -> 734
	739 [label="img
Write"]
	734 -> 739
	740 [label="byPass
Read"]
	741 [label="img
Read"]
	742 [label="+
"]
	740 -> 742
	741 -> 742
	743 [label="img
Write"]
	742 -> 743
	744 [label="reLU(img)
"]
	745 [label="img
Read"]
	745 -> 744
	746 [label="img
Write"]
	744 -> 746
	747 [label="np.random.rand(1, len(filt[0]), len(filt[0][0]))
"]
	748 [label=1
]
	748 -> 747
	749 [label="len(filt[0])
"]
	750 [label="filt
Read"]
	751 [label="filt[0]
Read"]
	750 -> 751
	751 -> 749
	749 -> 747
	752 [label="len(filt[0][0])
"]
	753 [label="filt
Read"]
	754 [label="filt[0]
Read"]
	753 -> 754
	755 [label="filt[0][0]
Read"]
	754 -> 755
	755 -> 752
	752 -> 747
	756 [label="filt
Write"]
	747 -> 756
	757 [label="np.copy(img)
"]
	758 [label="img
Read"]
	758 -> 757
	759 [label="byPass
Write"]
	757 -> 759
	760 [label="conv_layer(byPass, filt, 1, 3, 2)
"]
	761 [label="byPass
Read"]
	761 -> 760
	762 [label="filt
Read"]
	762 -> 760
	763 [label=1
]
	763 -> 760
	764 [label=3
]
	764 -> 760
	765 [label=2
]
	765 -> 760
	766 [label="byPass
Write"]
	760 -> 766
	767 [label="BN_layer(byPass, 1, weights, biases)
"]
	768 [label="byPass
Read"]
	768 -> 767
	769 [label=1
]
	769 -> 767
	770 [label="weights
Read"]
	770 -> 767
	771 [label="biases
Read"]
	771 -> 767
	772 [label="byPass
Write"]
	767 -> 772
	773 [label="conv_layer(img, filt, 1, 3, 1)
"]
	774 [label="img
Read"]
	774 -> 773
	775 [label="filt
Read"]
	775 -> 773
	776 [label=1
]
	776 -> 773
	777 [label=3
]
	777 -> 773
	778 [label=1
]
	778 -> 773
	779 [label="img
Write"]
	773 -> 779
	780 [label="BN_layer(img, 1, weights, biases)
"]
	781 [label="img
Read"]
	781 -> 780
	782 [label=1
]
	782 -> 780
	783 [label="weights
Read"]
	783 -> 780
	784 [label="biases
Read"]
	784 -> 780
	785 [label="img
Write"]
	780 -> 785
	786 [label="reLU(img)
"]
	787 [label="img
Read"]
	787 -> 786
	788 [label="img
Write"]
	786 -> 788
	789 [label="conv_layer(img, filt, 1, 3, 2)
"]
	790 [label="img
Read"]
	790 -> 789
	791 [label="filt
Read"]
	791 -> 789
	792 [label=1
]
	792 -> 789
	793 [label=3
]
	793 -> 789
	794 [label=2
]
	794 -> 789
	795 [label="img
Write"]
	789 -> 795
	796 [label="byPass
Read"]
	797 [label="img
Read"]
	798 [label="+
"]
	796 -> 798
	797 -> 798
	799 [label="img
Write"]
	798 -> 799
	800 [label="reLU(img)
"]
	801 [label="img
Read"]
	801 -> 800
	802 [label="img
Write"]
	800 -> 802
	803 [label="np.copy(img)
"]
	804 [label="img
Read"]
	804 -> 803
	805 [label="byPass
Write"]
	803 -> 805
	806 [label="conv_layer(img, filt, 1, 3, 1)
"]
	807 [label="img
Read"]
	807 -> 806
	808 [label="filt
Read"]
	808 -> 806
	809 [label=1
]
	809 -> 806
	810 [label=3
]
	810 -> 806
	811 [label=1
]
	811 -> 806
	812 [label="img
Write"]
	806 -> 812
	813 [label="BN_layer(img, 1, weights, biases)
"]
	814 [label="img
Read"]
	814 -> 813
	815 [label=1
]
	815 -> 813
	816 [label="weights
Read"]
	816 -> 813
	817 [label="biases
Read"]
	817 -> 813
	818 [label="img
Write"]
	813 -> 818
	819 [label="reLU(img)
"]
	820 [label="img
Read"]
	820 -> 819
	821 [label="img
Write"]
	819 -> 821
	822 [label="conv_layer(img, filt, 1, 3, 1)
"]
	823 [label="img
Read"]
	823 -> 822
	824 [label="filt
Read"]
	824 -> 822
	825 [label=1
]
	825 -> 822
	826 [label=3
]
	826 -> 822
	827 [label=1
]
	827 -> 822
	828 [label="img
Write"]
	822 -> 828
	829 [label="BN_layer(img, 1, weights, biases)
"]
	830 [label="img
Read"]
	830 -> 829
	831 [label=1
]
	831 -> 829
	832 [label="weights
Read"]
	832 -> 829
	833 [label="biases
Read"]
	833 -> 829
	834 [label="img
Write"]
	829 -> 834
	835 [label="byPass
Read"]
	836 [label="img
Read"]
	837 [label="+
"]
	835 -> 837
	836 -> 837
	838 [label="img
Write"]
	837 -> 838
	839 [label="reLU(img)
"]
	840 [label="img
Read"]
	840 -> 839
	841 [label="img
Write"]
	839 -> 841
	842 [label="np.random.rand(1, len(filt[0]), len(filt[0][0]))
"]
	843 [label=1
]
	843 -> 842
	844 [label="len(filt[0])
"]
	845 [label="filt
Read"]
	846 [label="filt[0]
Read"]
	845 -> 846
	846 -> 844
	844 -> 842
	847 [label="len(filt[0][0])
"]
	848 [label="filt
Read"]
	849 [label="filt[0]
Read"]
	848 -> 849
	850 [label="filt[0][0]
Read"]
	849 -> 850
	850 -> 847
	847 -> 842
	851 [label="filt
Write"]
	842 -> 851
	852 [label="np.copy(img)
"]
	853 [label="img
Read"]
	853 -> 852
	854 [label="byPass
Write"]
	852 -> 854
	855 [label="conv_layer(byPass, filt, 1, 3, 2)
"]
	856 [label="byPass
Read"]
	856 -> 855
	857 [label="filt
Read"]
	857 -> 855
	858 [label=1
]
	858 -> 855
	859 [label=3
]
	859 -> 855
	860 [label=2
]
	860 -> 855
	861 [label="byPass
Write"]
	855 -> 861
	862 [label="BN_layer(byPass, 1, weights, biases)
"]
	863 [label="byPass
Read"]
	863 -> 862
	864 [label=1
]
	864 -> 862
	865 [label="weights
Read"]
	865 -> 862
	866 [label="biases
Read"]
	866 -> 862
	867 [label="byPass
Write"]
	862 -> 867
	868 [label="conv_layer(img, filt, 1, 3, 1)
"]
	869 [label="img
Read"]
	869 -> 868
	870 [label="filt
Read"]
	870 -> 868
	871 [label=1
]
	871 -> 868
	872 [label=3
]
	872 -> 868
	873 [label=1
]
	873 -> 868
	874 [label="img
Write"]
	868 -> 874
	875 [label="BN_layer(img, 1, weights, biases)
"]
	876 [label="img
Read"]
	876 -> 875
	877 [label=1
]
	877 -> 875
	878 [label="weights
Read"]
	878 -> 875
	879 [label="biases
Read"]
	879 -> 875
	880 [label="img
Write"]
	875 -> 880
	881 [label="reLU(img)
"]
	882 [label="img
Read"]
	882 -> 881
	883 [label="img
Write"]
	881 -> 883
	884 [label="conv_layer(img, filt, 1, 3, 2)
"]
	885 [label="img
Read"]
	885 -> 884
	886 [label="filt
Read"]
	886 -> 884
	887 [label=1
]
	887 -> 884
	888 [label=3
]
	888 -> 884
	889 [label=2
]
	889 -> 884
	890 [label="img
Write"]
	884 -> 890
	891 [label="byPass
Read"]
	892 [label="img
Read"]
	893 [label="+
"]
	891 -> 893
	892 -> 893
	894 [label="img
Write"]
	893 -> 894
	895 [label="reLU(img)
"]
	896 [label="img
Read"]
	896 -> 895
	897 [label="img
Write"]
	895 -> 897
	898 [label="np.copy(img)
"]
	899 [label="img
Read"]
	899 -> 898
	900 [label="byPass
Write"]
	898 -> 900
	901 [label="conv_layer(img, filt, 1, 3, 1)
"]
	902 [label="img
Read"]
	902 -> 901
	903 [label="filt
Read"]
	903 -> 901
	904 [label=1
]
	904 -> 901
	905 [label=3
]
	905 -> 901
	906 [label=1
]
	906 -> 901
	907 [label="img
Write"]
	901 -> 907
	908 [label="BN_layer(img, 1, weights, biases)
"]
	909 [label="img
Read"]
	909 -> 908
	910 [label=1
]
	910 -> 908
	911 [label="weights
Read"]
	911 -> 908
	912 [label="biases
Read"]
	912 -> 908
	913 [label="img
Write"]
	908 -> 913
	914 [label="reLU(img)
"]
	915 [label="img
Read"]
	915 -> 914
	916 [label="img
Write"]
	914 -> 916
	917 [label="conv_layer(img, filt, 1, 3, 1)
"]
	918 [label="img
Read"]
	918 -> 917
	919 [label="filt
Read"]
	919 -> 917
	920 [label=1
]
	920 -> 917
	921 [label=3
]
	921 -> 917
	922 [label=1
]
	922 -> 917
	923 [label="img
Write"]
	917 -> 923
	924 [label="BN_layer(img, 1, weights, biases)
"]
	925 [label="img
Read"]
	925 -> 924
	926 [label=1
]
	926 -> 924
	927 [label="weights
Read"]
	927 -> 924
	928 [label="biases
Read"]
	928 -> 924
	929 [label="img
Write"]
	924 -> 929
	930 [label="byPass
Read"]
	931 [label="img
Read"]
	932 [label="+
"]
	930 -> 932
	931 -> 932
	933 [label="img
Write"]
	932 -> 933
	934 [label="reLU(img)
"]
	935 [label="img
Read"]
	935 -> 934
	936 [label="img
Write"]
	934 -> 936
	937 [label="avg_pool(img, len(img[0]), len(img[0][0]), 3, 1)
"]
	938 [label="img
Read"]
	938 -> 937
	939 [label="len(img[0])
"]
	940 [label="img
Read"]
	941 [label="img[0]
Read"]
	940 -> 941
	941 -> 939
	939 -> 937
	942 [label="len(img[0][0])
"]
	943 [label="img
Read"]
	944 [label="img[0]
Read"]
	943 -> 944
	945 [label="img[0][0]
Read"]
	944 -> 945
	945 -> 942
	942 -> 937
	946 [label=3
]
	946 -> 937
	947 [label=1
]
	947 -> 937
	948 [label="img
Write"]
	937 -> 948
	949 [label="flatten_layer(img)
"]
	950 [label="img
Read"]
	950 -> 949
	951 [label="flat
Write"]
	949 -> 951
	952 [label="np.random.rand(len(img) * len(img[0]) * len(img[0][0]), 7)
"]
	953 [label="len(img)
"]
	954 [label="img
Read"]
	954 -> 953
	955 [label="len(img[0])
"]
	956 [label="img
Read"]
	957 [label="img[0]
Read"]
	956 -> 957
	957 -> 955
	958 [label="*
"]
	953 -> 958
	955 -> 958
	959 [label="len(img[0][0])
"]
	960 [label="img
Read"]
	961 [label="img[0]
Read"]
	960 -> 961
	962 [label="img[0][0]
Read"]
	961 -> 962
	962 -> 959
	963 [label="*
"]
	958 -> 963
	959 -> 963
	963 -> 952
	964 [label=7
]
	964 -> 952
	965 [label="weights
Write"]
	952 -> 965
	966 [label="np.random.rand(7)
"]
	967 [label=7
]
	967 -> 966
	968 [label="w_0
Write"]
	966 -> 968
	969 [label="fc_layer(flat, weights, w_0)
"]
	970 [label="flat
Read"]
	970 -> 969
	971 [label="weights
Read"]
	971 -> 969
	972 [label="w_0
Read"]
	972 -> 969
	973 [label="flat
Write"]
	969 -> 973
	974 [label="softmax(flat)
"]
	975 [label="flat
Read"]
	975 -> 974
	976 [label="final
Write"]
	974 -> 976
}
