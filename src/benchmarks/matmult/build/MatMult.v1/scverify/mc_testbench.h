// ----------------------------------------------------------------------------
// SystemC Testbench Header
//
//    HLS version: 10.4b/841621 Production Release
//       HLS date: Thu Oct 24 17:20:07 PDT 2019
//  Flow Packages: HDL_Tcl 8.0a, SCVerify 10.4
//
//   Generated by: pmcewen@rsgvm14.stanford.edu
// Generated date: Thu Feb 20 16:28:18 PST 2025
//
// ----------------------------------------------------------------------------
#ifdef CCS_SCVERIFY

// 
// -------------------------------------
// mc_testbench
// SCVerify mc_testbench SC_MODULE
// -------------------------------------
// 
#ifndef INCLUDED_MC_TESTBENCH_H
#define INCLUDED_MC_TESTBENCH_H


#ifndef SC_USE_STD_STRING
#define SC_USE_STD_STRING
#endif

#include "../../src/matmult.cpp"
#include "ccs_testbench.h"
#include <systemc.h>
#include <tlm.h>
#include <ac_int.h>
#include <ac_channel.h>
#include <mc_container_types.h>
#include <mc_typeconv.h>
#include <mc_transactors.h>
#include <mc_comparator.h>
#include <mc_end_of_testbench.h>
#include <vector>


class mc_testbench : public sc_module
{
public:
   // Interface Ports
   sc_in< bool > clk;
   sc_port< tlm::tlm_fifo_put_if< mgc_sysc_ver_array1D<ac_int<16, true >,25> > > ccs_a_chan_value_value;
   sc_port< tlm::tlm_fifo_put_if< mc_wait_ctrl > > ccs_wait_ctrl_a_chan_value_value;
   sc_port< tlm::tlm_fifo_put_if< int > > ccs_sizecount_a_chan_value_value;
   sc_port< tlm::tlm_fifo_put_if< mgc_sysc_ver_array1D<ac_int<16, true >,25> > > ccs_b_chan_value_value;
   sc_port< tlm::tlm_fifo_put_if< mc_wait_ctrl > > ccs_wait_ctrl_b_chan_value_value;
   sc_port< tlm::tlm_fifo_put_if< int > > ccs_sizecount_b_chan_value_value;
   sc_port< tlm::tlm_fifo_get_if< mgc_sysc_ver_array1D<ac_int<16, true >,25> > > ccs_c_chan_value_value;
   sc_port< tlm::tlm_fifo_put_if< mc_wait_ctrl > > ccs_wait_ctrl_c_chan_value_value;
   sc_in< bool > design_is_idle;
   sc_out< sc_logic > enable_stalls;
   sc_in< unsigned short > stall_coverage;
   
   // Data objects
   bool testbench_ended;
   int main_exit_code;
   bool atleast_one_active_input;
   sc_time last_event_time;
   sc_time last_event_time2;
   sc_signal< bool >                          cpp_testbench_active;
   sc_event testbench_end_event;
   sc_event reset_request_event;
   bool _checked_results;
   bool _failed;
   static mc_testbench* that;
   unsigned int remaining_ccs_a_chan_value_value;
   bool _capture_a_chan_value_value;
   int a_chan_value_value_capture_count;
   int a_chan_value_value_iteration_count;
   unsigned int remaining_ccs_b_chan_value_value;
   bool _capture_b_chan_value_value;
   int b_chan_value_value_capture_count;
   int b_chan_value_value_iteration_count;
   unsigned int remaining_c_chan_value_value_golden;
   tlm::tlm_fifo< mc_golden_info< mgc_sysc_ver_array1D<ac_int<16, true >,25>, ac_int<16, true > > > c_chan_value_value_golden;
   bool _capture_c_chan_value_value;
   int c_chan_value_value_capture_count;
   int c_chan_value_value_iteration_count;
   int wait_cnt;
   
   // Named Objects
   
   // Module instance pointers
   mc_comparator< mgc_sysc_ver_array1D<ac_int<16, true >,25> , ac_int<16, true > > *c_chan_value_value_comp;
   
   // Declare processes (SC_METHOD and SC_THREAD)
   void wait_for_end();
   void run();
   
   // Constructor
   SC_HAS_PROCESS(mc_testbench);
   mc_testbench(
      const sc_module_name& name
   )
      : clk("clk")
      , ccs_a_chan_value_value("ccs_a_chan_value_value")
      , ccs_wait_ctrl_a_chan_value_value("ccs_wait_ctrl_a_chan_value_value")
      , ccs_sizecount_a_chan_value_value("ccs_sizecount_a_chan_value_value")
      , ccs_b_chan_value_value("ccs_b_chan_value_value")
      , ccs_wait_ctrl_b_chan_value_value("ccs_wait_ctrl_b_chan_value_value")
      , ccs_sizecount_b_chan_value_value("ccs_sizecount_b_chan_value_value")
      , ccs_c_chan_value_value("ccs_c_chan_value_value")
      , ccs_wait_ctrl_c_chan_value_value("ccs_wait_ctrl_c_chan_value_value")
      , design_is_idle("design_is_idle")
      , enable_stalls("enable_stalls")
      , stall_coverage("stall_coverage")
      , cpp_testbench_active("cpp_testbench_active")
      , remaining_ccs_a_chan_value_value(0)
      , remaining_ccs_b_chan_value_value(0)
      , remaining_c_chan_value_value_golden(0)
      , c_chan_value_value_golden("c_chan_value_value_golden",-1)
   {
      // Instantiate other modules
      c_chan_value_value_comp = new mc_comparator< mgc_sysc_ver_array1D<ac_int<16, true >,25> , ac_int<16, true > > (
         "c_chan_value_value_comp",
         "c_chan_value_value",
         1,
         0,
         1
      );
      c_chan_value_value_comp->data_in(ccs_c_chan_value_value);
      c_chan_value_value_comp->data_golden(c_chan_value_value_golden);
      
      
      // Register processes
      SC_METHOD(wait_for_end);
      sensitive << clk.pos() << testbench_end_event;
      SC_THREAD(run);
      // Other constructor statements
      set_stack_size(64000000);
      _checked_results = false;
      that = this;
      testbench_ended = false;
      main_exit_code = 0;
      atleast_one_active_input = true;
      _failed = false;
      _capture_a_chan_value_value = true;
      _capture_b_chan_value_value = true;
      _capture_c_chan_value_value = true;
      wait_cnt = 0;
   }
   
   ~mc_testbench()
   {
      delete c_chan_value_value_comp;
      c_chan_value_value_comp = 0;
   }
   
   // C++ class functions
   public:
      static void wait_for_idle_sync() ;
   public:
      static void set_enable_stalls(bool flag) ;
   public:
      void reset_request() ;
   public:
      void capture_a_chan( ac_channel<PackedInt2D<16UL, 5UL, 5UL > > &a_chan) ;
   public:
      void capture_b_chan( ac_channel<PackedInt2D<16UL, 5UL, 5UL > > &b_chan) ;
   public:
      void capture_c_chan( ac_channel<PackedInt2D<16UL, 5UL, 5UL > > &c_chan) ;
   protected:
      void wait_on_input_required() ;
   public:
      static void capture_IN( ac_channel<PackedInt2D<16UL, 5UL, 5UL > > &a_chan,  ac_channel<PackedInt2D<16UL, 5UL, 5UL > > &b_chan,  ac_channel<PackedInt2D<16UL, 5UL, 5UL > > &c_chan) ;
   public:
      static void capture_OUT( ac_channel<PackedInt2D<16UL, 5UL, 5UL > > &a_chan,  ac_channel<PackedInt2D<16UL, 5UL, 5UL > > &b_chan,  ac_channel<PackedInt2D<16UL, 5UL, 5UL > > &c_chan) ;
   public:
      static void exec_run( ac_channel<PackedInt2D<16UL, 5UL, 5UL > > &a_chan,  ac_channel<PackedInt2D<16UL, 5UL, 5UL > > &b_chan,  ac_channel<PackedInt2D<16UL, 5UL, 5UL > > &c_chan) ;
   protected:
      void start_of_simulation() ;
   protected:
      void end_of_simulation() ;
   public:
      void check_results() ;
   public:
      bool failed() ;
   public:
      void set_failed(bool fail) ;
};
#endif
#endif //CCS_SCVERIFY
