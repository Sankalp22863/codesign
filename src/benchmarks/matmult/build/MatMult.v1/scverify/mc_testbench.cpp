// ----------------------------------------------------------------------------
// SystemC Testbench Body
//
//    HLS version: 10.4b/841621 Production Release
//       HLS date: Thu Oct 24 17:20:07 PDT 2019
//  Flow Packages: HDL_Tcl 8.0a, SCVerify 10.4
//
//   Generated by: pmcewen@rsgvm14.stanford.edu
// Generated date: Thu Feb 20 16:28:18 PST 2025
//
// ----------------------------------------------------------------------------
// 
// -------------------------------------
// mc_testbench
// SCVerify mc_testbench SC_MODULE
// -------------------------------------
// 
#include "mc_testbench.h"
#include <mc_testbench_util.h>
#include <mc_simulator_extensions.h>

mc_testbench* mc_testbench::that;
bool testbench::enable_idle_sync_mode;
unsigned short testbench::idle_sync_stable_cycles;
void testbench::set_enable_stalls(bool flag) { mc_testbench::set_enable_stalls(flag); }
void testbench::reset_request() { mc_testbench::that->reset_request(); }
void mc_testbench_reset_request() { mc_testbench::that->reset_request(); }
bool testbench::a_chan_value_value_ignore;
void mc_testbench_a_chan_value_value_skip(bool v) { testbench::a_chan_value_value_skip = v; }
bool testbench::a_chan_value_value_skip;
bool testbench::a_chan_value_value_skip_quiet;
bool testbench::a_chan_value_value_skip_once;
bool testbench::a_chan_value_value_skip_noerr;
int  testbench::a_chan_value_value_array_comp_first;
int  testbench::a_chan_value_value_array_comp_last;
mc_wait_ctrl testbench::a_chan_value_value_wait_ctrl;
bool testbench::b_chan_value_value_ignore;
void mc_testbench_b_chan_value_value_skip(bool v) { testbench::b_chan_value_value_skip = v; }
bool testbench::b_chan_value_value_skip;
bool testbench::b_chan_value_value_skip_quiet;
bool testbench::b_chan_value_value_skip_once;
bool testbench::b_chan_value_value_skip_noerr;
int  testbench::b_chan_value_value_array_comp_first;
int  testbench::b_chan_value_value_array_comp_last;
mc_wait_ctrl testbench::b_chan_value_value_wait_ctrl;
bool testbench::c_chan_value_value_ignore;
void mc_testbench_c_chan_value_value_skip(bool v) { testbench::c_chan_value_value_skip = v; }
bool testbench::c_chan_value_value_skip;
bool testbench::c_chan_value_value_skip_quiet;
bool testbench::c_chan_value_value_skip_once;
bool testbench::c_chan_value_value_skip_noerr;
int  testbench::c_chan_value_value_array_comp_first;
int  testbench::c_chan_value_value_array_comp_last;
bool testbench::c_chan_value_value_use_mask;
ac_int<16, true > testbench::c_chan_value_value_output_mask;
mc_wait_ctrl testbench::c_chan_value_value_wait_ctrl;
#ifndef CCS_SCVERIFY_USE_CCS_BLOCK
void testbench::exec_run( ac_channel<PackedInt2D<16UL, 5UL, 5UL > > &a_chan,  ac_channel<PackedInt2D<16UL, 5UL, 5UL > > &b_chan,  ac_channel<PackedInt2D<16UL, 5UL, 5UL > > &c_chan) {
   return mc_testbench::exec_run(a_chan, b_chan, c_chan);
}
#endif

// ============================================
// Function: wait_for_idle_sync
// --------------------------------------------

void mc_testbench::wait_for_idle_sync()
{
   if (testbench::enable_idle_sync_mode) {
      std::cout << "mc_testbench STOPPING   @ " << sc_time_stamp() << std::endl;
      that->cpp_testbench_active.write(false);
      while (that->design_is_idle.read())  that->wait(that->design_is_idle.value_changed_event());
      while (!that->design_is_idle.read()) that->wait(that->design_is_idle.value_changed_event());
      that->cpp_testbench_active.write(true);
      std::cout << "mc_testbench CONTINUING @ " << sc_time_stamp() << std::endl;
   } else {
      that->cpp_testbench_active.write(true);
   }
}
// ============================================
// Function: set_enable_stalls
// --------------------------------------------

void mc_testbench::set_enable_stalls(bool flag)
{
   if (flag) {
     std::cout << "Enabling STALL_FLAG toggling" << std::endl;
     that->enable_stalls.write(sc_dt::Log_1);
   } else {
     std::cout << "Disabling STALL_FLAG toggling" << std::endl;
     that->enable_stalls.write(sc_dt::Log_0);
   }
}
// ============================================
// Function: reset_request
// --------------------------------------------

void mc_testbench::reset_request()
{
   reset_request_event.notify(0,SC_NS);
}
// ============================================
// Function: capture_a_chan
// --------------------------------------------

void mc_testbench::capture_a_chan( ac_channel<PackedInt2D<16UL, 5UL, 5UL > > &a_chan)
{
   static mgc_sysc_ver_array1D<ac_int<16, true >,25> a_chan_value_value_tmp;
   static int last_j_a_chan_value_value_in = 0;
   if (a_chan_value_value_iteration_count == wait_cnt)
      wait_on_input_required();
   if (_capture_a_chan_value_value && !testbench::a_chan_value_value_ignore)
   {
      int cur_iter = a_chan_value_value_capture_count;
      ++a_chan_value_value_iteration_count;
      unsigned int chan_factor = 1;
      unsigned int ccs_scv_i,ccs_scv_j;
      ccs_scv_i = remaining_ccs_a_chan_value_value;
      while (ccs_scv_i < a_chan.ac_channel<PackedInt2D<16UL, 5UL, 5UL > >::debug_size()) {
         for (ccs_scv_j = last_j_a_chan_value_value_in; ccs_scv_j < chan_factor; ccs_scv_j++,ccs_scv_i++) {
            if (ccs_scv_i < a_chan.ac_channel<PackedInt2D<16UL, 5UL, 5UL > >::debug_size()) {
               int a_chan_linear_idx = 0;
               for (int a_chan_idx_0 = 0; a_chan_idx_0 < 5; ++a_chan_idx_0)
                  for (int a_chan_idx_1 = 0; a_chan_idx_1 < 5; ++a_chan_idx_1)
                     a_chan_value_value_tmp[a_chan_linear_idx++] = a_chan.ac_channel<PackedInt2D<16UL, 5UL, 5UL > >::chan[ccs_scv_i].PackedInt2D<16UL, 5UL, 5UL >::value[a_chan_idx_0].PackedInt<16UL, 5UL >::value[a_chan_idx_1];
            } else {
               break;
            }
         }
         if (ccs_scv_j == chan_factor) {
            ccs_a_chan_value_value->put(a_chan_value_value_tmp);
            last_j_a_chan_value_value_in = 0;
            a_chan_value_value_capture_count += chan_factor;
         } else {
            last_j_a_chan_value_value_in = ccs_scv_j;
         }
      }
      mc_testbench_util::process_wait_ctrl("a_chan_value_value",testbench::a_chan_value_value_wait_ctrl,ccs_wait_ctrl_a_chan_value_value.operator->(),cur_iter,a_chan_value_value_capture_count,1);
   }
   testbench::a_chan_value_value_ignore = false;
}
// ============================================
// Function: capture_b_chan
// --------------------------------------------

void mc_testbench::capture_b_chan( ac_channel<PackedInt2D<16UL, 5UL, 5UL > > &b_chan)
{
   static mgc_sysc_ver_array1D<ac_int<16, true >,25> b_chan_value_value_tmp;
   static int last_j_b_chan_value_value_in = 0;
   if (b_chan_value_value_iteration_count == wait_cnt)
      wait_on_input_required();
   if (_capture_b_chan_value_value && !testbench::b_chan_value_value_ignore)
   {
      int cur_iter = b_chan_value_value_capture_count;
      ++b_chan_value_value_iteration_count;
      unsigned int chan_factor = 1;
      unsigned int ccs_scv_i,ccs_scv_j;
      ccs_scv_i = remaining_ccs_b_chan_value_value;
      while (ccs_scv_i < b_chan.ac_channel<PackedInt2D<16UL, 5UL, 5UL > >::debug_size()) {
         for (ccs_scv_j = last_j_b_chan_value_value_in; ccs_scv_j < chan_factor; ccs_scv_j++,ccs_scv_i++) {
            if (ccs_scv_i < b_chan.ac_channel<PackedInt2D<16UL, 5UL, 5UL > >::debug_size()) {
               int b_chan_linear_idx = 0;
               for (int b_chan_idx_0 = 0; b_chan_idx_0 < 5; ++b_chan_idx_0)
                  for (int b_chan_idx_1 = 0; b_chan_idx_1 < 5; ++b_chan_idx_1)
                     b_chan_value_value_tmp[b_chan_linear_idx++] = b_chan.ac_channel<PackedInt2D<16UL, 5UL, 5UL > >::chan[ccs_scv_i].PackedInt2D<16UL, 5UL, 5UL >::value[b_chan_idx_0].PackedInt<16UL, 5UL >::value[b_chan_idx_1];
            } else {
               break;
            }
         }
         if (ccs_scv_j == chan_factor) {
            ccs_b_chan_value_value->put(b_chan_value_value_tmp);
            last_j_b_chan_value_value_in = 0;
            b_chan_value_value_capture_count += chan_factor;
         } else {
            last_j_b_chan_value_value_in = ccs_scv_j;
         }
      }
      mc_testbench_util::process_wait_ctrl("b_chan_value_value",testbench::b_chan_value_value_wait_ctrl,ccs_wait_ctrl_b_chan_value_value.operator->(),cur_iter,b_chan_value_value_capture_count,1);
   }
   testbench::b_chan_value_value_ignore = false;
}
// ============================================
// Function: capture_c_chan
// --------------------------------------------

void mc_testbench::capture_c_chan( ac_channel<PackedInt2D<16UL, 5UL, 5UL > > &c_chan)
{
   static mc_golden_info< mgc_sysc_ver_array1D<ac_int<16, true >,25>, ac_int<16, true > > c_chan_value_value_tmp(testbench::c_chan_value_value_ignore, false, c_chan_value_value_iteration_count);
   c_chan_value_value_tmp._ignore = testbench::c_chan_value_value_ignore;
   c_chan_value_value_tmp._iteration = c_chan_value_value_iteration_count;
   c_chan_value_value_tmp._data.mc_testbench_process_array_bounds("c_chan_value_value",testbench::c_chan_value_value_array_comp_first,testbench::c_chan_value_value_array_comp_last,24,0);
   // BEGIN: testbench output_mask control for field_name c_chan_value_value
   if ( testbench::c_chan_value_value_use_mask ) {
      c_chan_value_value_tmp._use_mask = true;
      c_chan_value_value_tmp._mask = testbench::c_chan_value_value_output_mask ;
   }
   // END: testbench output_mask control for field_name c_chan_value_value
   static int last_j_c_chan_value_value_out = 0;
   if (_capture_c_chan_value_value)
   {
      int cur_iter = c_chan_value_value_capture_count;
      ++c_chan_value_value_iteration_count;
      unsigned int chan_factor = 1;
      unsigned int ccs_scv_i,ccs_scv_j;
      ccs_scv_i = remaining_c_chan_value_value_golden;
      while (ccs_scv_i < c_chan.ac_channel<PackedInt2D<16UL, 5UL, 5UL > >::debug_size()) {
         for (ccs_scv_j = last_j_c_chan_value_value_out; ccs_scv_j < chan_factor; ccs_scv_j++,ccs_scv_i++) {
            if (ccs_scv_i < c_chan.ac_channel<PackedInt2D<16UL, 5UL, 5UL > >::debug_size()) {
               int c_chan_linear_idx = 0;
               for (int c_chan_idx_0 = 0; c_chan_idx_0 < 5; ++c_chan_idx_0)
                  for (int c_chan_idx_1 = 0; c_chan_idx_1 < 5; ++c_chan_idx_1)
                     c_chan_value_value_tmp._data[c_chan_linear_idx++] = c_chan.ac_channel<PackedInt2D<16UL, 5UL, 5UL > >::chan[ccs_scv_i].PackedInt2D<16UL, 5UL, 5UL >::value[c_chan_idx_0].PackedInt<16UL, 5UL >::value[c_chan_idx_1];
            } else {
               break;
            }
         }
         if (ccs_scv_j == chan_factor) {
            c_chan_value_value_golden.put(c_chan_value_value_tmp);
            last_j_c_chan_value_value_out = 0;
            c_chan_value_value_capture_count += chan_factor;
         } else {
            last_j_c_chan_value_value_out = ccs_scv_j;
         }
      }
      mc_testbench_util::process_wait_ctrl("c_chan_value_value",testbench::c_chan_value_value_wait_ctrl,ccs_wait_ctrl_c_chan_value_value.operator->(),cur_iter,c_chan_value_value_capture_count,1);
      testbench::c_chan_value_value_use_mask = false;
   }
   testbench::c_chan_value_value_ignore = false;
   testbench::c_chan_value_value_skip = false;
}
// ============================================
// Function: wait_on_input_required
// --------------------------------------------

void mc_testbench::wait_on_input_required()
{
   ++wait_cnt;
   wait(SC_ZERO_TIME); // get fifos a chance to update
   while (atleast_one_active_input) {
      if (_capture_a_chan_value_value && ccs_a_chan_value_value->used() == 0) return;
      if (_capture_b_chan_value_value && ccs_b_chan_value_value->used() == 0) return;
      that->cpp_testbench_active.write(false);
      wait(ccs_a_chan_value_value->ok_to_put() | ccs_b_chan_value_value->ok_to_put());
      that->cpp_testbench_active.write(true);
   }
}
// ============================================
// Function: capture_IN
// --------------------------------------------

void mc_testbench::capture_IN( ac_channel<PackedInt2D<16UL, 5UL, 5UL > > &a_chan,  ac_channel<PackedInt2D<16UL, 5UL, 5UL > > &b_chan,  ac_channel<PackedInt2D<16UL, 5UL, 5UL > > &c_chan)
{
   that->capture_a_chan(a_chan);
   that->capture_b_chan(b_chan);
   that->remaining_c_chan_value_value_golden =  c_chan.ac_channel<PackedInt2D<16UL, 5UL, 5UL > >::debug_size();
}
// ============================================
// Function: capture_OUT
// --------------------------------------------

void mc_testbench::capture_OUT( ac_channel<PackedInt2D<16UL, 5UL, 5UL > > &a_chan,  ac_channel<PackedInt2D<16UL, 5UL, 5UL > > &b_chan,  ac_channel<PackedInt2D<16UL, 5UL, 5UL > > &c_chan)
{
   that->remaining_ccs_a_chan_value_value =  a_chan.ac_channel<PackedInt2D<16UL, 5UL, 5UL > >::debug_size();
   if (testbench::enable_idle_sync_mode && that->remaining_ccs_a_chan_value_value != 0) {
      cout << "Warning: Testbench input channel 'a_chan' not empty. Remaining size: " << that->remaining_ccs_a_chan_value_value << endl;
   }
   that->remaining_ccs_b_chan_value_value =  b_chan.ac_channel<PackedInt2D<16UL, 5UL, 5UL > >::debug_size();
   if (testbench::enable_idle_sync_mode && that->remaining_ccs_b_chan_value_value != 0) {
      cout << "Warning: Testbench input channel 'b_chan' not empty. Remaining size: " << that->remaining_ccs_b_chan_value_value << endl;
   }
   that->capture_c_chan(c_chan);
}
// ============================================
// Function: exec_run
// --------------------------------------------

void mc_testbench::exec_run( ac_channel<PackedInt2D<16UL, 5UL, 5UL > > &a_chan,  ac_channel<PackedInt2D<16UL, 5UL, 5UL > > &b_chan,  ac_channel<PackedInt2D<16UL, 5UL, 5UL > > &c_chan)
{
   #ifndef CCS_SCVERIFY_USE_CCS_BLOCK
   that->cpp_testbench_active.write(true);
   capture_IN(a_chan, b_chan, c_chan);
   MatMult::run(a_chan, b_chan, c_chan);
   // throttle ac_channel based on number of calls to chan::size() or chan::empty() or chan::nb_read() (but not chan::available()) 
   if (1) {
      int cnt=0;
      if (cnt) std::cout << "mc_testbench.cpp: CONTINUES @ " << sc_time_stamp() << std::endl;
      if (cnt) that->cpp_testbench_active.write(true);
   }
   capture_OUT(a_chan, b_chan, c_chan);
   #else
   #endif
}
// ============================================
// Function: start_of_simulation
// --------------------------------------------

void mc_testbench::start_of_simulation()
{
   set_enable_stalls(false);
}
// ============================================
// Function: end_of_simulation
// --------------------------------------------

void mc_testbench::end_of_simulation()
{
   if (!_checked_results) {
      SC_REPORT_INFO(name(), "Simulation ran into deadlock");
      check_results();
   }
}
// ============================================
// Function: check_results
// --------------------------------------------

void mc_testbench::check_results()
{
   if (_checked_results) return;
   _checked_results = true;
   cout<<endl;
   cout<<"Checking results"<<endl;
   if (main_exit_code) _failed = true;
   int _num_outputs_checked = 0;
   bool _has_capture_counts = false;
   std::ostringstream mctb_msg;
   
   if (!_capture_c_chan_value_value) {
      cout<<"'c_chan_value_value' - warning, output was optimized away"<<endl;
   } else {
      _num_outputs_checked++;
      _failed |= c_chan_value_value_comp->check_results(c_chan_value_value_capture_count,testbench::c_chan_value_value_skip_noerr);
      _has_capture_counts |= !!(c_chan_value_value_capture_count);
   }
   cout<<endl;
   if (_num_outputs_checked == 0) {
      cout<<"Error: All outputs were optimized away. No output values were compared."<<endl;
      _failed = _failed || (_num_outputs_checked == 0);
   }
   if (!_has_capture_counts) {
      cout<<"Error: Nothing to compare, all output capture counts are zero."<<endl;
      _failed = true;
   }
   if (main_exit_code) cout << "Error: C++ Testbench 'main()' returned a non-zero exit code ("<<main_exit_code<<"). Check your testbench." <<endl;
   mctb_msg.clear();
   if (_failed) mctb_msg << "Simulation FAILED";
   else         mctb_msg << "Simulation PASSED";
   mctb_msg << " @ " << sc_time_stamp();
   SC_REPORT_INFO(this->name(), mctb_msg.str().c_str());
}
// ============================================
// Function: failed
// --------------------------------------------

bool mc_testbench::failed()
{
   return _failed;
}
// ============================================
// Function: set_failed
// --------------------------------------------

void mc_testbench::set_failed(bool fail)
{
   _failed = fail;
}
// ---------------------------------------------------------------
// Process: SC_METHOD wait_for_end
// Static sensitivity: sensitive << clk.pos() << testbench_end_event;

void mc_testbench::wait_for_end() {
   // If run() has not finished, we do nothing here
   if (!testbench_ended) return;
   // check for completed outputs
   if (c_chan_value_value_comp->get_compare_count() < c_chan_value_value_capture_count) {testbench_end_event.notify(1,SC_NS); return;}
   // If we made it here, all outputs have flushed. Check the results
   SC_REPORT_INFO(name(), "Simulation completed");
   check_results();
   sc_stop();
}
// ---------------------------------------------------------------
// Process: SC_THREAD run
// Static sensitivity: 

void mc_testbench::run() {
   testbench::enable_idle_sync_mode = false;
   testbench::idle_sync_stable_cycles = 1;
   testbench::a_chan_value_value_ignore = false;
   testbench::a_chan_value_value_skip = false;
   testbench::a_chan_value_value_skip_quiet = false;
   testbench::a_chan_value_value_skip_once = false;
   testbench::a_chan_value_value_skip_noerr = false;
   testbench::a_chan_value_value_array_comp_first = -1;
   testbench::a_chan_value_value_array_comp_last = -1;
   testbench::a_chan_value_value_wait_ctrl.clear();
   a_chan_value_value_capture_count = 0;
   a_chan_value_value_iteration_count = 0;
   testbench::b_chan_value_value_ignore = false;
   testbench::b_chan_value_value_skip = false;
   testbench::b_chan_value_value_skip_quiet = false;
   testbench::b_chan_value_value_skip_once = false;
   testbench::b_chan_value_value_skip_noerr = false;
   testbench::b_chan_value_value_array_comp_first = -1;
   testbench::b_chan_value_value_array_comp_last = -1;
   testbench::b_chan_value_value_wait_ctrl.clear();
   b_chan_value_value_capture_count = 0;
   b_chan_value_value_iteration_count = 0;
   testbench::c_chan_value_value_ignore = false;
   testbench::c_chan_value_value_skip = false;
   testbench::c_chan_value_value_skip_quiet = false;
   testbench::c_chan_value_value_skip_once = false;
   testbench::c_chan_value_value_skip_noerr = false;
   testbench::c_chan_value_value_array_comp_first = -1;
   testbench::c_chan_value_value_array_comp_last = -1;
   testbench::c_chan_value_value_use_mask = false;
   testbench::c_chan_value_value_output_mask = ~0;
   testbench::c_chan_value_value_wait_ctrl.clear();
   c_chan_value_value_capture_count = 0;
   c_chan_value_value_iteration_count = 0;
   testbench testbench_inst(sc_argc(), sc_argv());
   main_exit_code = testbench_inst.main();
   cout<<"Info: Execution of user-supplied C++ testbench 'main()' has completed with exit code = " << main_exit_code << endl;
   cout<<endl;
   cout<<"Info: Collecting data completed"<<endl;
   cout<<"   captured "<<a_chan_value_value_capture_count<<" values of a_chan_value_value"<<endl;
   cout<<"   captured "<<b_chan_value_value_capture_count<<" values of b_chan_value_value"<<endl;
   cout<<"   captured "<<c_chan_value_value_capture_count<<" values of c_chan_value_value"<<endl;
   testbench_ended = true;
   testbench_end_event.notify(SC_ZERO_TIME);
}
#ifdef CCS_SCVERIFY_USE_CCS_BLOCK
#include "ccs_block_macros.cpp"
#endif
