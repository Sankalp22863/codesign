// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2024.2_2/1156857 Production Release
//  HLS Date:       Tue Jan 14 16:38:07 PST 2025
// 
//  Generated by:   edubbers@ece007.ece.local.cmu.edu
//  Generated date: Thu Mar  6 16:18:28 2025
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    Jacobi2D_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_10_16_14_10000_10000_16_5_gen
// ------------------------------------------------------------------


module Jacobi2D_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_10_16_14_10000_10000_16_5_gen
    (
  we, d, wadr, q, re, radr, radr_d, wadr_d, d_d, we_d, re_d, q_d, port_0_r_ram_ir_internal_RMASK_B_d,
      port_1_w_ram_ir_internal_WMASK_B_d
);
  output we;
  output [15:0] d;
  output [13:0] wadr;
  input [15:0] q;
  output re;
  output [13:0] radr;
  input [13:0] radr_d;
  input [13:0] wadr_d;
  input [15:0] d_d;
  input we_d;
  input re_d;
  output [15:0] q_d;
  input port_0_r_ram_ir_internal_RMASK_B_d;
  input port_1_w_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign we = (port_1_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
  assign q_d = q;
  assign re = (port_0_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Jacobi2D_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_9_16_14_10000_10000_16_5_gen
// ------------------------------------------------------------------


module Jacobi2D_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_9_16_14_10000_10000_16_5_gen
    (
  we, d, wadr, q, re, radr, radr_d, wadr_d, d_d, we_d, re_d, q_d, port_0_r_ram_ir_internal_RMASK_B_d,
      port_1_w_ram_ir_internal_WMASK_B_d
);
  output we;
  output [15:0] d;
  output [13:0] wadr;
  input [15:0] q;
  output re;
  output [13:0] radr;
  input [13:0] radr_d;
  input [13:0] wadr_d;
  input [15:0] d_d;
  input we_d;
  input re_d;
  output [15:0] q_d;
  input port_0_r_ram_ir_internal_RMASK_B_d;
  input port_1_w_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign we = (port_1_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
  assign q_d = q;
  assign re = (port_0_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Jacobi2D_ccs_sample_mem_ccs_ram_sync_1R1W_rport_8_16_14_10000_10000_16_5_gen
// ------------------------------------------------------------------


module Jacobi2D_ccs_sample_mem_ccs_ram_sync_1R1W_rport_8_16_14_10000_10000_16_5_gen
    (
  q, re, radr, radr_d, re_d, q_d, port_0_r_ram_ir_internal_RMASK_B_d
);
  input [15:0] q;
  output re;
  output [13:0] radr;
  input [13:0] radr_d;
  input re_d;
  output [15:0] q_d;
  input port_0_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign re = (port_0_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Jacobi2D_ccs_sample_mem_ccs_ram_sync_1R1W_rport_7_16_14_10000_10000_16_5_gen
// ------------------------------------------------------------------


module Jacobi2D_ccs_sample_mem_ccs_ram_sync_1R1W_rport_7_16_14_10000_10000_16_5_gen
    (
  q, re, radr, radr_d, re_d, q_d, port_0_r_ram_ir_internal_RMASK_B_d
);
  input [15:0] q;
  output re;
  output [13:0] radr;
  input [13:0] radr_d;
  input re_d;
  output [15:0] q_d;
  input port_0_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign re = (port_0_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Jacobi2D_run_run_fsm
//  FSM Module
// ------------------------------------------------------------------


module Jacobi2D_run_run_fsm (
  clk, arst_n, run_wen, fsm_output, for_C_0_tr0, for_1_C_7_tr0
);
  input clk;
  input arst_n;
  input run_wen;
  output [12:0] fsm_output;
  reg [12:0] fsm_output;
  input for_C_0_tr0;
  input for_1_C_7_tr0;


  // FSM State Type Declaration for Jacobi2D_run_run_fsm_1
  parameter
    run_rlp_C_0 = 4'd0,
    main_C_0 = 4'd1,
    for_C_0 = 4'd2,
    main_C_1 = 4'd3,
    for_1_C_0 = 4'd4,
    for_1_C_1 = 4'd5,
    for_1_C_2 = 4'd6,
    for_1_C_3 = 4'd7,
    for_1_C_4 = 4'd8,
    for_1_C_5 = 4'd9,
    for_1_C_6 = 4'd10,
    for_1_C_7 = 4'd11,
    main_C_2 = 4'd12;

  reg [3:0] state_var;
  reg [3:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : Jacobi2D_run_run_fsm_1
    case (state_var)
      main_C_0 : begin
        fsm_output = 13'b0000000000010;
        state_var_NS = for_C_0;
      end
      for_C_0 : begin
        fsm_output = 13'b0000000000100;
        if ( for_C_0_tr0 ) begin
          state_var_NS = main_C_1;
        end
        else begin
          state_var_NS = for_C_0;
        end
      end
      main_C_1 : begin
        fsm_output = 13'b0000000001000;
        state_var_NS = for_1_C_0;
      end
      for_1_C_0 : begin
        fsm_output = 13'b0000000010000;
        state_var_NS = for_1_C_1;
      end
      for_1_C_1 : begin
        fsm_output = 13'b0000000100000;
        state_var_NS = for_1_C_2;
      end
      for_1_C_2 : begin
        fsm_output = 13'b0000001000000;
        state_var_NS = for_1_C_3;
      end
      for_1_C_3 : begin
        fsm_output = 13'b0000010000000;
        state_var_NS = for_1_C_4;
      end
      for_1_C_4 : begin
        fsm_output = 13'b0000100000000;
        state_var_NS = for_1_C_5;
      end
      for_1_C_5 : begin
        fsm_output = 13'b0001000000000;
        state_var_NS = for_1_C_6;
      end
      for_1_C_6 : begin
        fsm_output = 13'b0010000000000;
        state_var_NS = for_1_C_7;
      end
      for_1_C_7 : begin
        fsm_output = 13'b0100000000000;
        if ( for_1_C_7_tr0 ) begin
          state_var_NS = main_C_2;
        end
        else begin
          state_var_NS = for_1_C_0;
        end
      end
      main_C_2 : begin
        fsm_output = 13'b1000000000000;
        state_var_NS = main_C_0;
      end
      // run_rlp_C_0
      default : begin
        fsm_output = 13'b0000000000001;
        state_var_NS = main_C_0;
      end
    endcase
  end

  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      state_var <= run_rlp_C_0;
    end
    else if ( run_wen ) begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Jacobi2D_run_staller
// ------------------------------------------------------------------


module Jacobi2D_run_staller (
  clk, arst_n, run_wen, run_wten, b_out_chan_rsc_req_obj_wen_comp, a_out_chan_rsc_req_obj_wen_comp,
      b_chan_rsc_req_obj_wen_comp, a_chan_rsc_req_obj_wen_comp
);
  input clk;
  input arst_n;
  output run_wen;
  output run_wten;
  input b_out_chan_rsc_req_obj_wen_comp;
  input a_out_chan_rsc_req_obj_wen_comp;
  input b_chan_rsc_req_obj_wen_comp;
  input a_chan_rsc_req_obj_wen_comp;


  // Interconnect Declarations
  reg run_wten_reg;


  // Interconnect Declarations for Component Instantiations 
  assign run_wen = b_out_chan_rsc_req_obj_wen_comp & a_out_chan_rsc_req_obj_wen_comp
      & b_chan_rsc_req_obj_wen_comp & a_chan_rsc_req_obj_wen_comp;
  assign run_wten = run_wten_reg;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      run_wten_reg <= 1'b0;
    end
    else begin
      run_wten_reg <= ~ run_wen;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Jacobi2D_run_a_chan_rsc_req_obj_a_chan_rsc_req_wait_dp
// ------------------------------------------------------------------


module Jacobi2D_run_a_chan_rsc_req_obj_a_chan_rsc_req_wait_dp (
  clk, arst_n, a_chan_rsc_req_obj_oswt, a_chan_rsc_req_obj_wen_comp, a_chan_rsc_req_obj_biwt,
      a_chan_rsc_req_obj_bdwt, a_chan_rsc_req_obj_bcwt
);
  input clk;
  input arst_n;
  input a_chan_rsc_req_obj_oswt;
  output a_chan_rsc_req_obj_wen_comp;
  input a_chan_rsc_req_obj_biwt;
  input a_chan_rsc_req_obj_bdwt;
  output a_chan_rsc_req_obj_bcwt;
  reg a_chan_rsc_req_obj_bcwt;



  // Interconnect Declarations for Component Instantiations 
  assign a_chan_rsc_req_obj_wen_comp = (~ a_chan_rsc_req_obj_oswt) | a_chan_rsc_req_obj_biwt
      | a_chan_rsc_req_obj_bcwt;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      a_chan_rsc_req_obj_bcwt <= 1'b0;
    end
    else begin
      a_chan_rsc_req_obj_bcwt <= ~((~(a_chan_rsc_req_obj_bcwt | a_chan_rsc_req_obj_biwt))
          | a_chan_rsc_req_obj_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Jacobi2D_run_a_chan_rsc_req_obj_a_chan_rsc_req_wait_ctrl
// ------------------------------------------------------------------


module Jacobi2D_run_a_chan_rsc_req_obj_a_chan_rsc_req_wait_ctrl (
  run_wen, a_chan_rsc_req_obj_oswt, a_chan_rsc_req_obj_biwt, a_chan_rsc_req_obj_bdwt,
      a_chan_rsc_req_obj_bcwt, a_chan_rsc_req_obj_vd
);
  input run_wen;
  input a_chan_rsc_req_obj_oswt;
  output a_chan_rsc_req_obj_biwt;
  output a_chan_rsc_req_obj_bdwt;
  input a_chan_rsc_req_obj_bcwt;
  input a_chan_rsc_req_obj_vd;



  // Interconnect Declarations for Component Instantiations 
  assign a_chan_rsc_req_obj_bdwt = a_chan_rsc_req_obj_oswt & run_wen;
  assign a_chan_rsc_req_obj_biwt = a_chan_rsc_req_obj_oswt & (~ a_chan_rsc_req_obj_bcwt)
      & a_chan_rsc_req_obj_vd;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Jacobi2D_run_b_chan_rsc_req_obj_b_chan_rsc_req_wait_dp
// ------------------------------------------------------------------


module Jacobi2D_run_b_chan_rsc_req_obj_b_chan_rsc_req_wait_dp (
  clk, arst_n, b_chan_rsc_req_obj_oswt, b_chan_rsc_req_obj_wen_comp, b_chan_rsc_req_obj_biwt,
      b_chan_rsc_req_obj_bdwt, b_chan_rsc_req_obj_bcwt
);
  input clk;
  input arst_n;
  input b_chan_rsc_req_obj_oswt;
  output b_chan_rsc_req_obj_wen_comp;
  input b_chan_rsc_req_obj_biwt;
  input b_chan_rsc_req_obj_bdwt;
  output b_chan_rsc_req_obj_bcwt;
  reg b_chan_rsc_req_obj_bcwt;



  // Interconnect Declarations for Component Instantiations 
  assign b_chan_rsc_req_obj_wen_comp = (~ b_chan_rsc_req_obj_oswt) | b_chan_rsc_req_obj_biwt
      | b_chan_rsc_req_obj_bcwt;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      b_chan_rsc_req_obj_bcwt <= 1'b0;
    end
    else begin
      b_chan_rsc_req_obj_bcwt <= ~((~(b_chan_rsc_req_obj_bcwt | b_chan_rsc_req_obj_biwt))
          | b_chan_rsc_req_obj_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Jacobi2D_run_b_chan_rsc_req_obj_b_chan_rsc_req_wait_ctrl
// ------------------------------------------------------------------


module Jacobi2D_run_b_chan_rsc_req_obj_b_chan_rsc_req_wait_ctrl (
  run_wen, b_chan_rsc_req_obj_oswt, b_chan_rsc_req_obj_biwt, b_chan_rsc_req_obj_bdwt,
      b_chan_rsc_req_obj_bcwt, b_chan_rsc_req_obj_vd
);
  input run_wen;
  input b_chan_rsc_req_obj_oswt;
  output b_chan_rsc_req_obj_biwt;
  output b_chan_rsc_req_obj_bdwt;
  input b_chan_rsc_req_obj_bcwt;
  input b_chan_rsc_req_obj_vd;



  // Interconnect Declarations for Component Instantiations 
  assign b_chan_rsc_req_obj_bdwt = b_chan_rsc_req_obj_oswt & run_wen;
  assign b_chan_rsc_req_obj_biwt = b_chan_rsc_req_obj_oswt & (~ b_chan_rsc_req_obj_bcwt)
      & b_chan_rsc_req_obj_vd;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Jacobi2D_run_a_out_chan_rsc_req_obj_a_out_chan_rsc_req_wait_dp
// ------------------------------------------------------------------


module Jacobi2D_run_a_out_chan_rsc_req_obj_a_out_chan_rsc_req_wait_dp (
  clk, arst_n, a_out_chan_rsc_req_obj_oswt, a_out_chan_rsc_req_obj_wen_comp, a_out_chan_rsc_req_obj_biwt,
      a_out_chan_rsc_req_obj_bdwt, a_out_chan_rsc_req_obj_bcwt
);
  input clk;
  input arst_n;
  input a_out_chan_rsc_req_obj_oswt;
  output a_out_chan_rsc_req_obj_wen_comp;
  input a_out_chan_rsc_req_obj_biwt;
  input a_out_chan_rsc_req_obj_bdwt;
  output a_out_chan_rsc_req_obj_bcwt;
  reg a_out_chan_rsc_req_obj_bcwt;



  // Interconnect Declarations for Component Instantiations 
  assign a_out_chan_rsc_req_obj_wen_comp = (~ a_out_chan_rsc_req_obj_oswt) | a_out_chan_rsc_req_obj_biwt
      | a_out_chan_rsc_req_obj_bcwt;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      a_out_chan_rsc_req_obj_bcwt <= 1'b0;
    end
    else begin
      a_out_chan_rsc_req_obj_bcwt <= ~((~(a_out_chan_rsc_req_obj_bcwt | a_out_chan_rsc_req_obj_biwt))
          | a_out_chan_rsc_req_obj_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Jacobi2D_run_a_out_chan_rsc_req_obj_a_out_chan_rsc_req_wait_ctrl
// ------------------------------------------------------------------


module Jacobi2D_run_a_out_chan_rsc_req_obj_a_out_chan_rsc_req_wait_ctrl (
  run_wen, a_out_chan_rsc_req_obj_oswt, a_out_chan_rsc_req_obj_biwt, a_out_chan_rsc_req_obj_bdwt,
      a_out_chan_rsc_req_obj_bcwt, a_out_chan_rsc_req_obj_vd
);
  input run_wen;
  input a_out_chan_rsc_req_obj_oswt;
  output a_out_chan_rsc_req_obj_biwt;
  output a_out_chan_rsc_req_obj_bdwt;
  input a_out_chan_rsc_req_obj_bcwt;
  input a_out_chan_rsc_req_obj_vd;



  // Interconnect Declarations for Component Instantiations 
  assign a_out_chan_rsc_req_obj_bdwt = a_out_chan_rsc_req_obj_oswt & run_wen;
  assign a_out_chan_rsc_req_obj_biwt = a_out_chan_rsc_req_obj_oswt & (~ a_out_chan_rsc_req_obj_bcwt)
      & a_out_chan_rsc_req_obj_vd;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Jacobi2D_run_b_out_chan_rsc_req_obj_b_out_chan_rsc_req_wait_dp
// ------------------------------------------------------------------


module Jacobi2D_run_b_out_chan_rsc_req_obj_b_out_chan_rsc_req_wait_dp (
  clk, arst_n, b_out_chan_rsc_req_obj_oswt, b_out_chan_rsc_req_obj_wen_comp, b_out_chan_rsc_req_obj_biwt,
      b_out_chan_rsc_req_obj_bdwt, b_out_chan_rsc_req_obj_bcwt
);
  input clk;
  input arst_n;
  input b_out_chan_rsc_req_obj_oswt;
  output b_out_chan_rsc_req_obj_wen_comp;
  input b_out_chan_rsc_req_obj_biwt;
  input b_out_chan_rsc_req_obj_bdwt;
  output b_out_chan_rsc_req_obj_bcwt;
  reg b_out_chan_rsc_req_obj_bcwt;



  // Interconnect Declarations for Component Instantiations 
  assign b_out_chan_rsc_req_obj_wen_comp = (~ b_out_chan_rsc_req_obj_oswt) | b_out_chan_rsc_req_obj_biwt
      | b_out_chan_rsc_req_obj_bcwt;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      b_out_chan_rsc_req_obj_bcwt <= 1'b0;
    end
    else begin
      b_out_chan_rsc_req_obj_bcwt <= ~((~(b_out_chan_rsc_req_obj_bcwt | b_out_chan_rsc_req_obj_biwt))
          | b_out_chan_rsc_req_obj_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Jacobi2D_run_b_out_chan_rsc_req_obj_b_out_chan_rsc_req_wait_ctrl
// ------------------------------------------------------------------


module Jacobi2D_run_b_out_chan_rsc_req_obj_b_out_chan_rsc_req_wait_ctrl (
  run_wen, b_out_chan_rsc_req_obj_oswt, b_out_chan_rsc_req_obj_biwt, b_out_chan_rsc_req_obj_bdwt,
      b_out_chan_rsc_req_obj_bcwt, b_out_chan_rsc_req_obj_vd
);
  input run_wen;
  input b_out_chan_rsc_req_obj_oswt;
  output b_out_chan_rsc_req_obj_biwt;
  output b_out_chan_rsc_req_obj_bdwt;
  input b_out_chan_rsc_req_obj_bcwt;
  input b_out_chan_rsc_req_obj_vd;



  // Interconnect Declarations for Component Instantiations 
  assign b_out_chan_rsc_req_obj_bdwt = b_out_chan_rsc_req_obj_oswt & run_wen;
  assign b_out_chan_rsc_req_obj_biwt = b_out_chan_rsc_req_obj_oswt & (~ b_out_chan_rsc_req_obj_bcwt)
      & b_out_chan_rsc_req_obj_vd;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Jacobi2D_run_b_chan_rsc_rls_obj_b_chan_rsc_rls_wait_ctrl
// ------------------------------------------------------------------


module Jacobi2D_run_b_chan_rsc_rls_obj_b_chan_rsc_rls_wait_ctrl (
  run_wten, b_chan_rsc_rls_obj_iswt0, b_chan_rsc_rls_obj_ld_run_sct
);
  input run_wten;
  input b_chan_rsc_rls_obj_iswt0;
  output b_chan_rsc_rls_obj_ld_run_sct;



  // Interconnect Declarations for Component Instantiations 
  assign b_chan_rsc_rls_obj_ld_run_sct = (~ run_wten) & b_chan_rsc_rls_obj_iswt0;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Jacobi2D_run_a_chan_rsc_rls_obj_a_chan_rsc_rls_wait_ctrl
// ------------------------------------------------------------------


module Jacobi2D_run_a_chan_rsc_rls_obj_a_chan_rsc_rls_wait_ctrl (
  run_wten, a_chan_rsc_rls_obj_iswt0, a_chan_rsc_rls_obj_ld_run_sct
);
  input run_wten;
  input a_chan_rsc_rls_obj_iswt0;
  output a_chan_rsc_rls_obj_ld_run_sct;



  // Interconnect Declarations for Component Instantiations 
  assign a_chan_rsc_rls_obj_ld_run_sct = (~ run_wten) & a_chan_rsc_rls_obj_iswt0;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Jacobi2D_run_a_out_chan_rsc_rls_obj_a_out_chan_rsc_rls_wait_ctrl
// ------------------------------------------------------------------


module Jacobi2D_run_a_out_chan_rsc_rls_obj_a_out_chan_rsc_rls_wait_ctrl (
  run_wten, a_out_chan_rsc_rls_obj_iswt0, a_out_chan_rsc_rls_obj_ld_run_sct
);
  input run_wten;
  input a_out_chan_rsc_rls_obj_iswt0;
  output a_out_chan_rsc_rls_obj_ld_run_sct;



  // Interconnect Declarations for Component Instantiations 
  assign a_out_chan_rsc_rls_obj_ld_run_sct = (~ run_wten) & a_out_chan_rsc_rls_obj_iswt0;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Jacobi2D_run_b_out_chan_rsc_rls_obj_b_out_chan_rsc_rls_wait_ctrl
// ------------------------------------------------------------------


module Jacobi2D_run_b_out_chan_rsc_rls_obj_b_out_chan_rsc_rls_wait_ctrl (
  run_wten, b_out_chan_rsc_rls_obj_iswt0, b_out_chan_rsc_rls_obj_ld_run_sct
);
  input run_wten;
  input b_out_chan_rsc_rls_obj_iswt0;
  output b_out_chan_rsc_rls_obj_ld_run_sct;



  // Interconnect Declarations for Component Instantiations 
  assign b_out_chan_rsc_rls_obj_ld_run_sct = (~ run_wten) & b_out_chan_rsc_rls_obj_iswt0;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Jacobi2D_run_b_out_chan_rsci_1_b_out_chan_rsc_wait_dp
// ------------------------------------------------------------------


module Jacobi2D_run_b_out_chan_rsci_1_b_out_chan_rsc_wait_dp (
  clk, arst_n, b_out_chan_rsci_q_d, b_out_chan_rsci_q_d_mxwt, b_out_chan_rsci_biwt_1,
      b_out_chan_rsci_bdwt_2
);
  input clk;
  input arst_n;
  input [15:0] b_out_chan_rsci_q_d;
  output [15:0] b_out_chan_rsci_q_d_mxwt;
  input b_out_chan_rsci_biwt_1;
  input b_out_chan_rsci_bdwt_2;


  // Interconnect Declarations
  reg b_out_chan_rsci_bcwt_1;
  reg [15:0] b_out_chan_rsci_q_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign b_out_chan_rsci_q_d_mxwt = MUX_v_16_2_2(b_out_chan_rsci_q_d, b_out_chan_rsci_q_d_bfwt,
      b_out_chan_rsci_bcwt_1);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      b_out_chan_rsci_bcwt_1 <= 1'b0;
    end
    else begin
      b_out_chan_rsci_bcwt_1 <= ~((~(b_out_chan_rsci_bcwt_1 | b_out_chan_rsci_biwt_1))
          | b_out_chan_rsci_bdwt_2);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      b_out_chan_rsci_q_d_bfwt <= 16'b0000000000000000;
    end
    else if ( b_out_chan_rsci_biwt_1 ) begin
      b_out_chan_rsci_q_d_bfwt <= b_out_chan_rsci_q_d;
    end
  end

  function automatic [15:0] MUX_v_16_2_2;
    input [15:0] input_0;
    input [15:0] input_1;
    input  sel;
    reg [15:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_16_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Jacobi2D_run_b_out_chan_rsci_1_b_out_chan_rsc_wait_ctrl
// ------------------------------------------------------------------


module Jacobi2D_run_b_out_chan_rsci_1_b_out_chan_rsc_wait_ctrl (
  run_wen, run_wten, b_out_chan_rsci_oswt_1, b_out_chan_rsci_biwt_1, b_out_chan_rsci_bdwt_2,
      b_out_chan_rsci_we_d_run_sct_pff, b_out_chan_rsci_iswt0_pff, b_out_chan_rsci_re_d_run_sct_pff,
      b_out_chan_rsci_oswt_1_pff
);
  input run_wen;
  input run_wten;
  input b_out_chan_rsci_oswt_1;
  output b_out_chan_rsci_biwt_1;
  output b_out_chan_rsci_bdwt_2;
  output b_out_chan_rsci_we_d_run_sct_pff;
  input b_out_chan_rsci_iswt0_pff;
  output b_out_chan_rsci_re_d_run_sct_pff;
  input b_out_chan_rsci_oswt_1_pff;



  // Interconnect Declarations for Component Instantiations 
  assign b_out_chan_rsci_bdwt_2 = b_out_chan_rsci_oswt_1 & run_wen;
  assign b_out_chan_rsci_biwt_1 = (~ run_wten) & b_out_chan_rsci_oswt_1;
  assign b_out_chan_rsci_we_d_run_sct_pff = b_out_chan_rsci_iswt0_pff & run_wen;
  assign b_out_chan_rsci_re_d_run_sct_pff = b_out_chan_rsci_oswt_1_pff & run_wen;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Jacobi2D_run_a_out_chan_rsci_1_a_out_chan_rsc_wait_dp
// ------------------------------------------------------------------


module Jacobi2D_run_a_out_chan_rsci_1_a_out_chan_rsc_wait_dp (
  clk, arst_n, a_out_chan_rsci_q_d, a_out_chan_rsci_q_d_mxwt, a_out_chan_rsci_biwt_1,
      a_out_chan_rsci_bdwt_2
);
  input clk;
  input arst_n;
  input [15:0] a_out_chan_rsci_q_d;
  output [15:0] a_out_chan_rsci_q_d_mxwt;
  input a_out_chan_rsci_biwt_1;
  input a_out_chan_rsci_bdwt_2;


  // Interconnect Declarations
  reg a_out_chan_rsci_bcwt_1;
  reg [15:0] a_out_chan_rsci_q_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign a_out_chan_rsci_q_d_mxwt = MUX_v_16_2_2(a_out_chan_rsci_q_d, a_out_chan_rsci_q_d_bfwt,
      a_out_chan_rsci_bcwt_1);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      a_out_chan_rsci_bcwt_1 <= 1'b0;
    end
    else begin
      a_out_chan_rsci_bcwt_1 <= ~((~(a_out_chan_rsci_bcwt_1 | a_out_chan_rsci_biwt_1))
          | a_out_chan_rsci_bdwt_2);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      a_out_chan_rsci_q_d_bfwt <= 16'b0000000000000000;
    end
    else if ( a_out_chan_rsci_biwt_1 ) begin
      a_out_chan_rsci_q_d_bfwt <= a_out_chan_rsci_q_d;
    end
  end

  function automatic [15:0] MUX_v_16_2_2;
    input [15:0] input_0;
    input [15:0] input_1;
    input  sel;
    reg [15:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_16_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Jacobi2D_run_a_out_chan_rsci_1_a_out_chan_rsc_wait_ctrl
// ------------------------------------------------------------------


module Jacobi2D_run_a_out_chan_rsci_1_a_out_chan_rsc_wait_ctrl (
  run_wen, run_wten, a_out_chan_rsci_oswt_1, a_out_chan_rsci_biwt_1, a_out_chan_rsci_bdwt_2,
      a_out_chan_rsci_we_d_run_sct_pff, a_out_chan_rsci_iswt0_pff, a_out_chan_rsci_re_d_run_sct_pff,
      a_out_chan_rsci_oswt_1_pff
);
  input run_wen;
  input run_wten;
  input a_out_chan_rsci_oswt_1;
  output a_out_chan_rsci_biwt_1;
  output a_out_chan_rsci_bdwt_2;
  output a_out_chan_rsci_we_d_run_sct_pff;
  input a_out_chan_rsci_iswt0_pff;
  output a_out_chan_rsci_re_d_run_sct_pff;
  input a_out_chan_rsci_oswt_1_pff;



  // Interconnect Declarations for Component Instantiations 
  assign a_out_chan_rsci_bdwt_2 = a_out_chan_rsci_oswt_1 & run_wen;
  assign a_out_chan_rsci_biwt_1 = (~ run_wten) & a_out_chan_rsci_oswt_1;
  assign a_out_chan_rsci_we_d_run_sct_pff = a_out_chan_rsci_iswt0_pff & run_wen;
  assign a_out_chan_rsci_re_d_run_sct_pff = a_out_chan_rsci_oswt_1_pff & run_wen;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Jacobi2D_run_b_chan_rsci_1_b_chan_rsc_wait_dp
// ------------------------------------------------------------------


module Jacobi2D_run_b_chan_rsci_1_b_chan_rsc_wait_dp (
  clk, arst_n, b_chan_rsci_q_d, b_chan_rsci_q_d_mxwt, b_chan_rsci_biwt, b_chan_rsci_bdwt
);
  input clk;
  input arst_n;
  input [15:0] b_chan_rsci_q_d;
  output [15:0] b_chan_rsci_q_d_mxwt;
  input b_chan_rsci_biwt;
  input b_chan_rsci_bdwt;


  // Interconnect Declarations
  reg b_chan_rsci_bcwt;
  reg [15:0] b_chan_rsci_q_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign b_chan_rsci_q_d_mxwt = MUX_v_16_2_2(b_chan_rsci_q_d, b_chan_rsci_q_d_bfwt,
      b_chan_rsci_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      b_chan_rsci_bcwt <= 1'b0;
    end
    else begin
      b_chan_rsci_bcwt <= ~((~(b_chan_rsci_bcwt | b_chan_rsci_biwt)) | b_chan_rsci_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      b_chan_rsci_q_d_bfwt <= 16'b0000000000000000;
    end
    else if ( b_chan_rsci_biwt ) begin
      b_chan_rsci_q_d_bfwt <= b_chan_rsci_q_d;
    end
  end

  function automatic [15:0] MUX_v_16_2_2;
    input [15:0] input_0;
    input [15:0] input_1;
    input  sel;
    reg [15:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_16_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Jacobi2D_run_b_chan_rsci_1_b_chan_rsc_wait_ctrl
// ------------------------------------------------------------------


module Jacobi2D_run_b_chan_rsci_1_b_chan_rsc_wait_ctrl (
  run_wen, run_wten, b_chan_rsci_oswt, b_chan_rsci_biwt, b_chan_rsci_bdwt, b_chan_rsci_biwt_pff,
      b_chan_rsci_oswt_pff
);
  input run_wen;
  input run_wten;
  input b_chan_rsci_oswt;
  output b_chan_rsci_biwt;
  output b_chan_rsci_bdwt;
  output b_chan_rsci_biwt_pff;
  input b_chan_rsci_oswt_pff;



  // Interconnect Declarations for Component Instantiations 
  assign b_chan_rsci_bdwt = b_chan_rsci_oswt & run_wen;
  assign b_chan_rsci_biwt = (~ run_wten) & b_chan_rsci_oswt;
  assign b_chan_rsci_biwt_pff = run_wen & b_chan_rsci_oswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Jacobi2D_run_a_chan_rsci_1_a_chan_rsc_wait_dp
// ------------------------------------------------------------------


module Jacobi2D_run_a_chan_rsci_1_a_chan_rsc_wait_dp (
  clk, arst_n, a_chan_rsci_q_d, a_chan_rsci_q_d_mxwt, a_chan_rsci_biwt, a_chan_rsci_bdwt
);
  input clk;
  input arst_n;
  input [15:0] a_chan_rsci_q_d;
  output [15:0] a_chan_rsci_q_d_mxwt;
  input a_chan_rsci_biwt;
  input a_chan_rsci_bdwt;


  // Interconnect Declarations
  reg a_chan_rsci_bcwt;
  reg [15:0] a_chan_rsci_q_d_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign a_chan_rsci_q_d_mxwt = MUX_v_16_2_2(a_chan_rsci_q_d, a_chan_rsci_q_d_bfwt,
      a_chan_rsci_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      a_chan_rsci_bcwt <= 1'b0;
    end
    else begin
      a_chan_rsci_bcwt <= ~((~(a_chan_rsci_bcwt | a_chan_rsci_biwt)) | a_chan_rsci_bdwt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      a_chan_rsci_q_d_bfwt <= 16'b0000000000000000;
    end
    else if ( a_chan_rsci_biwt ) begin
      a_chan_rsci_q_d_bfwt <= a_chan_rsci_q_d;
    end
  end

  function automatic [15:0] MUX_v_16_2_2;
    input [15:0] input_0;
    input [15:0] input_1;
    input  sel;
    reg [15:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_16_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Jacobi2D_run_a_chan_rsci_1_a_chan_rsc_wait_ctrl
// ------------------------------------------------------------------


module Jacobi2D_run_a_chan_rsci_1_a_chan_rsc_wait_ctrl (
  run_wen, run_wten, a_chan_rsci_oswt, a_chan_rsci_biwt, a_chan_rsci_bdwt, a_chan_rsci_biwt_pff,
      a_chan_rsci_oswt_pff
);
  input run_wen;
  input run_wten;
  input a_chan_rsci_oswt;
  output a_chan_rsci_biwt;
  output a_chan_rsci_bdwt;
  output a_chan_rsci_biwt_pff;
  input a_chan_rsci_oswt_pff;



  // Interconnect Declarations for Component Instantiations 
  assign a_chan_rsci_bdwt = a_chan_rsci_oswt & run_wen;
  assign a_chan_rsci_biwt = (~ run_wten) & a_chan_rsci_oswt;
  assign a_chan_rsci_biwt_pff = run_wen & a_chan_rsci_oswt_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Jacobi2D_run_a_chan_rsc_req_obj
// ------------------------------------------------------------------


module Jacobi2D_run_a_chan_rsc_req_obj (
  clk, arst_n, a_chan_rsc_req_vz, run_wen, a_chan_rsc_req_obj_oswt, a_chan_rsc_req_obj_wen_comp
);
  input clk;
  input arst_n;
  input a_chan_rsc_req_vz;
  input run_wen;
  input a_chan_rsc_req_obj_oswt;
  output a_chan_rsc_req_obj_wen_comp;


  // Interconnect Declarations
  wire a_chan_rsc_req_obj_biwt;
  wire a_chan_rsc_req_obj_bdwt;
  wire a_chan_rsc_req_obj_bcwt;
  wire a_chan_rsc_req_obj_vd;


  // Interconnect Declarations for Component Instantiations 
  mgc_in_sync_v2 #(.valid(32'sd1)) a_chan_rsc_req_obj (
      .vd(a_chan_rsc_req_obj_vd),
      .vz(a_chan_rsc_req_vz)
    );
  Jacobi2D_run_a_chan_rsc_req_obj_a_chan_rsc_req_wait_ctrl Jacobi2D_run_a_chan_rsc_req_obj_a_chan_rsc_req_wait_ctrl_inst
      (
      .run_wen(run_wen),
      .a_chan_rsc_req_obj_oswt(a_chan_rsc_req_obj_oswt),
      .a_chan_rsc_req_obj_biwt(a_chan_rsc_req_obj_biwt),
      .a_chan_rsc_req_obj_bdwt(a_chan_rsc_req_obj_bdwt),
      .a_chan_rsc_req_obj_bcwt(a_chan_rsc_req_obj_bcwt),
      .a_chan_rsc_req_obj_vd(a_chan_rsc_req_obj_vd)
    );
  Jacobi2D_run_a_chan_rsc_req_obj_a_chan_rsc_req_wait_dp Jacobi2D_run_a_chan_rsc_req_obj_a_chan_rsc_req_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .a_chan_rsc_req_obj_oswt(a_chan_rsc_req_obj_oswt),
      .a_chan_rsc_req_obj_wen_comp(a_chan_rsc_req_obj_wen_comp),
      .a_chan_rsc_req_obj_biwt(a_chan_rsc_req_obj_biwt),
      .a_chan_rsc_req_obj_bdwt(a_chan_rsc_req_obj_bdwt),
      .a_chan_rsc_req_obj_bcwt(a_chan_rsc_req_obj_bcwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Jacobi2D_run_b_chan_rsc_req_obj
// ------------------------------------------------------------------


module Jacobi2D_run_b_chan_rsc_req_obj (
  clk, arst_n, b_chan_rsc_req_vz, run_wen, b_chan_rsc_req_obj_oswt, b_chan_rsc_req_obj_wen_comp
);
  input clk;
  input arst_n;
  input b_chan_rsc_req_vz;
  input run_wen;
  input b_chan_rsc_req_obj_oswt;
  output b_chan_rsc_req_obj_wen_comp;


  // Interconnect Declarations
  wire b_chan_rsc_req_obj_biwt;
  wire b_chan_rsc_req_obj_bdwt;
  wire b_chan_rsc_req_obj_bcwt;
  wire b_chan_rsc_req_obj_vd;


  // Interconnect Declarations for Component Instantiations 
  mgc_in_sync_v2 #(.valid(32'sd1)) b_chan_rsc_req_obj (
      .vd(b_chan_rsc_req_obj_vd),
      .vz(b_chan_rsc_req_vz)
    );
  Jacobi2D_run_b_chan_rsc_req_obj_b_chan_rsc_req_wait_ctrl Jacobi2D_run_b_chan_rsc_req_obj_b_chan_rsc_req_wait_ctrl_inst
      (
      .run_wen(run_wen),
      .b_chan_rsc_req_obj_oswt(b_chan_rsc_req_obj_oswt),
      .b_chan_rsc_req_obj_biwt(b_chan_rsc_req_obj_biwt),
      .b_chan_rsc_req_obj_bdwt(b_chan_rsc_req_obj_bdwt),
      .b_chan_rsc_req_obj_bcwt(b_chan_rsc_req_obj_bcwt),
      .b_chan_rsc_req_obj_vd(b_chan_rsc_req_obj_vd)
    );
  Jacobi2D_run_b_chan_rsc_req_obj_b_chan_rsc_req_wait_dp Jacobi2D_run_b_chan_rsc_req_obj_b_chan_rsc_req_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .b_chan_rsc_req_obj_oswt(b_chan_rsc_req_obj_oswt),
      .b_chan_rsc_req_obj_wen_comp(b_chan_rsc_req_obj_wen_comp),
      .b_chan_rsc_req_obj_biwt(b_chan_rsc_req_obj_biwt),
      .b_chan_rsc_req_obj_bdwt(b_chan_rsc_req_obj_bdwt),
      .b_chan_rsc_req_obj_bcwt(b_chan_rsc_req_obj_bcwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Jacobi2D_run_a_out_chan_rsc_req_obj
// ------------------------------------------------------------------


module Jacobi2D_run_a_out_chan_rsc_req_obj (
  clk, arst_n, a_out_chan_rsc_req_vz, run_wen, a_out_chan_rsc_req_obj_oswt, a_out_chan_rsc_req_obj_wen_comp
);
  input clk;
  input arst_n;
  input a_out_chan_rsc_req_vz;
  input run_wen;
  input a_out_chan_rsc_req_obj_oswt;
  output a_out_chan_rsc_req_obj_wen_comp;


  // Interconnect Declarations
  wire a_out_chan_rsc_req_obj_biwt;
  wire a_out_chan_rsc_req_obj_bdwt;
  wire a_out_chan_rsc_req_obj_bcwt;
  wire a_out_chan_rsc_req_obj_vd;


  // Interconnect Declarations for Component Instantiations 
  mgc_in_sync_v2 #(.valid(32'sd1)) a_out_chan_rsc_req_obj (
      .vd(a_out_chan_rsc_req_obj_vd),
      .vz(a_out_chan_rsc_req_vz)
    );
  Jacobi2D_run_a_out_chan_rsc_req_obj_a_out_chan_rsc_req_wait_ctrl Jacobi2D_run_a_out_chan_rsc_req_obj_a_out_chan_rsc_req_wait_ctrl_inst
      (
      .run_wen(run_wen),
      .a_out_chan_rsc_req_obj_oswt(a_out_chan_rsc_req_obj_oswt),
      .a_out_chan_rsc_req_obj_biwt(a_out_chan_rsc_req_obj_biwt),
      .a_out_chan_rsc_req_obj_bdwt(a_out_chan_rsc_req_obj_bdwt),
      .a_out_chan_rsc_req_obj_bcwt(a_out_chan_rsc_req_obj_bcwt),
      .a_out_chan_rsc_req_obj_vd(a_out_chan_rsc_req_obj_vd)
    );
  Jacobi2D_run_a_out_chan_rsc_req_obj_a_out_chan_rsc_req_wait_dp Jacobi2D_run_a_out_chan_rsc_req_obj_a_out_chan_rsc_req_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .a_out_chan_rsc_req_obj_oswt(a_out_chan_rsc_req_obj_oswt),
      .a_out_chan_rsc_req_obj_wen_comp(a_out_chan_rsc_req_obj_wen_comp),
      .a_out_chan_rsc_req_obj_biwt(a_out_chan_rsc_req_obj_biwt),
      .a_out_chan_rsc_req_obj_bdwt(a_out_chan_rsc_req_obj_bdwt),
      .a_out_chan_rsc_req_obj_bcwt(a_out_chan_rsc_req_obj_bcwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Jacobi2D_run_b_out_chan_rsc_req_obj
// ------------------------------------------------------------------


module Jacobi2D_run_b_out_chan_rsc_req_obj (
  clk, arst_n, b_out_chan_rsc_req_vz, run_wen, b_out_chan_rsc_req_obj_oswt, b_out_chan_rsc_req_obj_wen_comp
);
  input clk;
  input arst_n;
  input b_out_chan_rsc_req_vz;
  input run_wen;
  input b_out_chan_rsc_req_obj_oswt;
  output b_out_chan_rsc_req_obj_wen_comp;


  // Interconnect Declarations
  wire b_out_chan_rsc_req_obj_biwt;
  wire b_out_chan_rsc_req_obj_bdwt;
  wire b_out_chan_rsc_req_obj_bcwt;
  wire b_out_chan_rsc_req_obj_vd;


  // Interconnect Declarations for Component Instantiations 
  mgc_in_sync_v2 #(.valid(32'sd1)) b_out_chan_rsc_req_obj (
      .vd(b_out_chan_rsc_req_obj_vd),
      .vz(b_out_chan_rsc_req_vz)
    );
  Jacobi2D_run_b_out_chan_rsc_req_obj_b_out_chan_rsc_req_wait_ctrl Jacobi2D_run_b_out_chan_rsc_req_obj_b_out_chan_rsc_req_wait_ctrl_inst
      (
      .run_wen(run_wen),
      .b_out_chan_rsc_req_obj_oswt(b_out_chan_rsc_req_obj_oswt),
      .b_out_chan_rsc_req_obj_biwt(b_out_chan_rsc_req_obj_biwt),
      .b_out_chan_rsc_req_obj_bdwt(b_out_chan_rsc_req_obj_bdwt),
      .b_out_chan_rsc_req_obj_bcwt(b_out_chan_rsc_req_obj_bcwt),
      .b_out_chan_rsc_req_obj_vd(b_out_chan_rsc_req_obj_vd)
    );
  Jacobi2D_run_b_out_chan_rsc_req_obj_b_out_chan_rsc_req_wait_dp Jacobi2D_run_b_out_chan_rsc_req_obj_b_out_chan_rsc_req_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .b_out_chan_rsc_req_obj_oswt(b_out_chan_rsc_req_obj_oswt),
      .b_out_chan_rsc_req_obj_wen_comp(b_out_chan_rsc_req_obj_wen_comp),
      .b_out_chan_rsc_req_obj_biwt(b_out_chan_rsc_req_obj_biwt),
      .b_out_chan_rsc_req_obj_bdwt(b_out_chan_rsc_req_obj_bdwt),
      .b_out_chan_rsc_req_obj_bcwt(b_out_chan_rsc_req_obj_bcwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Jacobi2D_run_b_chan_rsc_rls_obj
// ------------------------------------------------------------------


module Jacobi2D_run_b_chan_rsc_rls_obj (
  b_chan_rsc_rls_lz, run_wten, b_chan_rsc_rls_obj_iswt0
);
  output b_chan_rsc_rls_lz;
  input run_wten;
  input b_chan_rsc_rls_obj_iswt0;


  // Interconnect Declarations
  wire b_chan_rsc_rls_obj_ld_run_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) b_chan_rsc_rls_obj (
      .ld(b_chan_rsc_rls_obj_ld_run_sct),
      .lz(b_chan_rsc_rls_lz)
    );
  Jacobi2D_run_b_chan_rsc_rls_obj_b_chan_rsc_rls_wait_ctrl Jacobi2D_run_b_chan_rsc_rls_obj_b_chan_rsc_rls_wait_ctrl_inst
      (
      .run_wten(run_wten),
      .b_chan_rsc_rls_obj_iswt0(b_chan_rsc_rls_obj_iswt0),
      .b_chan_rsc_rls_obj_ld_run_sct(b_chan_rsc_rls_obj_ld_run_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Jacobi2D_run_a_chan_rsc_rls_obj
// ------------------------------------------------------------------


module Jacobi2D_run_a_chan_rsc_rls_obj (
  a_chan_rsc_rls_lz, run_wten, a_chan_rsc_rls_obj_iswt0
);
  output a_chan_rsc_rls_lz;
  input run_wten;
  input a_chan_rsc_rls_obj_iswt0;


  // Interconnect Declarations
  wire a_chan_rsc_rls_obj_ld_run_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) a_chan_rsc_rls_obj (
      .ld(a_chan_rsc_rls_obj_ld_run_sct),
      .lz(a_chan_rsc_rls_lz)
    );
  Jacobi2D_run_a_chan_rsc_rls_obj_a_chan_rsc_rls_wait_ctrl Jacobi2D_run_a_chan_rsc_rls_obj_a_chan_rsc_rls_wait_ctrl_inst
      (
      .run_wten(run_wten),
      .a_chan_rsc_rls_obj_iswt0(a_chan_rsc_rls_obj_iswt0),
      .a_chan_rsc_rls_obj_ld_run_sct(a_chan_rsc_rls_obj_ld_run_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Jacobi2D_run_a_out_chan_rsc_rls_obj
// ------------------------------------------------------------------


module Jacobi2D_run_a_out_chan_rsc_rls_obj (
  a_out_chan_rsc_rls_lz, run_wten, a_out_chan_rsc_rls_obj_iswt0
);
  output a_out_chan_rsc_rls_lz;
  input run_wten;
  input a_out_chan_rsc_rls_obj_iswt0;


  // Interconnect Declarations
  wire a_out_chan_rsc_rls_obj_ld_run_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) a_out_chan_rsc_rls_obj (
      .ld(a_out_chan_rsc_rls_obj_ld_run_sct),
      .lz(a_out_chan_rsc_rls_lz)
    );
  Jacobi2D_run_a_out_chan_rsc_rls_obj_a_out_chan_rsc_rls_wait_ctrl Jacobi2D_run_a_out_chan_rsc_rls_obj_a_out_chan_rsc_rls_wait_ctrl_inst
      (
      .run_wten(run_wten),
      .a_out_chan_rsc_rls_obj_iswt0(a_out_chan_rsc_rls_obj_iswt0),
      .a_out_chan_rsc_rls_obj_ld_run_sct(a_out_chan_rsc_rls_obj_ld_run_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Jacobi2D_run_b_out_chan_rsc_rls_obj
// ------------------------------------------------------------------


module Jacobi2D_run_b_out_chan_rsc_rls_obj (
  b_out_chan_rsc_rls_lz, run_wten, b_out_chan_rsc_rls_obj_iswt0
);
  output b_out_chan_rsc_rls_lz;
  input run_wten;
  input b_out_chan_rsc_rls_obj_iswt0;


  // Interconnect Declarations
  wire b_out_chan_rsc_rls_obj_ld_run_sct;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) b_out_chan_rsc_rls_obj (
      .ld(b_out_chan_rsc_rls_obj_ld_run_sct),
      .lz(b_out_chan_rsc_rls_lz)
    );
  Jacobi2D_run_b_out_chan_rsc_rls_obj_b_out_chan_rsc_rls_wait_ctrl Jacobi2D_run_b_out_chan_rsc_rls_obj_b_out_chan_rsc_rls_wait_ctrl_inst
      (
      .run_wten(run_wten),
      .b_out_chan_rsc_rls_obj_iswt0(b_out_chan_rsc_rls_obj_iswt0),
      .b_out_chan_rsc_rls_obj_ld_run_sct(b_out_chan_rsc_rls_obj_ld_run_sct)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Jacobi2D_run_b_out_chan_rsci_1
// ------------------------------------------------------------------


module Jacobi2D_run_b_out_chan_rsci_1 (
  clk, arst_n, b_out_chan_rsci_q_d, run_wen, run_wten, b_out_chan_rsci_oswt_1, b_out_chan_rsci_q_d_mxwt,
      b_out_chan_rsci_we_d_pff, b_out_chan_rsci_iswt0_pff, b_out_chan_rsci_re_d_pff,
      b_out_chan_rsci_oswt_1_pff
);
  input clk;
  input arst_n;
  input [15:0] b_out_chan_rsci_q_d;
  input run_wen;
  input run_wten;
  input b_out_chan_rsci_oswt_1;
  output [15:0] b_out_chan_rsci_q_d_mxwt;
  output b_out_chan_rsci_we_d_pff;
  input b_out_chan_rsci_iswt0_pff;
  output b_out_chan_rsci_re_d_pff;
  input b_out_chan_rsci_oswt_1_pff;


  // Interconnect Declarations
  wire b_out_chan_rsci_biwt_1;
  wire b_out_chan_rsci_bdwt_2;
  wire b_out_chan_rsci_we_d_run_sct_iff;
  wire b_out_chan_rsci_re_d_run_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  Jacobi2D_run_b_out_chan_rsci_1_b_out_chan_rsc_wait_ctrl Jacobi2D_run_b_out_chan_rsci_1_b_out_chan_rsc_wait_ctrl_inst
      (
      .run_wen(run_wen),
      .run_wten(run_wten),
      .b_out_chan_rsci_oswt_1(b_out_chan_rsci_oswt_1),
      .b_out_chan_rsci_biwt_1(b_out_chan_rsci_biwt_1),
      .b_out_chan_rsci_bdwt_2(b_out_chan_rsci_bdwt_2),
      .b_out_chan_rsci_we_d_run_sct_pff(b_out_chan_rsci_we_d_run_sct_iff),
      .b_out_chan_rsci_iswt0_pff(b_out_chan_rsci_iswt0_pff),
      .b_out_chan_rsci_re_d_run_sct_pff(b_out_chan_rsci_re_d_run_sct_iff),
      .b_out_chan_rsci_oswt_1_pff(b_out_chan_rsci_oswt_1_pff)
    );
  Jacobi2D_run_b_out_chan_rsci_1_b_out_chan_rsc_wait_dp Jacobi2D_run_b_out_chan_rsci_1_b_out_chan_rsc_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .b_out_chan_rsci_q_d(b_out_chan_rsci_q_d),
      .b_out_chan_rsci_q_d_mxwt(b_out_chan_rsci_q_d_mxwt),
      .b_out_chan_rsci_biwt_1(b_out_chan_rsci_biwt_1),
      .b_out_chan_rsci_bdwt_2(b_out_chan_rsci_bdwt_2)
    );
  assign b_out_chan_rsci_we_d_pff = b_out_chan_rsci_we_d_run_sct_iff;
  assign b_out_chan_rsci_re_d_pff = b_out_chan_rsci_re_d_run_sct_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Jacobi2D_run_a_out_chan_rsci_1
// ------------------------------------------------------------------


module Jacobi2D_run_a_out_chan_rsci_1 (
  clk, arst_n, a_out_chan_rsci_q_d, run_wen, run_wten, a_out_chan_rsci_oswt_1, a_out_chan_rsci_q_d_mxwt,
      a_out_chan_rsci_we_d_pff, a_out_chan_rsci_iswt0_pff, a_out_chan_rsci_re_d_pff,
      a_out_chan_rsci_oswt_1_pff
);
  input clk;
  input arst_n;
  input [15:0] a_out_chan_rsci_q_d;
  input run_wen;
  input run_wten;
  input a_out_chan_rsci_oswt_1;
  output [15:0] a_out_chan_rsci_q_d_mxwt;
  output a_out_chan_rsci_we_d_pff;
  input a_out_chan_rsci_iswt0_pff;
  output a_out_chan_rsci_re_d_pff;
  input a_out_chan_rsci_oswt_1_pff;


  // Interconnect Declarations
  wire a_out_chan_rsci_biwt_1;
  wire a_out_chan_rsci_bdwt_2;
  wire a_out_chan_rsci_we_d_run_sct_iff;
  wire a_out_chan_rsci_re_d_run_sct_iff;


  // Interconnect Declarations for Component Instantiations 
  Jacobi2D_run_a_out_chan_rsci_1_a_out_chan_rsc_wait_ctrl Jacobi2D_run_a_out_chan_rsci_1_a_out_chan_rsc_wait_ctrl_inst
      (
      .run_wen(run_wen),
      .run_wten(run_wten),
      .a_out_chan_rsci_oswt_1(a_out_chan_rsci_oswt_1),
      .a_out_chan_rsci_biwt_1(a_out_chan_rsci_biwt_1),
      .a_out_chan_rsci_bdwt_2(a_out_chan_rsci_bdwt_2),
      .a_out_chan_rsci_we_d_run_sct_pff(a_out_chan_rsci_we_d_run_sct_iff),
      .a_out_chan_rsci_iswt0_pff(a_out_chan_rsci_iswt0_pff),
      .a_out_chan_rsci_re_d_run_sct_pff(a_out_chan_rsci_re_d_run_sct_iff),
      .a_out_chan_rsci_oswt_1_pff(a_out_chan_rsci_oswt_1_pff)
    );
  Jacobi2D_run_a_out_chan_rsci_1_a_out_chan_rsc_wait_dp Jacobi2D_run_a_out_chan_rsci_1_a_out_chan_rsc_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .a_out_chan_rsci_q_d(a_out_chan_rsci_q_d),
      .a_out_chan_rsci_q_d_mxwt(a_out_chan_rsci_q_d_mxwt),
      .a_out_chan_rsci_biwt_1(a_out_chan_rsci_biwt_1),
      .a_out_chan_rsci_bdwt_2(a_out_chan_rsci_bdwt_2)
    );
  assign a_out_chan_rsci_we_d_pff = a_out_chan_rsci_we_d_run_sct_iff;
  assign a_out_chan_rsci_re_d_pff = a_out_chan_rsci_re_d_run_sct_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Jacobi2D_run_b_chan_rsci_1
// ------------------------------------------------------------------


module Jacobi2D_run_b_chan_rsci_1 (
  clk, arst_n, b_chan_rsci_q_d, run_wen, run_wten, b_chan_rsci_oswt, b_chan_rsci_q_d_mxwt,
      b_chan_rsci_re_d_pff, b_chan_rsci_oswt_pff
);
  input clk;
  input arst_n;
  input [15:0] b_chan_rsci_q_d;
  input run_wen;
  input run_wten;
  input b_chan_rsci_oswt;
  output [15:0] b_chan_rsci_q_d_mxwt;
  output b_chan_rsci_re_d_pff;
  input b_chan_rsci_oswt_pff;


  // Interconnect Declarations
  wire b_chan_rsci_biwt;
  wire b_chan_rsci_bdwt;
  wire b_chan_rsci_biwt_iff;


  // Interconnect Declarations for Component Instantiations 
  Jacobi2D_run_b_chan_rsci_1_b_chan_rsc_wait_ctrl Jacobi2D_run_b_chan_rsci_1_b_chan_rsc_wait_ctrl_inst
      (
      .run_wen(run_wen),
      .run_wten(run_wten),
      .b_chan_rsci_oswt(b_chan_rsci_oswt),
      .b_chan_rsci_biwt(b_chan_rsci_biwt),
      .b_chan_rsci_bdwt(b_chan_rsci_bdwt),
      .b_chan_rsci_biwt_pff(b_chan_rsci_biwt_iff),
      .b_chan_rsci_oswt_pff(b_chan_rsci_oswt_pff)
    );
  Jacobi2D_run_b_chan_rsci_1_b_chan_rsc_wait_dp Jacobi2D_run_b_chan_rsci_1_b_chan_rsc_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .b_chan_rsci_q_d(b_chan_rsci_q_d),
      .b_chan_rsci_q_d_mxwt(b_chan_rsci_q_d_mxwt),
      .b_chan_rsci_biwt(b_chan_rsci_biwt),
      .b_chan_rsci_bdwt(b_chan_rsci_bdwt)
    );
  assign b_chan_rsci_re_d_pff = b_chan_rsci_biwt_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Jacobi2D_run_a_chan_rsci_1
// ------------------------------------------------------------------


module Jacobi2D_run_a_chan_rsci_1 (
  clk, arst_n, a_chan_rsci_q_d, run_wen, run_wten, a_chan_rsci_oswt, a_chan_rsci_q_d_mxwt,
      a_chan_rsci_re_d_pff, a_chan_rsci_oswt_pff
);
  input clk;
  input arst_n;
  input [15:0] a_chan_rsci_q_d;
  input run_wen;
  input run_wten;
  input a_chan_rsci_oswt;
  output [15:0] a_chan_rsci_q_d_mxwt;
  output a_chan_rsci_re_d_pff;
  input a_chan_rsci_oswt_pff;


  // Interconnect Declarations
  wire a_chan_rsci_biwt;
  wire a_chan_rsci_bdwt;
  wire a_chan_rsci_biwt_iff;


  // Interconnect Declarations for Component Instantiations 
  Jacobi2D_run_a_chan_rsci_1_a_chan_rsc_wait_ctrl Jacobi2D_run_a_chan_rsci_1_a_chan_rsc_wait_ctrl_inst
      (
      .run_wen(run_wen),
      .run_wten(run_wten),
      .a_chan_rsci_oswt(a_chan_rsci_oswt),
      .a_chan_rsci_biwt(a_chan_rsci_biwt),
      .a_chan_rsci_bdwt(a_chan_rsci_bdwt),
      .a_chan_rsci_biwt_pff(a_chan_rsci_biwt_iff),
      .a_chan_rsci_oswt_pff(a_chan_rsci_oswt_pff)
    );
  Jacobi2D_run_a_chan_rsci_1_a_chan_rsc_wait_dp Jacobi2D_run_a_chan_rsci_1_a_chan_rsc_wait_dp_inst
      (
      .clk(clk),
      .arst_n(arst_n),
      .a_chan_rsci_q_d(a_chan_rsci_q_d),
      .a_chan_rsci_q_d_mxwt(a_chan_rsci_q_d_mxwt),
      .a_chan_rsci_biwt(a_chan_rsci_biwt),
      .a_chan_rsci_bdwt(a_chan_rsci_bdwt)
    );
  assign a_chan_rsci_re_d_pff = a_chan_rsci_biwt_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Jacobi2D_run
// ------------------------------------------------------------------


module Jacobi2D_run (
  clk, arst_n, a_chan_rsc_req_vz, a_chan_rsc_rls_lz, b_chan_rsc_req_vz, b_chan_rsc_rls_lz,
      a_out_chan_rsc_req_vz, a_out_chan_rsc_rls_lz, b_out_chan_rsc_req_vz, b_out_chan_rsc_rls_lz,
      a_chan_rsci_radr_d, a_chan_rsci_q_d, b_chan_rsci_radr_d, b_chan_rsci_q_d, a_out_chan_rsci_radr_d,
      a_out_chan_rsci_wadr_d, a_out_chan_rsci_d_d, a_out_chan_rsci_q_d, b_out_chan_rsci_radr_d,
      b_out_chan_rsci_wadr_d, b_out_chan_rsci_d_d, b_out_chan_rsci_q_d, a_chan_rsci_re_d_pff,
      b_chan_rsci_re_d_pff, a_out_chan_rsci_we_d_pff, a_out_chan_rsci_re_d_pff, b_out_chan_rsci_we_d_pff,
      b_out_chan_rsci_re_d_pff
);
  input clk;
  input arst_n;
  input a_chan_rsc_req_vz;
  output a_chan_rsc_rls_lz;
  input b_chan_rsc_req_vz;
  output b_chan_rsc_rls_lz;
  input a_out_chan_rsc_req_vz;
  output a_out_chan_rsc_rls_lz;
  input b_out_chan_rsc_req_vz;
  output b_out_chan_rsc_rls_lz;
  output [13:0] a_chan_rsci_radr_d;
  input [15:0] a_chan_rsci_q_d;
  output [13:0] b_chan_rsci_radr_d;
  input [15:0] b_chan_rsci_q_d;
  output [13:0] a_out_chan_rsci_radr_d;
  output [13:0] a_out_chan_rsci_wadr_d;
  output [15:0] a_out_chan_rsci_d_d;
  input [15:0] a_out_chan_rsci_q_d;
  output [13:0] b_out_chan_rsci_radr_d;
  output [13:0] b_out_chan_rsci_wadr_d;
  output [15:0] b_out_chan_rsci_d_d;
  input [15:0] b_out_chan_rsci_q_d;
  output a_chan_rsci_re_d_pff;
  output b_chan_rsci_re_d_pff;
  output a_out_chan_rsci_we_d_pff;
  output a_out_chan_rsci_re_d_pff;
  output b_out_chan_rsci_we_d_pff;
  output b_out_chan_rsci_re_d_pff;


  // Interconnect Declarations
  wire run_wen;
  wire run_wten;
  wire [15:0] a_chan_rsci_q_d_mxwt;
  wire [15:0] b_chan_rsci_q_d_mxwt;
  wire [15:0] a_out_chan_rsci_q_d_mxwt;
  wire [15:0] b_out_chan_rsci_q_d_mxwt;
  wire b_out_chan_rsc_req_obj_wen_comp;
  wire a_out_chan_rsc_req_obj_wen_comp;
  wire b_chan_rsc_req_obj_wen_comp;
  wire a_chan_rsc_req_obj_wen_comp;
  wire [12:0] fsm_output;
  wire and_dcpl;
  wire or_dcpl_19;
  wire or_dcpl_23;
  wire and_dcpl_10;
  wire and_dcpl_11;
  wire or_dcpl_33;
  wire or_dcpl_34;
  wire or_dcpl_35;
  wire or_dcpl_39;
  wire or_dcpl_40;
  wire or_dcpl_41;
  wire or_dcpl_44;
  wire or_dcpl_50;
  wire or_dcpl_51;
  wire and_dcpl_31;
  wire and_dcpl_32;
  wire or_dcpl_62;
  wire or_tmp_76;
  wire and_62_cse;
  reg exit_for_1_lpi_2_dfm_1;
  reg exit_for_1_for_1_lpi_2_dfm_1;
  reg for_1_for_1_equal_tmp;
  reg for_1_for_1_for_slc_for_1_for_1_for_acc_7_svs;
  wire lfst_exit_for_1_for_1_sva_dfm_3_1_1;
  reg for_1_for_1_for_1_for_1_nor_2_cse;
  wire for_1_for_1_and_12_cse_mx0w2;
  reg exit_for_1_for_1_sva_1;
  wire for_1_for_1_and_6_cse_1;
  wire for_1_for_1_equal_tmp_mx0w2;
  wire exit_for_1_for_lpi_2_dfm_3;
  wire for_1_for_1_for_1_for_1_nor_m1c_1;
  reg for_1_for_for_slc_for_1_for_for_acc_7_svs;
  reg exit_for_1_for_sva_2;
  reg reg_a_chan_rsc_req_obj_iswt0_cse;
  reg reg_b_chan_rsc_rls_obj_iswt0_cse;
  reg reg_a_out_chan_rsc_rls_obj_iswt0_cse;
  reg reg_b_out_chan_rsci_port_0_r_ram_ir_internal_RMASK_B_d_run_psct_cse;
  reg reg_a_out_chan_rsci_port_0_r_ram_ir_internal_RMASK_B_d_run_psct_cse;
  wire for_for_or_1_cse;
  reg reg_b_chan_rsci_iswt0_cse;
  wire nand_3_cse;
  wire for_1_for_1_for_1_for_1_nor_2_cse_1;
  reg for_1_for_1_for_1_for_1_nor_m1c;
  wire for_1_for_1_for_and_1_ssc;
  wire a_chan_rsci_re_d_iff;
  wire and_97_rmff;
  wire b_chan_rsci_re_d_iff;
  wire a_out_chan_rsci_we_d_iff;
  wire a_out_chan_rsci_re_d_iff;
  wire or_107_rmff;
  wire b_out_chan_rsci_we_d_iff;
  wire b_out_chan_rsci_re_d_iff;
  wire or_99_rmff;
  reg [1:0] for_1_for_1_for_j_slc_for_1_for_1_for_j_6_0_1_0_3_itm;
  reg [11:0] for_1_for_for_acc_14_cse_sva;
  reg [6:0] for_1_for_for_j_6_0_lpi_2_dfm;
  reg [8:0] for_1_for_1_for_acc_18_itm_8_0;
  reg [6:0] for_1_for_1_for_j_6_0_lpi_2;
  reg [4:0] for_1_for_1_for_acc_18_itm_13_9;
  reg [11:0] for_1_for_1_for_acc_14_cse_sva;
  wire [15:0] z_out;
  wire [15:0] z_out_1;
  wire [6:0] z_out_2;
  wire [7:0] nl_z_out_2;
  wire or_tmp_118;
  wire or_tmp_121;
  wire [6:0] z_out_3;
  wire [7:0] nl_z_out_3;
  wire [6:0] z_out_4;
  wire [7:0] nl_z_out_4;
  wire [7:0] z_out_5;
  wire [8:0] nl_z_out_5;
  wire or_tmp_132;
  wire or_tmp_133;
  wire [13:0] z_out_6;
  wire [14:0] nl_z_out_6;
  wire [11:0] z_out_7;
  wire [12:0] nl_z_out_7;
  reg [6:0] for_1_for_1_i_6_0_lpi_2;
  reg [6:0] for_1_t_6_0_sva;
  reg [6:0] for_1_for_for_acc_8_atp_sva;
  reg [15:0] for_1_for_1_for_temp1_sva;
  reg [6:0] for_1_for_1_for_acc_8_atp_sva;
  reg [6:0] for_1_for_1_for_acc_10_atp_sva;
  reg [6:0] for_1_for_1_for_j_6_0_lpi_2_dfm_3;
  reg [15:0] for_1_for_1_for_asn_14_itm;
  reg [4:0] for_1_for_1_for_slc_for_1_for_1_for_j_6_0_6_2_1_itm;
  reg [6:0] for_1_for_1_for_acc_24_itm_9_3;
  reg [2:0] for_1_for_1_for_acc_24_itm_2_0;
  reg [7:0] for_1_for_1_for_acc_26_itm_10_3;
  wire for_1_for_1_for_j_6_0_lpi_2_mx0c0;
  wire [6:0] for_for_j_6_0_sva_3;
  wire [7:0] nl_for_for_j_6_0_sva_3;
  wire [6:0] for_1_for_for_j_6_0_lpi_2_dfm_mx2;
  wire [8:0] for_1_for_for_acc_19_psp_sva_1;
  wire [9:0] nl_for_1_for_for_acc_19_psp_sva_1;
  wire [15:0] add_inst_1_run_out_1;
  wire [15:0] add_inst_5_run_out_1;
  wire [11:0] a_out_chan_rsci_radr_d_run_mx0w0_13_2;
  wire [12:0] nl_a_out_chan_rsci_radr_d_run_mx0w0_13_2;
  wire for_1_for_for_j_and_cse;
  wire for_1_for_1_for_nor_3_cse;
  wire for_1_for_1_for_or_7_cse;
  wire for_1_for_1_for_or_11_cse;
  wire for_1_for_1_for_or_5_cse;
  wire for_1_for_1_for_nor_5_cse;
  wire [6:0] for_1_for_1_for_acc_24_itm_9_3_1;
  wire [7:0] nl_for_1_for_1_for_acc_24_itm_9_3_1;
  reg lfst_exit_for_1_for_1_sva_1;
  reg lfst_exit_for_1_for_1_sva_0;
  wire for_1_for_1_and_26_ssc;
  reg for_1_for_1_asn_6_itm_1;
  reg for_1_for_1_asn_6_itm_0;
  wire for_1_for_1_for_and_15_cse;
  wire for_1_for_1_for_j_and_6_cse;
  wire for_1_for_1_for_j_and_5_cse;
  wire and_288_cse;
  wire for_for_acc_itm_5_1;
  wire for_1_for_for_acc_itm_7_1;
  wire for_1_for_1_for_acc_itm_7_1;
  wire for_1_acc_itm_5;
  wire for_1_for_acc_1_itm_7_1;
  wire for_acc_itm_5_1;

  wire for_1_mux_nl;
  wire for_1_for_1_for_1_for_1_and_3_nl;
  wire for_1_for_1_mux_nl;
  wire for_for_mux_10_nl;
  wire for_for_mux_11_nl;
  wire[6:0] for_i_and_nl;
  wire[6:0] for_i_mux1h_nl;
  wire for_i_and_2_nl;
  wire for_i_and_4_nl;
  wire for_1_for_1_i_not_nl;
  wire or_220_nl;
  wire reg_for_1_for_1_i_6_0_rgt_nl;
  wire for_1_for_1_i_or_1_nl;
  wire mux_37_nl;
  wire for_1_for_1_i_or_2_nl;
  wire[6:0] for_i_mux_nl;
  wire nor_24_nl;
  wire for_1_for_1_for_mux_12_nl;
  wire nor_19_nl;
  wire for_1_for_1_for_mux_13_nl;
  wire mux_12_nl;
  wire for_1_for_1_for_nor_nl;
  wire for_1_for_1_for_mux_14_nl;
  wire or_81_nl;
  wire or_82_nl;
  wire for_1_for_1_for_j_mux_2_nl;
  wire for_1_for_1_for_j_mux_3_nl;
  wire for_1_for_1_for_j_or_1_nl;
  wire for_1_for_1_for_j_or_2_nl;
  wire for_1_for_mux_2_nl;
  wire or_56_nl;
  wire for_1_for_1_for_j_and_4_nl;
  wire mux_39_nl;
  wire mux_9_nl;
  wire for_1_for_1_for_or_21_nl;
  wire for_1_for_1_for_for_1_for_1_for_nor_2_nl;
  wire mux_23_nl;
  wire mux_22_nl;
  wire mux_21_nl;
  wire[5:0] for_for_acc_nl;
  wire[6:0] nl_for_for_acc_nl;
  wire[7:0] for_1_for_for_acc_nl;
  wire[8:0] nl_for_1_for_for_acc_nl;
  wire[6:0] for_1_for_for_acc_29_nl;
  wire[7:0] nl_for_1_for_for_acc_29_nl;
  wire[7:0] for_1_for_1_for_acc_nl;
  wire[8:0] nl_for_1_for_1_for_acc_nl;
  wire[5:0] for_1_acc_nl;
  wire[6:0] nl_for_1_acc_nl;
  wire for_1_for_1_mux_3_nl;
  wire and_226_nl;
  wire[7:0] for_1_for_acc_1_nl;
  wire[8:0] nl_for_1_for_acc_1_nl;
  wire[5:0] for_acc_nl;
  wire[6:0] nl_for_acc_nl;
  wire[4:0] for_for_mux1h_9_nl;
  wire[6:0] for_for_mux1h_14_nl;
  wire[1:0] for_for_mux1h_13_nl;
  wire for_for_mux_2_nl;
  wire for_for_mux_12_nl;
  wire[4:0] for_for_mux1h_6_nl;
  wire[6:0] for_for_mux1h_15_nl;
  wire[1:0] for_for_mux1h_12_nl;
  wire[11:0] for_for_mux_1_nl;
  wire for_for_mux_nl;
  wire for_for_mux_13_nl;
  wire[6:0] for_mux1h_nl;
  wire for_or_nl;
  wire[6:0] for_1_for_1_for_mux1h_30_nl;
  wire for_1_for_1_for_for_1_for_1_for_or_2_nl;
  wire[3:0] for_1_for_1_for_or_3_nl;
  wire[3:0] for_1_for_1_for_mux1h_31_nl;
  wire[6:0] for_1_for_1_for_mux_nl;
  wire or_195_nl;
  wire[6:0] for_1_for_for_for_1_for_for_mux_nl;
  wire[1:0] for_1_for_1_for_and_12_nl;
  wire[1:0] for_1_for_1_for_for_1_for_1_for_mux_6_nl;
  wire for_1_for_1_for_nor_6_nl;
  wire[6:0] for_1_for_1_for_mux1h_46_nl;
  wire[2:0] for_1_for_1_for_mux1h_37_nl;
  wire for_1_for_1_for_or_8_nl;
  wire[1:0] for_1_for_1_for_and_13_nl;
  wire[1:0] for_1_for_1_for_mux1h_38_nl;
  wire not_128_nl;
  wire for_1_for_1_for_for_1_for_1_for_or_1_nl;
  wire[2:0] for_1_for_1_for_and_10_nl;
  wire[2:0] for_1_for_1_for_for_1_for_1_for_mux_7_nl;
  wire[3:0] for_1_for_1_for_mux1h_45_nl;
  wire[2:0] for_1_for_1_for_mux1h_40_nl;
  wire for_1_for_1_for_or_10_nl;
  wire[6:0] for_1_for_1_for_mux1h_34_nl;
  wire[1:0] for_1_for_1_for_for_1_for_1_for_mux_8_nl;
  wire[2:0] for_1_for_1_for_for_1_for_1_for_mux_9_nl;
  wire for_1_for_1_for_for_1_for_1_for_or_nl;
  wire[4:0] for_1_for_1_for_for_1_for_1_for_and_nl;
  wire[4:0] for_1_for_1_for_mux_16_nl;
  wire[1:0] for_1_for_1_for_mux1h_43_nl;
  wire[2:0] for_1_for_1_for_mux1h_44_nl;

  // Interconnect Declarations for Component Instantiations 
  wire and_229_nl;
  wire [15:0] nl_mult_inst_0_run_rg_a;
  assign and_229_nl = for_1_for_1_asn_6_itm_1 & (fsm_output[10]);
  assign nl_mult_inst_0_run_rg_a = MUX_v_16_2_2(add_inst_1_run_out_1, add_inst_5_run_out_1,
      and_229_nl);
  wire and_231_nl;
  wire and_233_nl;
  wire and_235_nl;
  wire and_237_nl;
  wire [15:0] nl_add_inst_0_run_rg_a;
  assign and_231_nl = lfst_exit_for_1_for_1_sva_1 & (fsm_output[6]);
  assign and_233_nl = (~ lfst_exit_for_1_for_1_sva_1) & (fsm_output[6]);
  assign and_235_nl = (~ for_1_for_1_asn_6_itm_1) & (fsm_output[9]);
  assign and_237_nl = for_1_for_1_asn_6_itm_1 & (fsm_output[9]);
  assign nl_add_inst_0_run_rg_a = MUX1HOT_v_16_4_2(b_out_chan_rsci_q_d_mxwt, a_out_chan_rsci_q_d_mxwt,
      add_inst_1_run_out_1, add_inst_5_run_out_1, {and_231_nl , and_233_nl , and_235_nl
      , and_237_nl});
  wire  nl_Jacobi2D_run_a_out_chan_rsci_1_inst_a_out_chan_rsci_iswt0_pff;
  assign nl_Jacobi2D_run_a_out_chan_rsci_1_inst_a_out_chan_rsci_iswt0_pff = (and_dcpl
      & (fsm_output[10])) | and_62_cse;
  wire  nl_Jacobi2D_run_b_out_chan_rsci_1_inst_b_out_chan_rsci_iswt0_pff;
  assign nl_Jacobi2D_run_b_out_chan_rsci_1_inst_b_out_chan_rsci_iswt0_pff = ((~ for_1_for_1_asn_6_itm_1)
      & (fsm_output[10])) | and_62_cse;
  add  add_inst_1_run_rg (
      .a(for_1_for_1_for_temp1_sva),
      .b(a_out_chan_rsci_q_d_mxwt),
      .z(add_inst_1_run_out_1)
    );
  add  add_inst_5_run_rg (
      .a(for_1_for_1_for_temp1_sva),
      .b(b_out_chan_rsci_q_d_mxwt),
      .z(add_inst_5_run_out_1)
    );
  mult  mult_inst_0_run_rg (
      .a(nl_mult_inst_0_run_rg_a[15:0]),
      .b(16'b0000000000000010),
      .z(z_out)
    );
  add  add_inst_0_run_rg (
      .a(nl_add_inst_0_run_rg_a[15:0]),
      .b(for_1_for_1_for_asn_14_itm),
      .z(z_out_1)
    );
  Jacobi2D_run_a_chan_rsci_1 Jacobi2D_run_a_chan_rsci_1_inst (
      .clk(clk),
      .arst_n(arst_n),
      .a_chan_rsci_q_d(a_chan_rsci_q_d),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .a_chan_rsci_oswt(reg_b_chan_rsci_iswt0_cse),
      .a_chan_rsci_q_d_mxwt(a_chan_rsci_q_d_mxwt),
      .a_chan_rsci_re_d_pff(a_chan_rsci_re_d_iff),
      .a_chan_rsci_oswt_pff(and_97_rmff)
    );
  Jacobi2D_run_b_chan_rsci_1 Jacobi2D_run_b_chan_rsci_1_inst (
      .clk(clk),
      .arst_n(arst_n),
      .b_chan_rsci_q_d(b_chan_rsci_q_d),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .b_chan_rsci_oswt(reg_b_chan_rsci_iswt0_cse),
      .b_chan_rsci_q_d_mxwt(b_chan_rsci_q_d_mxwt),
      .b_chan_rsci_re_d_pff(b_chan_rsci_re_d_iff),
      .b_chan_rsci_oswt_pff(and_97_rmff)
    );
  Jacobi2D_run_a_out_chan_rsci_1 Jacobi2D_run_a_out_chan_rsci_1_inst (
      .clk(clk),
      .arst_n(arst_n),
      .a_out_chan_rsci_q_d(a_out_chan_rsci_q_d),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .a_out_chan_rsci_oswt_1(reg_a_out_chan_rsci_port_0_r_ram_ir_internal_RMASK_B_d_run_psct_cse),
      .a_out_chan_rsci_q_d_mxwt(a_out_chan_rsci_q_d_mxwt),
      .a_out_chan_rsci_we_d_pff(a_out_chan_rsci_we_d_iff),
      .a_out_chan_rsci_iswt0_pff(nl_Jacobi2D_run_a_out_chan_rsci_1_inst_a_out_chan_rsci_iswt0_pff),
      .a_out_chan_rsci_re_d_pff(a_out_chan_rsci_re_d_iff),
      .a_out_chan_rsci_oswt_1_pff(or_107_rmff)
    );
  Jacobi2D_run_b_out_chan_rsci_1 Jacobi2D_run_b_out_chan_rsci_1_inst (
      .clk(clk),
      .arst_n(arst_n),
      .b_out_chan_rsci_q_d(b_out_chan_rsci_q_d),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .b_out_chan_rsci_oswt_1(reg_b_out_chan_rsci_port_0_r_ram_ir_internal_RMASK_B_d_run_psct_cse),
      .b_out_chan_rsci_q_d_mxwt(b_out_chan_rsci_q_d_mxwt),
      .b_out_chan_rsci_we_d_pff(b_out_chan_rsci_we_d_iff),
      .b_out_chan_rsci_iswt0_pff(nl_Jacobi2D_run_b_out_chan_rsci_1_inst_b_out_chan_rsci_iswt0_pff),
      .b_out_chan_rsci_re_d_pff(b_out_chan_rsci_re_d_iff),
      .b_out_chan_rsci_oswt_1_pff(or_99_rmff)
    );
  Jacobi2D_run_b_out_chan_rsc_rls_obj Jacobi2D_run_b_out_chan_rsc_rls_obj_inst (
      .b_out_chan_rsc_rls_lz(b_out_chan_rsc_rls_lz),
      .run_wten(run_wten),
      .b_out_chan_rsc_rls_obj_iswt0(reg_a_out_chan_rsc_rls_obj_iswt0_cse)
    );
  Jacobi2D_run_a_out_chan_rsc_rls_obj Jacobi2D_run_a_out_chan_rsc_rls_obj_inst (
      .a_out_chan_rsc_rls_lz(a_out_chan_rsc_rls_lz),
      .run_wten(run_wten),
      .a_out_chan_rsc_rls_obj_iswt0(reg_a_out_chan_rsc_rls_obj_iswt0_cse)
    );
  Jacobi2D_run_a_chan_rsc_rls_obj Jacobi2D_run_a_chan_rsc_rls_obj_inst (
      .a_chan_rsc_rls_lz(a_chan_rsc_rls_lz),
      .run_wten(run_wten),
      .a_chan_rsc_rls_obj_iswt0(reg_b_chan_rsc_rls_obj_iswt0_cse)
    );
  Jacobi2D_run_b_chan_rsc_rls_obj Jacobi2D_run_b_chan_rsc_rls_obj_inst (
      .b_chan_rsc_rls_lz(b_chan_rsc_rls_lz),
      .run_wten(run_wten),
      .b_chan_rsc_rls_obj_iswt0(reg_b_chan_rsc_rls_obj_iswt0_cse)
    );
  Jacobi2D_run_b_out_chan_rsc_req_obj Jacobi2D_run_b_out_chan_rsc_req_obj_inst (
      .clk(clk),
      .arst_n(arst_n),
      .b_out_chan_rsc_req_vz(b_out_chan_rsc_req_vz),
      .run_wen(run_wen),
      .b_out_chan_rsc_req_obj_oswt(reg_a_chan_rsc_req_obj_iswt0_cse),
      .b_out_chan_rsc_req_obj_wen_comp(b_out_chan_rsc_req_obj_wen_comp)
    );
  Jacobi2D_run_a_out_chan_rsc_req_obj Jacobi2D_run_a_out_chan_rsc_req_obj_inst (
      .clk(clk),
      .arst_n(arst_n),
      .a_out_chan_rsc_req_vz(a_out_chan_rsc_req_vz),
      .run_wen(run_wen),
      .a_out_chan_rsc_req_obj_oswt(reg_a_chan_rsc_req_obj_iswt0_cse),
      .a_out_chan_rsc_req_obj_wen_comp(a_out_chan_rsc_req_obj_wen_comp)
    );
  Jacobi2D_run_b_chan_rsc_req_obj Jacobi2D_run_b_chan_rsc_req_obj_inst (
      .clk(clk),
      .arst_n(arst_n),
      .b_chan_rsc_req_vz(b_chan_rsc_req_vz),
      .run_wen(run_wen),
      .b_chan_rsc_req_obj_oswt(reg_a_chan_rsc_req_obj_iswt0_cse),
      .b_chan_rsc_req_obj_wen_comp(b_chan_rsc_req_obj_wen_comp)
    );
  Jacobi2D_run_a_chan_rsc_req_obj Jacobi2D_run_a_chan_rsc_req_obj_inst (
      .clk(clk),
      .arst_n(arst_n),
      .a_chan_rsc_req_vz(a_chan_rsc_req_vz),
      .run_wen(run_wen),
      .a_chan_rsc_req_obj_oswt(reg_a_chan_rsc_req_obj_iswt0_cse),
      .a_chan_rsc_req_obj_wen_comp(a_chan_rsc_req_obj_wen_comp)
    );
  Jacobi2D_run_staller Jacobi2D_run_staller_inst (
      .clk(clk),
      .arst_n(arst_n),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .b_out_chan_rsc_req_obj_wen_comp(b_out_chan_rsc_req_obj_wen_comp),
      .a_out_chan_rsc_req_obj_wen_comp(a_out_chan_rsc_req_obj_wen_comp),
      .b_chan_rsc_req_obj_wen_comp(b_chan_rsc_req_obj_wen_comp),
      .a_chan_rsc_req_obj_wen_comp(a_chan_rsc_req_obj_wen_comp)
    );
  Jacobi2D_run_run_fsm Jacobi2D_run_run_fsm_inst (
      .clk(clk),
      .arst_n(arst_n),
      .run_wen(run_wen),
      .fsm_output(fsm_output),
      .for_C_0_tr0(and_dcpl_10),
      .for_1_C_7_tr0(exit_for_1_lpi_2_dfm_1)
    );
  assign or_99_rmff = (for_1_for_1_equal_tmp_mx0w2 & or_dcpl_34) | (and_dcpl & or_dcpl_35);
  assign for_for_or_1_cse = (fsm_output[5]) | (fsm_output[7]);
  assign or_107_rmff = ((~ lfst_exit_for_1_for_1_sva_1) & or_dcpl_34) | ((~ for_1_for_1_asn_6_itm_1)
      & or_dcpl_35);
  assign and_97_rmff = exit_for_1_lpi_2_dfm_1 & (fsm_output[2]);
  assign for_1_for_1_and_26_ssc = run_wen & ((fsm_output[11]) | (fsm_output[3]) |
      (fsm_output[2]));
  assign for_1_for_for_j_and_cse = run_wen & (~(lfst_exit_for_1_for_1_sva_1 | or_dcpl_35
      | (fsm_output[5]) | or_dcpl_50));
  assign and_288_cse = ((fsm_output[12]) | (fsm_output[0]) | (fsm_output[1]) | (fsm_output[2])
      | (fsm_output[3]) | (fsm_output[7])) & run_wen;
  assign mux_12_nl = MUX_s_1_2_2(lfst_exit_for_1_for_1_sva_1, or_dcpl_23, for_1_for_1_asn_6_itm_1);
  assign for_1_for_1_for_nor_nl = ~(and_dcpl_31 | and_dcpl_32);
  assign for_1_for_1_for_mux_13_nl = MUX_s_1_2_2(mux_12_nl, for_1_for_1_for_nor_nl,
      fsm_output[5]);
  assign for_1_for_1_for_and_1_ssc = run_wen & (~(for_1_for_1_for_mux_13_nl | or_dcpl_50));
  assign for_1_for_1_for_j_and_6_cse = lfst_exit_for_1_for_1_sva_1 & (fsm_output[4]);
  assign for_1_for_1_for_j_and_5_cse = (~ lfst_exit_for_1_for_1_sva_1) & (fsm_output[4]);
  assign nl_for_1_for_1_for_acc_24_itm_9_3_1 = z_out_3 + 7'b0000001;
  assign for_1_for_1_for_acc_24_itm_9_3_1 = nl_for_1_for_1_for_acc_24_itm_9_3_1[6:0];
  assign for_1_for_1_for_and_15_cse = lfst_exit_for_1_for_1_sva_1 & (~ (fsm_output[8]));
  assign nl_a_out_chan_rsci_radr_d_run_mx0w0_13_2 = conv_u2u_5_12(z_out_3[6:2]) +
      ({for_1_for_for_acc_19_psp_sva_1 , (for_1_for_1_i_6_0_lpi_2[2:0])});
  assign a_out_chan_rsci_radr_d_run_mx0w0_13_2 = nl_a_out_chan_rsci_radr_d_run_mx0w0_13_2[11:0];
  assign for_1_for_1_and_12_cse_mx0w2 = exit_for_1_for_lpi_2_dfm_3 & (~ for_1_for_1_equal_tmp_mx0w2);
  assign for_1_for_1_equal_tmp_mx0w2 = lfst_exit_for_1_for_1_sva_1 & (~ lfst_exit_for_1_for_1_sva_0);
  assign nl_for_for_acc_nl = conv_u2s_5_6(for_for_j_6_0_sva_3[6:2]) + 6'b100111;
  assign for_for_acc_nl = nl_for_for_acc_nl[5:0];
  assign for_for_acc_itm_5_1 = readslicef_6_1_5(for_for_acc_nl);
  assign nl_for_for_j_6_0_sva_3 = for_1_for_1_for_j_6_0_lpi_2 + 7'b0000001;
  assign for_for_j_6_0_sva_3 = nl_for_for_j_6_0_sva_3[6:0];
  assign for_1_for_for_j_6_0_lpi_2_dfm_mx2 = MUX_v_7_2_2(7'b0000001, for_1_for_1_for_j_6_0_lpi_2_dfm_3,
      lfst_exit_for_1_for_1_sva_0);
  assign nl_for_1_for_for_acc_nl = conv_u2s_7_8(z_out_2) + 8'b10011101;
  assign for_1_for_for_acc_nl = nl_for_1_for_for_acc_nl[7:0];
  assign for_1_for_for_acc_itm_7_1 = readslicef_8_1_7(for_1_for_for_acc_nl);
  assign nl_for_1_for_for_acc_29_nl = conv_u2s_4_7(for_1_for_1_i_6_0_lpi_2[6:3])
      + (~ for_1_for_1_i_6_0_lpi_2);
  assign for_1_for_for_acc_29_nl = nl_for_1_for_for_acc_29_nl[6:0];
  assign nl_for_1_for_for_acc_19_psp_sva_1 = conv_s2u_8_9({1'b1 , for_1_for_for_acc_29_nl})
      + ({for_1_for_1_i_6_0_lpi_2 , 2'b01});
  assign for_1_for_for_acc_19_psp_sva_1 = nl_for_1_for_for_acc_19_psp_sva_1[8:0];
  assign nl_for_1_for_1_for_acc_nl = conv_u2s_7_8(for_for_j_6_0_sva_3) + 8'b10011101;
  assign for_1_for_1_for_acc_nl = nl_for_1_for_1_for_acc_nl[7:0];
  assign for_1_for_1_for_acc_itm_7_1 = readslicef_8_1_7(for_1_for_1_for_acc_nl);
  assign for_1_for_1_for_1_for_1_nor_2_cse_1 = ~(exit_for_1_for_lpi_2_dfm_3 | for_1_for_1_equal_tmp_mx0w2);
  assign for_1_for_1_for_1_for_1_nor_m1c_1 = ~(for_1_for_for_slc_for_1_for_for_acc_7_svs
      | for_1_for_1_equal_tmp_mx0w2);
  assign for_1_for_1_and_6_cse_1 = (~ for_1_for_1_for_slc_for_1_for_1_for_acc_7_svs)
      & for_1_for_1_equal_tmp_mx0w2;
  assign exit_for_1_for_lpi_2_dfm_3 = ~(for_1_for_acc_1_itm_7_1 | for_1_for_for_slc_for_1_for_for_acc_7_svs);
  assign nl_for_1_acc_nl = conv_u2s_5_6(z_out_2[6:2]) + 6'b100111;
  assign for_1_acc_nl = nl_for_1_acc_nl[5:0];
  assign for_1_acc_itm_5 = readslicef_6_1_5(for_1_acc_nl);
  assign and_226_nl = exit_for_1_for_1_lpi_2_dfm_1 & for_1_for_1_equal_tmp;
  assign for_1_for_1_mux_3_nl = MUX_s_1_2_2(lfst_exit_for_1_for_1_sva_1, (~ for_1_acc_itm_5),
      and_226_nl);
  assign lfst_exit_for_1_for_1_sva_dfm_3_1_1 = (for_1_for_1_mux_3_nl & (~ for_1_for_1_for_1_for_1_nor_2_cse))
      | exit_for_1_lpi_2_dfm_1;
  assign nl_for_1_for_acc_1_nl = conv_u2s_7_8(z_out_2) + 8'b10011101;
  assign for_1_for_acc_1_nl = nl_for_1_for_acc_1_nl[7:0];
  assign for_1_for_acc_1_itm_7_1 = readslicef_8_1_7(for_1_for_acc_1_nl);
  assign and_dcpl = for_1_for_1_asn_6_itm_1 & (~ for_1_for_1_asn_6_itm_0);
  assign or_dcpl_19 = ~(for_1_for_1_asn_6_itm_1 & for_1_for_1_asn_6_itm_0);
  assign or_dcpl_23 = lfst_exit_for_1_for_1_sva_0 | (~ lfst_exit_for_1_for_1_sva_1);
  assign nand_3_cse = ~(for_1_for_1_equal_tmp & exit_for_1_for_1_lpi_2_dfm_1);
  assign and_dcpl_10 = ~(exit_for_1_lpi_2_dfm_1 | for_1_for_1_equal_tmp);
  assign and_dcpl_11 = ~((fsm_output[0]) | (fsm_output[12]));
  assign or_dcpl_33 = (fsm_output[5:4]!=2'b00);
  assign or_dcpl_34 = or_dcpl_33 | (fsm_output[7]);
  assign or_dcpl_35 = (fsm_output[9:8]!=2'b00);
  assign or_dcpl_39 = (fsm_output[0]) | (fsm_output[12]);
  assign or_dcpl_40 = or_dcpl_39 | (fsm_output[1]);
  assign or_dcpl_41 = (fsm_output[8]) | (fsm_output[5]);
  assign or_dcpl_44 = (fsm_output[11:9]!=3'b000);
  assign or_dcpl_50 = (fsm_output[7:6]!=2'b00);
  assign or_dcpl_51 = (fsm_output[9]) | (fsm_output[5]);
  assign and_dcpl_31 = for_1_for_1_equal_tmp_mx0w2 & for_1_for_1_asn_6_itm_1;
  assign and_dcpl_32 = ~(lfst_exit_for_1_for_1_sva_1 | for_1_for_1_asn_6_itm_1);
  assign or_dcpl_62 = (fsm_output[4]) | (fsm_output[7]);
  assign and_62_cse = for_1_for_1_equal_tmp & (fsm_output[2]);
  assign or_tmp_76 = or_dcpl_40 | (fsm_output[3:2]!=2'b00);
  assign for_1_for_1_for_j_6_0_lpi_2_mx0c0 = or_dcpl_39 | (fsm_output[1]) | (fsm_output[3]);
  assign nl_for_acc_nl = conv_u2s_5_6(z_out_2[6:2]) + 6'b100111;
  assign for_acc_nl = nl_for_acc_nl[5:0];
  assign for_acc_itm_5_1 = readslicef_6_1_5(for_acc_nl);
  assign a_chan_rsci_radr_d = {z_out_7 , (for_1_for_1_for_j_6_0_lpi_2[1:0])};
  assign a_chan_rsci_re_d_pff = a_chan_rsci_re_d_iff;
  assign b_chan_rsci_radr_d = {z_out_7 , (for_1_for_1_for_j_6_0_lpi_2[1:0])};
  assign b_chan_rsci_re_d_pff = b_chan_rsci_re_d_iff;
  assign for_for_mux1h_9_nl = MUX1HOT_v_5_5_2((a_out_chan_rsci_radr_d_run_mx0w0_13_2[11:7]),
      (for_1_for_for_acc_14_cse_sva[11:7]), (z_out_6[11:7]), for_1_for_1_for_acc_18_itm_13_9,
      (for_1_for_1_for_acc_14_cse_sva[11:7]), {(fsm_output[4]) , (fsm_output[5])
      , (fsm_output[7]) , (fsm_output[8]) , (fsm_output[9])});
  assign for_for_mux1h_14_nl = MUX1HOT_v_7_5_2((a_out_chan_rsci_radr_d_run_mx0w0_13_2[6:0]),
      (for_1_for_for_acc_14_cse_sva[6:0]), (z_out_6[6:0]), (for_1_for_1_for_acc_18_itm_8_0[8:2]),
      (for_1_for_1_for_acc_14_cse_sva[6:0]), {(fsm_output[4]) , (fsm_output[5]) ,
      (fsm_output[7]) , (fsm_output[8]) , (fsm_output[9])});
  assign for_for_mux1h_13_nl = MUX1HOT_v_2_4_2((z_out_3[1:0]), (for_1_for_for_j_6_0_lpi_2_dfm[1:0]),
      (for_1_for_1_for_acc_18_itm_8_0[1:0]), for_1_for_1_for_j_slc_for_1_for_1_for_j_6_0_1_0_3_itm,
      {(fsm_output[4]) , for_for_or_1_cse , (fsm_output[8]) , (fsm_output[9])});
  assign a_out_chan_rsci_radr_d = {for_for_mux1h_9_nl , for_for_mux1h_14_nl , for_for_mux1h_13_nl};
  assign for_for_mux_2_nl = MUX_s_1_2_2(for_1_for_1_asn_6_itm_1, (for_1_for_1_for_j_slc_for_1_for_1_for_j_6_0_1_0_3_itm[1]),
      fsm_output[10]);
  assign for_for_mux_12_nl = MUX_s_1_2_2(for_1_for_1_asn_6_itm_0, (for_1_for_1_for_j_slc_for_1_for_1_for_j_6_0_1_0_3_itm[0]),
      fsm_output[10]);
  assign a_out_chan_rsci_wadr_d = {for_1_for_1_for_acc_14_cse_sva , for_for_mux_2_nl
      , for_for_mux_12_nl};
  assign a_out_chan_rsci_d_d = MUX_v_16_2_2(a_chan_rsci_q_d_mxwt, z_out, fsm_output[10]);
  assign a_out_chan_rsci_we_d_pff = a_out_chan_rsci_we_d_iff;
  assign a_out_chan_rsci_re_d_pff = a_out_chan_rsci_re_d_iff;
  assign for_for_mux1h_6_nl = MUX1HOT_v_5_5_2((z_out_6[13:9]), (for_1_for_1_for_acc_14_cse_sva[11:7]),
      (z_out_7[11:7]), for_1_for_1_for_acc_18_itm_13_9, (z_out_6[11:7]), {(fsm_output[4])
      , (fsm_output[5]) , (fsm_output[7]) , (fsm_output[8]) , (fsm_output[9])});
  assign for_for_mux1h_15_nl = MUX1HOT_v_7_5_2((z_out_6[8:2]), (for_1_for_1_for_acc_14_cse_sva[6:0]),
      (z_out_7[6:0]), (for_1_for_1_for_acc_18_itm_8_0[8:2]), (z_out_6[6:0]), {(fsm_output[4])
      , (fsm_output[5]) , (fsm_output[7]) , (fsm_output[8]) , (fsm_output[9])});
  assign for_for_mux1h_12_nl = MUX1HOT_v_2_4_2((z_out_6[1:0]), (for_1_for_1_for_j_6_0_lpi_2[1:0]),
      (for_1_for_1_for_acc_18_itm_8_0[1:0]), for_1_for_1_for_j_slc_for_1_for_1_for_j_6_0_1_0_3_itm,
      {(fsm_output[4]) , for_for_or_1_cse , (fsm_output[8]) , (fsm_output[9])});
  assign b_out_chan_rsci_radr_d = {for_for_mux1h_6_nl , for_for_mux1h_15_nl , for_for_mux1h_12_nl};
  assign for_for_mux_1_nl = MUX_v_12_2_2(for_1_for_1_for_acc_14_cse_sva, for_1_for_for_acc_14_cse_sva,
      fsm_output[10]);
  assign for_for_mux_nl = MUX_s_1_2_2(for_1_for_1_asn_6_itm_1, (for_1_for_for_j_6_0_lpi_2_dfm[1]),
      fsm_output[10]);
  assign for_for_mux_13_nl = MUX_s_1_2_2(for_1_for_1_asn_6_itm_0, (for_1_for_for_j_6_0_lpi_2_dfm[0]),
      fsm_output[10]);
  assign b_out_chan_rsci_wadr_d = {for_for_mux_1_nl , for_for_mux_nl , for_for_mux_13_nl};
  assign b_out_chan_rsci_d_d = MUX_v_16_2_2(b_chan_rsci_q_d_mxwt, z_out, fsm_output[10]);
  assign b_out_chan_rsci_we_d_pff = b_out_chan_rsci_we_d_iff;
  assign b_out_chan_rsci_re_d_pff = b_out_chan_rsci_re_d_iff;
  assign or_tmp_118 = lfst_exit_for_1_for_1_sva_1 & (fsm_output[6]);
  assign or_tmp_121 = (~ lfst_exit_for_1_for_1_sva_1) & (fsm_output[6]);
  assign or_tmp_132 = lfst_exit_for_1_for_1_sva_1 & (fsm_output[5]);
  assign or_tmp_133 = (~ lfst_exit_for_1_for_1_sva_1) & (fsm_output[5]);
  assign for_1_for_1_for_nor_3_cse = ~(for_1_for_1_for_j_and_6_cse | for_1_for_1_for_j_and_5_cse);
  assign for_1_for_1_for_or_7_cse = (fsm_output[8:7]!=2'b00);
  assign for_1_for_1_for_or_11_cse = for_1_for_1_for_j_and_6_cse | for_1_for_1_for_j_and_5_cse;
  assign for_1_for_1_for_or_5_cse = or_tmp_132 | or_tmp_133;
  assign for_1_for_1_for_nor_5_cse = ~(or_tmp_132 | or_tmp_133 | (fsm_output[4]));
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      reg_a_chan_rsc_req_obj_iswt0_cse <= 1'b0;
      reg_b_chan_rsc_rls_obj_iswt0_cse <= 1'b0;
      reg_a_out_chan_rsc_rls_obj_iswt0_cse <= 1'b0;
      reg_b_out_chan_rsci_port_0_r_ram_ir_internal_RMASK_B_d_run_psct_cse <= 1'b0;
      reg_a_out_chan_rsci_port_0_r_ram_ir_internal_RMASK_B_d_run_psct_cse <= 1'b0;
      reg_b_chan_rsci_iswt0_cse <= 1'b0;
      for_1_for_1_equal_tmp <= 1'b0;
      for_1_for_1_for_asn_14_itm <= 16'b0000000000000000;
      for_1_for_for_acc_8_atp_sva <= 7'b0000000;
      for_1_for_1_for_acc_24_itm_2_0 <= 3'b000;
      for_1_for_1_for_1_for_1_nor_2_cse <= 1'b0;
    end
    else if ( run_wen ) begin
      reg_a_chan_rsc_req_obj_iswt0_cse <= ~ and_dcpl_11;
      reg_b_chan_rsc_rls_obj_iswt0_cse <= and_dcpl_10 & (fsm_output[2]);
      reg_a_out_chan_rsc_rls_obj_iswt0_cse <= exit_for_1_lpi_2_dfm_1 & (fsm_output[11]);
      reg_b_out_chan_rsci_port_0_r_ram_ir_internal_RMASK_B_d_run_psct_cse <= or_99_rmff;
      reg_a_out_chan_rsci_port_0_r_ram_ir_internal_RMASK_B_d_run_psct_cse <= or_107_rmff;
      reg_b_chan_rsci_iswt0_cse <= and_97_rmff;
      for_1_for_1_equal_tmp <= for_1_for_1_mux_nl & ((fsm_output[2]) | (fsm_output[6]));
      for_1_for_1_for_asn_14_itm <= MUX_v_16_2_2(a_out_chan_rsci_q_d_mxwt, b_out_chan_rsci_q_d_mxwt,
          for_1_for_1_for_or_21_nl);
      for_1_for_for_acc_8_atp_sva <= z_out_2;
      for_1_for_1_for_acc_24_itm_2_0 <= MUX1HOT_v_3_3_2((z_out_2[2:0]), (for_1_for_1_for_acc_8_atp_sva[2:0]),
          (for_1_for_1_for_acc_10_atp_sva[2:0]), {for_1_for_1_for_for_1_for_1_for_nor_2_nl
          , for_1_for_1_for_and_15_cse , (fsm_output[8])});
      for_1_for_1_for_1_for_1_nor_2_cse <= for_1_for_1_for_1_for_1_nor_2_cse_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      exit_for_1_for_1_sva_1 <= 1'b0;
    end
    else if ( run_wen & (~(for_1_for_1_for_slc_for_1_for_1_for_acc_7_svs | lfst_exit_for_1_for_1_sva_0))
        & lfst_exit_for_1_for_1_sva_1 & (fsm_output[5]) ) begin
      exit_for_1_for_1_sva_1 <= ~ for_1_for_acc_1_itm_7_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      exit_for_1_for_1_lpi_2_dfm_1 <= 1'b0;
    end
    else if ( run_wen & for_1_for_1_equal_tmp_mx0w2 & (fsm_output[5]) ) begin
      exit_for_1_for_1_lpi_2_dfm_1 <= ~(for_1_for_acc_1_itm_7_1 | for_1_for_1_for_slc_for_1_for_1_for_acc_7_svs);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      exit_for_1_for_sva_2 <= 1'b0;
    end
    else if ( run_wen & (~(for_1_for_for_slc_for_1_for_for_acc_7_svs | lfst_exit_for_1_for_1_sva_1))
        & (fsm_output[6]) ) begin
      exit_for_1_for_sva_2 <= ~ for_1_for_acc_1_itm_7_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      exit_for_1_lpi_2_dfm_1 <= 1'b0;
    end
    else if ( run_wen & (((~(for_for_acc_itm_5_1 | for_acc_itm_5_1 | (~ exit_for_1_lpi_2_dfm_1)))
        & (fsm_output[2])) | (fsm_output[1]) | (fsm_output[6]) | (fsm_output[7]))
        ) begin
      exit_for_1_lpi_2_dfm_1 <= (for_1_mux_nl & (~ (fsm_output[2]))) | (fsm_output[1]);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      for_1_for_1_asn_6_itm_1 <= 1'b0;
      for_1_for_1_asn_6_itm_0 <= 1'b0;
    end
    else if ( for_1_for_1_and_26_ssc ) begin
      for_1_for_1_asn_6_itm_1 <= for_for_mux_10_nl & (~ (fsm_output[3]));
      for_1_for_1_asn_6_itm_0 <= for_for_mux_11_nl & (~ (fsm_output[3]));
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      for_1_for_1_i_6_0_lpi_2 <= 7'b0000000;
    end
    else if ( run_wen & ((~(reg_for_1_for_1_i_6_0_rgt_nl | or_dcpl_44 | or_dcpl_41
        | (fsm_output[4]))) | or_dcpl_40 | (fsm_output[3])) ) begin
      for_1_for_1_i_6_0_lpi_2 <= MUX_v_7_2_2(for_i_and_nl, 7'b0000001, or_220_nl);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      for_1_for_1_for_j_6_0_lpi_2 <= 7'b0000000;
    end
    else if ( run_wen & (for_1_for_1_for_j_6_0_lpi_2_mx0c0 | (fsm_output[2]) | (fsm_output[7]))
        ) begin
      for_1_for_1_for_j_6_0_lpi_2 <= MUX_v_7_2_2(7'b0000000, for_i_mux_nl, nor_24_nl);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      for_1_for_1_for_acc_14_cse_sva <= 12'b000000000000;
    end
    else if ( run_wen & (for_1_for_1_for_mux_12_nl | (fsm_output[2])) & (~(or_dcpl_51
        | or_dcpl_50)) ) begin
      for_1_for_1_for_acc_14_cse_sva <= MUX_v_12_2_2(z_out_7, (z_out_6[11:0]), fsm_output[8]);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      for_1_for_for_j_6_0_lpi_2_dfm <= 7'b0000000;
      for_1_for_for_acc_14_cse_sva <= 12'b000000000000;
    end
    else if ( for_1_for_for_j_and_cse ) begin
      for_1_for_for_j_6_0_lpi_2_dfm <= MUX_v_7_2_2(for_1_for_1_for_j_6_0_lpi_2_dfm_3,
          7'b0000001, nor_19_nl);
      for_1_for_for_acc_14_cse_sva <= z_out_7;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      lfst_exit_for_1_for_1_sva_1 <= 1'b0;
      lfst_exit_for_1_for_1_sva_0 <= 1'b0;
    end
    else if ( and_288_cse ) begin
      lfst_exit_for_1_for_1_sva_1 <= lfst_exit_for_1_for_1_sva_dfm_3_1_1 & (~ or_tmp_76);
      lfst_exit_for_1_for_1_sva_0 <= for_1_for_1_for_1_for_1_nor_2_cse & (~ or_tmp_76);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      for_1_t_6_0_sva <= 7'b0000000;
    end
    else if ( run_wen & ((~(nand_3_cse | (and_dcpl_11 & (~ (fsm_output[1])) & (~((fsm_output[3])
        | (fsm_output[2]) | (fsm_output[7])))))) | or_tmp_76) ) begin
      for_1_t_6_0_sva <= MUX_v_7_2_2(7'b0000000, z_out_2, (fsm_output[7]));
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      for_1_for_1_for_acc_18_itm_13_9 <= 5'b00000;
    end
    else if ( for_1_for_1_for_and_1_ssc & or_dcpl_19 ) begin
      for_1_for_1_for_acc_18_itm_13_9 <= z_out_6[13:9];
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      for_1_for_1_for_acc_18_itm_8_0 <= 9'b000000000;
    end
    else if ( for_1_for_1_for_and_1_ssc ) begin
      for_1_for_1_for_acc_18_itm_8_0 <= MUX_v_9_2_2(for_1_for_for_acc_19_psp_sva_1,
          (z_out_6[8:0]), fsm_output[5]);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      for_1_for_1_for_acc_10_atp_sva <= 7'b0000000;
    end
    else if ( run_wen & (~(for_1_for_1_for_mux_14_nl | (fsm_output[8]) | (fsm_output[4])
        | (fsm_output[7]))) & or_dcpl_19 ) begin
      for_1_for_1_for_acc_10_atp_sva <= z_out_4;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      for_1_for_1_for_temp1_sva <= 16'b0000000000000000;
    end
    else if ( run_wen & (((and_dcpl_31 | and_dcpl_32) & (~(or_dcpl_41 | or_dcpl_62)))
        | (fsm_output[9])) & or_dcpl_19 ) begin
      for_1_for_1_for_temp1_sva <= z_out_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      for_1_for_1_for_j_slc_for_1_for_1_for_j_6_0_1_0_3_itm <= 2'b00;
    end
    else if ( run_wen & (~(for_1_for_1_for_j_mux_2_nl | or_dcpl_51 | (fsm_output[4])
        | (fsm_output[6]))) ) begin
      for_1_for_1_for_j_slc_for_1_for_1_for_j_6_0_1_0_3_itm <= MUX_v_2_2_2((for_1_for_1_for_j_6_0_lpi_2[1:0]),
          (for_1_for_for_j_6_0_lpi_2_dfm[1:0]), fsm_output[8]);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      for_1_for_1_for_slc_for_1_for_1_for_j_6_0_6_2_1_itm <= 5'b00000;
    end
    else if ( run_wen & (~ or_dcpl_23) & (fsm_output[7]) & and_dcpl ) begin
      for_1_for_1_for_slc_for_1_for_1_for_j_6_0_6_2_1_itm <= for_1_for_1_for_j_6_0_lpi_2[6:2];
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      for_1_for_1_for_j_6_0_lpi_2_dfm_3 <= 7'b0000000;
    end
    else if ( run_wen & (for_1_for_1_for_j_mux_3_nl | (fsm_output[4])) & (~(or_dcpl_44
        | or_dcpl_41 | (fsm_output[7]))) ) begin
      for_1_for_1_for_j_6_0_lpi_2_dfm_3 <= MUX1HOT_v_7_3_2(z_out_2, for_for_j_6_0_sva_3,
          7'b0000001, {for_1_for_1_for_j_and_5_cse , for_1_for_1_for_j_and_6_cse
          , (fsm_output[6])});
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      for_1_for_1_for_acc_24_itm_9_3 <= 7'b0000000;
    end
    else if ( run_wen & (~(or_dcpl_23 | or_dcpl_33)) ) begin
      for_1_for_1_for_acc_24_itm_9_3 <= MUX_v_7_2_2(for_1_for_1_for_acc_24_itm_9_3_1,
          z_out_3, fsm_output[7]);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      for_1_for_1_for_acc_26_itm_10_3 <= 8'b00000000;
    end
    else if ( run_wen & ((~(lfst_exit_for_1_for_1_sva_1 | or_dcpl_62 | (fsm_output[6])))
        | (fsm_output[8])) & ((~ for_1_for_1_asn_6_itm_1) | and_dcpl) ) begin
      for_1_for_1_for_acc_26_itm_10_3 <= z_out_5;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      for_1_for_for_slc_for_1_for_for_acc_7_svs <= 1'b0;
    end
    else if ( run_wen & (fsm_output[6:5]==2'b00) & (~(for_1_for_1_for_acc_itm_7_1
        & lfst_exit_for_1_for_1_sva_1)) ) begin
      for_1_for_for_slc_for_1_for_for_acc_7_svs <= for_1_for_for_acc_itm_7_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      for_1_for_1_for_slc_for_1_for_1_for_acc_7_svs <= 1'b0;
    end
    else if ( ~((~ run_wen) | (fsm_output[5]) | mux_9_nl) ) begin
      for_1_for_1_for_slc_for_1_for_1_for_acc_7_svs <= for_1_for_1_for_acc_itm_7_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      for_1_for_1_for_acc_8_atp_sva <= 7'b0000000;
    end
    else if ( run_wen & (~(lfst_exit_for_1_for_1_sva_1 & (fsm_output[6]))) ) begin
      for_1_for_1_for_acc_8_atp_sva <= MUX_v_7_2_2(z_out_2, for_1_for_1_for_acc_24_itm_9_3_1,
          fsm_output[6]);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      for_1_for_1_for_1_for_1_nor_m1c <= 1'b0;
    end
    else if ( run_wen & (~ mux_23_nl) ) begin
      for_1_for_1_for_1_for_1_nor_m1c <= for_1_for_1_for_1_for_1_nor_m1c_1;
    end
  end
  assign for_1_for_1_mux_nl = MUX_s_1_2_2(exit_for_1_lpi_2_dfm_1, for_1_for_1_equal_tmp_mx0w2,
      fsm_output[6]);
  assign for_1_for_1_for_or_21_nl = for_1_for_1_for_and_15_cse | (for_1_for_1_asn_6_itm_1
      & (fsm_output[8]));
  assign for_1_for_1_for_for_1_for_1_for_nor_2_nl = ~(lfst_exit_for_1_for_1_sva_1
      | (fsm_output[8]));
  assign for_1_for_1_for_1_for_1_and_3_nl = (~ for_1_acc_itm_5) & exit_for_1_for_1_lpi_2_dfm_1
      & for_1_for_1_equal_tmp;
  assign for_1_mux_nl = MUX_s_1_2_2(for_1_for_1_and_12_cse_mx0w2, for_1_for_1_for_1_for_1_and_3_nl,
      fsm_output[7]);
  assign for_for_mux_10_nl = MUX_s_1_2_2((for_1_for_1_for_j_6_0_lpi_2[1]), lfst_exit_for_1_for_1_sva_1,
      fsm_output[11]);
  assign for_for_mux_11_nl = MUX_s_1_2_2((for_1_for_1_for_j_6_0_lpi_2[0]), lfst_exit_for_1_for_1_sva_0,
      fsm_output[11]);
  assign for_i_and_2_nl = for_1_for_1_and_6_cse_1 & (fsm_output[6]);
  assign for_i_and_4_nl = for_1_for_1_for_1_for_1_nor_m1c & (fsm_output[7]);
  assign for_i_mux1h_nl = MUX1HOT_v_7_3_2(z_out_2, for_1_for_1_for_acc_8_atp_sva,
      for_1_for_for_acc_8_atp_sva, {(fsm_output[2]) , for_i_and_2_nl , for_i_and_4_nl});
  assign for_1_for_1_i_not_nl = ~ or_dcpl_40;
  assign for_i_and_nl = MUX_v_7_2_2(7'b0000000, for_i_mux1h_nl, for_1_for_1_i_not_nl);
  assign or_220_nl = ((~(or_dcpl_40 | for_1_for_1_for_1_for_1_nor_m1c)) & (fsm_output[7]))
      | (fsm_output[3]) | ((~(or_dcpl_40 | for_1_for_1_and_6_cse_1)) & (fsm_output[6]));
  assign mux_37_nl = MUX_s_1_2_2(for_1_for_for_slc_for_1_for_for_acc_7_svs, lfst_exit_for_1_for_1_sva_0,
      lfst_exit_for_1_for_1_sva_1);
  assign for_1_for_1_i_or_1_nl = (~(for_1_for_1_and_12_cse_mx0w2 | for_1_for_1_and_6_cse_1))
      | mux_37_nl;
  assign for_1_for_1_i_or_2_nl = (~((~(for_1_for_for_slc_for_1_for_for_acc_7_svs
      | for_1_for_1_equal_tmp)) | (~(lfst_exit_for_1_for_1_sva_dfm_3_1_1 | for_1_for_1_for_1_for_1_nor_2_cse))
      | for_1_for_1_for_1_for_1_nor_m1c)) | ((~ for_1_for_1_for_1_for_1_nor_2_cse)
      & lfst_exit_for_1_for_1_sva_1 & nand_3_cse) | exit_for_1_lpi_2_dfm_1;
  assign reg_for_1_for_1_i_6_0_rgt_nl = MUX1HOT_s_1_3_2(for_for_acc_itm_5_1, for_1_for_1_i_or_1_nl,
      for_1_for_1_i_or_2_nl, {(fsm_output[2]) , (fsm_output[6]) , (fsm_output[7])});
  assign for_i_mux_nl = MUX_v_7_2_2(for_for_j_6_0_sva_3, for_1_for_1_for_j_6_0_lpi_2_dfm_3,
      fsm_output[7]);
  assign nor_24_nl = ~(for_1_for_1_for_j_6_0_lpi_2_mx0c0 | (~((~((~ for_for_acc_itm_5_1)
      & for_acc_itm_5_1)) | (fsm_output[7]))));
  assign for_1_for_1_for_mux_12_nl = MUX_s_1_2_2((~ or_dcpl_23), (~ for_1_for_1_asn_6_itm_1),
      fsm_output[8]);
  assign nor_19_nl = ~(lfst_exit_for_1_for_1_sva_0 | lfst_exit_for_1_for_1_sva_1);
  assign or_81_nl = lfst_exit_for_1_for_1_sva_1 | for_1_for_1_asn_6_itm_1;
  assign or_82_nl = or_dcpl_23 | (~ for_1_for_1_asn_6_itm_1);
  assign for_1_for_1_for_mux_14_nl = MUX_s_1_2_2(or_81_nl, or_82_nl, fsm_output[6]);
  assign for_1_for_1_for_j_mux_2_nl = MUX_s_1_2_2(or_dcpl_23, for_1_for_1_asn_6_itm_1,
      fsm_output[8]);
  assign for_1_for_1_for_j_or_1_nl = for_1_for_1_for_1_for_1_nor_2_cse_1 | for_1_for_1_and_12_cse_mx0w2
      | ((~ exit_for_1_for_1_sva_1) & for_1_for_1_and_6_cse_1);
  assign or_56_nl = for_1_for_for_slc_for_1_for_for_acc_7_svs | lfst_exit_for_1_for_1_sva_1;
  assign for_1_for_mux_2_nl = MUX_s_1_2_2(for_1_for_acc_1_itm_7_1, (~ exit_for_1_for_sva_2),
      or_56_nl);
  assign for_1_for_1_for_j_or_2_nl = (for_1_for_mux_2_nl & for_1_for_1_for_1_for_1_nor_m1c_1)
      | for_1_for_1_equal_tmp_mx0w2;
  assign mux_39_nl = MUX_s_1_2_2((~ exit_for_1_for_lpi_2_dfm_3), lfst_exit_for_1_for_1_sva_0,
      lfst_exit_for_1_for_1_sva_1);
  assign for_1_for_1_for_j_and_4_nl = mux_39_nl & (fsm_output[6]);
  assign for_1_for_1_for_j_mux_3_nl = MUX_s_1_2_2(for_1_for_1_for_j_or_1_nl, for_1_for_1_for_j_or_2_nl,
      for_1_for_1_for_j_and_4_nl);
  assign mux_9_nl = MUX_s_1_2_2(for_1_for_for_acc_itm_7_1, lfst_exit_for_1_for_1_sva_0,
      lfst_exit_for_1_for_1_sva_1);
  assign mux_22_nl = MUX_s_1_2_2(exit_for_1_for_lpi_2_dfm_3, (~ lfst_exit_for_1_for_1_sva_0),
      lfst_exit_for_1_for_1_sva_1);
  assign mux_21_nl = MUX_s_1_2_2(exit_for_1_for_lpi_2_dfm_3, lfst_exit_for_1_for_1_sva_0,
      lfst_exit_for_1_for_1_sva_1);
  assign mux_23_nl = MUX_s_1_2_2(mux_22_nl, mux_21_nl, exit_for_1_for_1_lpi_2_dfm_1);
  assign for_or_nl = (fsm_output[2]) | (fsm_output[6]) | (fsm_output[5]);
  assign for_mux1h_nl = MUX1HOT_v_7_3_2(for_1_for_1_i_6_0_lpi_2, for_1_for_for_j_6_0_lpi_2_dfm_mx2,
      for_1_t_6_0_sva, {for_or_nl , (fsm_output[4]) , (fsm_output[7])});
  assign nl_z_out_2 = for_mux1h_nl + 7'b0000001;
  assign z_out_2 = nl_z_out_2[6:0];
  assign for_1_for_1_for_mux1h_30_nl = MUX1HOT_v_7_6_2((~ for_1_for_1_for_acc_8_atp_sva),
      (~ for_1_for_1_for_acc_10_atp_sva), (~ z_out_4), (~ z_out_2), (~ for_1_for_1_i_6_0_lpi_2),
      for_1_for_for_j_6_0_lpi_2_dfm_mx2, {or_tmp_118 , (fsm_output[7]) , (fsm_output[5])
      , or_tmp_121 , (fsm_output[2]) , (fsm_output[4])});
  assign for_1_for_1_for_for_1_for_1_for_or_2_nl = (~(or_tmp_118 | (fsm_output[7])
      | (fsm_output[5]) | or_tmp_121 | (fsm_output[2]))) | (fsm_output[4]);
  assign for_1_for_1_for_mux1h_31_nl = MUX1HOT_v_4_5_2((for_1_for_1_for_acc_8_atp_sva[6:3]),
      (for_1_for_1_for_acc_10_atp_sva[6:3]), (z_out_4[6:3]), (z_out_2[6:3]), (for_1_for_1_i_6_0_lpi_2[6:3]),
      {or_tmp_118 , (fsm_output[7]) , (fsm_output[5]) , or_tmp_121 , (fsm_output[2])});
  assign for_1_for_1_for_or_3_nl = MUX_v_4_2_2(for_1_for_1_for_mux1h_31_nl, 4'b1111,
      (fsm_output[4]));
  assign nl_z_out_3 = for_1_for_1_for_mux1h_30_nl + conv_s2u_5_7({for_1_for_1_for_for_1_for_1_for_or_2_nl
      , for_1_for_1_for_or_3_nl});
  assign z_out_3 = nl_z_out_3[6:0];
  assign or_195_nl = (fsm_output[6:5]!=2'b00);
  assign for_1_for_1_for_mux_nl = MUX_v_7_2_2(for_1_for_1_for_j_6_0_lpi_2, for_1_for_1_i_6_0_lpi_2,
      or_195_nl);
  assign nl_z_out_4 = for_1_for_1_for_mux_nl + 7'b1111111;
  assign z_out_4 = nl_z_out_4[6:0];
  assign for_1_for_for_for_1_for_for_mux_nl = MUX_v_7_2_2(z_out_3, for_1_for_1_for_acc_24_itm_9_3,
      fsm_output[8]);
  assign nl_z_out_5 = ({1'b1 , for_1_for_for_for_1_for_for_mux_nl}) + 8'b00000001;
  assign z_out_5 = nl_z_out_5[7:0];
  assign for_1_for_1_for_for_1_for_1_for_mux_6_nl = MUX_v_2_2_2((for_1_for_1_for_acc_18_itm_8_0[8:7]),
      (for_1_for_for_acc_19_psp_sva_1[8:7]), fsm_output[4]);
  assign for_1_for_1_for_nor_6_nl = ~((fsm_output[9:7]!=3'b000));
  assign for_1_for_1_for_and_12_nl = MUX_v_2_2_2(2'b00, for_1_for_1_for_for_1_for_1_for_mux_6_nl,
      for_1_for_1_for_nor_6_nl);
  assign for_1_for_1_for_mux1h_46_nl = MUX1HOT_v_7_4_2(for_1_for_1_for_acc_10_atp_sva,
      for_1_for_for_acc_8_atp_sva, (for_1_for_1_for_acc_18_itm_8_0[6:0]), (for_1_for_for_acc_19_psp_sva_1[6:0]),
      {or_dcpl_35 , (fsm_output[7]) , for_1_for_1_for_or_5_cse , (fsm_output[4])});
  assign for_1_for_1_for_or_8_nl = or_tmp_132 | or_tmp_133 | (fsm_output[4]);
  assign for_1_for_1_for_mux1h_37_nl = MUX1HOT_v_3_3_2((for_1_for_1_for_slc_for_1_for_1_for_j_6_0_6_2_1_itm[4:2]),
      (for_1_for_for_j_6_0_lpi_2_dfm[6:4]), (for_1_for_1_i_6_0_lpi_2[2:0]), {(fsm_output[9])
      , for_1_for_1_for_or_7_cse , for_1_for_1_for_or_8_nl});
  assign for_1_for_1_for_mux1h_38_nl = MUX1HOT_v_2_3_2((for_1_for_1_for_slc_for_1_for_1_for_j_6_0_6_2_1_itm[1:0]),
      (for_1_for_for_j_6_0_lpi_2_dfm[3:2]), 2'b01, {(fsm_output[9]) , for_1_for_1_for_or_7_cse
      , for_1_for_1_for_or_5_cse});
  assign not_128_nl = ~ (fsm_output[4]);
  assign for_1_for_1_for_and_13_nl = MUX_v_2_2_2(2'b00, for_1_for_1_for_mux1h_38_nl,
      not_128_nl);
  assign for_1_for_1_for_for_1_for_1_for_or_1_nl = ((for_1_for_1_for_acc_26_itm_10_3[7])
      & for_1_for_1_for_nor_5_cse) | (fsm_output[7]);
  assign for_1_for_1_for_for_1_for_1_for_mux_7_nl = MUX_v_3_2_2((for_1_for_1_for_acc_26_itm_10_3[6:4]),
      (for_1_for_1_for_acc_8_atp_sva[6:4]), fsm_output[7]);
  assign for_1_for_1_for_and_10_nl = MUX_v_3_2_2(3'b000, for_1_for_1_for_for_1_for_1_for_mux_7_nl,
      for_1_for_1_for_nor_5_cse);
  assign for_1_for_1_for_mux1h_45_nl = MUX1HOT_v_4_5_2((for_1_for_1_for_acc_26_itm_10_3[3:0]),
      (for_1_for_1_for_acc_8_atp_sva[3:0]), (for_1_for_1_for_j_6_0_lpi_2[6:3]), (for_1_for_for_j_6_0_lpi_2_dfm[6:3]),
      (z_out_4[6:3]), {or_dcpl_35 , (fsm_output[7]) , or_tmp_132 , or_tmp_133 , (fsm_output[4])});
  assign for_1_for_1_for_or_10_nl = (fsm_output[9]) | (fsm_output[7]);
  assign for_1_for_1_for_mux1h_40_nl = MUX1HOT_v_3_5_2(for_1_for_1_for_acc_24_itm_2_0,
      (for_1_for_1_for_acc_10_atp_sva[2:0]), (for_1_for_1_for_j_6_0_lpi_2[2:0]),
      (for_1_for_for_j_6_0_lpi_2_dfm[2:0]), (z_out_4[2:0]), {for_1_for_1_for_or_10_nl
      , (fsm_output[8]) , or_tmp_132 , or_tmp_133 , (fsm_output[4])});
  assign nl_z_out_6 = ({for_1_for_1_for_and_12_nl , for_1_for_1_for_mux1h_46_nl ,
      for_1_for_1_for_mux1h_37_nl , for_1_for_1_for_and_13_nl}) + conv_s2u_11_14({for_1_for_1_for_for_1_for_1_for_or_1_nl
      , for_1_for_1_for_and_10_nl , for_1_for_1_for_mux1h_45_nl , for_1_for_1_for_mux1h_40_nl});
  assign z_out_6 = nl_z_out_6[13:0];
  assign for_1_for_1_for_mux1h_34_nl = MUX1HOT_v_7_3_2(for_1_for_1_for_acc_8_atp_sva,
      (for_1_for_for_acc_19_psp_sva_1[8:2]), for_1_for_1_i_6_0_lpi_2, {(fsm_output[7])
      , for_1_for_1_for_or_11_cse , (fsm_output[2])});
  assign for_1_for_1_for_for_1_for_1_for_mux_8_nl = MUX_v_2_2_2((for_1_for_1_for_j_6_0_lpi_2[6:5]),
      (for_1_for_for_acc_19_psp_sva_1[1:0]), for_1_for_1_for_or_11_cse);
  assign for_1_for_1_for_for_1_for_1_for_mux_9_nl = MUX_v_3_2_2((for_1_for_1_for_j_6_0_lpi_2[4:2]),
      (for_1_for_1_i_6_0_lpi_2[2:0]), for_1_for_1_for_or_11_cse);
  assign for_1_for_1_for_for_1_for_1_for_or_nl = ((z_out_5[7]) & for_1_for_1_for_nor_3_cse)
      | (fsm_output[7]);
  assign for_1_for_1_for_mux_16_nl = MUX_v_5_2_2((for_1_for_1_for_acc_24_itm_9_3[6:2]),
      (z_out_5[6:2]), fsm_output[2]);
  assign for_1_for_1_for_for_1_for_1_for_and_nl = MUX_v_5_2_2(5'b00000, for_1_for_1_for_mux_16_nl,
      for_1_for_1_for_nor_3_cse);
  assign for_1_for_1_for_mux1h_43_nl = MUX1HOT_v_2_4_2((for_1_for_1_for_acc_24_itm_9_3[1:0]),
      (for_1_for_1_for_j_6_0_lpi_2[6:5]), (for_1_for_for_j_6_0_lpi_2_dfm_mx2[6:5]),
      (z_out_5[1:0]), {(fsm_output[7]) , for_1_for_1_for_j_and_6_cse , for_1_for_1_for_j_and_5_cse
      , (fsm_output[2])});
  assign for_1_for_1_for_mux1h_44_nl = MUX1HOT_v_3_4_2(for_1_for_1_for_acc_24_itm_2_0,
      (for_1_for_1_for_j_6_0_lpi_2[4:2]), (for_1_for_for_j_6_0_lpi_2_dfm_mx2[4:2]),
      (for_1_for_1_i_6_0_lpi_2[2:0]), {(fsm_output[7]) , for_1_for_1_for_j_and_6_cse
      , for_1_for_1_for_j_and_5_cse , (fsm_output[2])});
  assign nl_z_out_7 = ({for_1_for_1_for_mux1h_34_nl , for_1_for_1_for_for_1_for_1_for_mux_8_nl
      , for_1_for_1_for_for_1_for_1_for_mux_9_nl}) + conv_s2u_11_12({for_1_for_1_for_for_1_for_1_for_or_nl
      , for_1_for_1_for_for_1_for_1_for_and_nl , for_1_for_1_for_mux1h_43_nl , for_1_for_1_for_mux1h_44_nl});
  assign z_out_7 = nl_z_out_7[11:0];

  function automatic  MUX1HOT_s_1_3_2;
    input  input_2;
    input  input_1;
    input  input_0;
    input [2:0] sel;
    reg  result;
  begin
    result = input_0 & sel[0];
    result = result | (input_1 & sel[1]);
    result = result | (input_2 & sel[2]);
    MUX1HOT_s_1_3_2 = result;
  end
  endfunction


  function automatic [15:0] MUX1HOT_v_16_4_2;
    input [15:0] input_3;
    input [15:0] input_2;
    input [15:0] input_1;
    input [15:0] input_0;
    input [3:0] sel;
    reg [15:0] result;
  begin
    result = input_0 & {16{sel[0]}};
    result = result | (input_1 & {16{sel[1]}});
    result = result | (input_2 & {16{sel[2]}});
    result = result | (input_3 & {16{sel[3]}});
    MUX1HOT_v_16_4_2 = result;
  end
  endfunction


  function automatic [1:0] MUX1HOT_v_2_3_2;
    input [1:0] input_2;
    input [1:0] input_1;
    input [1:0] input_0;
    input [2:0] sel;
    reg [1:0] result;
  begin
    result = input_0 & {2{sel[0]}};
    result = result | (input_1 & {2{sel[1]}});
    result = result | (input_2 & {2{sel[2]}});
    MUX1HOT_v_2_3_2 = result;
  end
  endfunction


  function automatic [1:0] MUX1HOT_v_2_4_2;
    input [1:0] input_3;
    input [1:0] input_2;
    input [1:0] input_1;
    input [1:0] input_0;
    input [3:0] sel;
    reg [1:0] result;
  begin
    result = input_0 & {2{sel[0]}};
    result = result | (input_1 & {2{sel[1]}});
    result = result | (input_2 & {2{sel[2]}});
    result = result | (input_3 & {2{sel[3]}});
    MUX1HOT_v_2_4_2 = result;
  end
  endfunction


  function automatic [2:0] MUX1HOT_v_3_3_2;
    input [2:0] input_2;
    input [2:0] input_1;
    input [2:0] input_0;
    input [2:0] sel;
    reg [2:0] result;
  begin
    result = input_0 & {3{sel[0]}};
    result = result | (input_1 & {3{sel[1]}});
    result = result | (input_2 & {3{sel[2]}});
    MUX1HOT_v_3_3_2 = result;
  end
  endfunction


  function automatic [2:0] MUX1HOT_v_3_4_2;
    input [2:0] input_3;
    input [2:0] input_2;
    input [2:0] input_1;
    input [2:0] input_0;
    input [3:0] sel;
    reg [2:0] result;
  begin
    result = input_0 & {3{sel[0]}};
    result = result | (input_1 & {3{sel[1]}});
    result = result | (input_2 & {3{sel[2]}});
    result = result | (input_3 & {3{sel[3]}});
    MUX1HOT_v_3_4_2 = result;
  end
  endfunction


  function automatic [2:0] MUX1HOT_v_3_5_2;
    input [2:0] input_4;
    input [2:0] input_3;
    input [2:0] input_2;
    input [2:0] input_1;
    input [2:0] input_0;
    input [4:0] sel;
    reg [2:0] result;
  begin
    result = input_0 & {3{sel[0]}};
    result = result | (input_1 & {3{sel[1]}});
    result = result | (input_2 & {3{sel[2]}});
    result = result | (input_3 & {3{sel[3]}});
    result = result | (input_4 & {3{sel[4]}});
    MUX1HOT_v_3_5_2 = result;
  end
  endfunction


  function automatic [3:0] MUX1HOT_v_4_5_2;
    input [3:0] input_4;
    input [3:0] input_3;
    input [3:0] input_2;
    input [3:0] input_1;
    input [3:0] input_0;
    input [4:0] sel;
    reg [3:0] result;
  begin
    result = input_0 & {4{sel[0]}};
    result = result | (input_1 & {4{sel[1]}});
    result = result | (input_2 & {4{sel[2]}});
    result = result | (input_3 & {4{sel[3]}});
    result = result | (input_4 & {4{sel[4]}});
    MUX1HOT_v_4_5_2 = result;
  end
  endfunction


  function automatic [4:0] MUX1HOT_v_5_5_2;
    input [4:0] input_4;
    input [4:0] input_3;
    input [4:0] input_2;
    input [4:0] input_1;
    input [4:0] input_0;
    input [4:0] sel;
    reg [4:0] result;
  begin
    result = input_0 & {5{sel[0]}};
    result = result | (input_1 & {5{sel[1]}});
    result = result | (input_2 & {5{sel[2]}});
    result = result | (input_3 & {5{sel[3]}});
    result = result | (input_4 & {5{sel[4]}});
    MUX1HOT_v_5_5_2 = result;
  end
  endfunction


  function automatic [6:0] MUX1HOT_v_7_3_2;
    input [6:0] input_2;
    input [6:0] input_1;
    input [6:0] input_0;
    input [2:0] sel;
    reg [6:0] result;
  begin
    result = input_0 & {7{sel[0]}};
    result = result | (input_1 & {7{sel[1]}});
    result = result | (input_2 & {7{sel[2]}});
    MUX1HOT_v_7_3_2 = result;
  end
  endfunction


  function automatic [6:0] MUX1HOT_v_7_4_2;
    input [6:0] input_3;
    input [6:0] input_2;
    input [6:0] input_1;
    input [6:0] input_0;
    input [3:0] sel;
    reg [6:0] result;
  begin
    result = input_0 & {7{sel[0]}};
    result = result | (input_1 & {7{sel[1]}});
    result = result | (input_2 & {7{sel[2]}});
    result = result | (input_3 & {7{sel[3]}});
    MUX1HOT_v_7_4_2 = result;
  end
  endfunction


  function automatic [6:0] MUX1HOT_v_7_5_2;
    input [6:0] input_4;
    input [6:0] input_3;
    input [6:0] input_2;
    input [6:0] input_1;
    input [6:0] input_0;
    input [4:0] sel;
    reg [6:0] result;
  begin
    result = input_0 & {7{sel[0]}};
    result = result | (input_1 & {7{sel[1]}});
    result = result | (input_2 & {7{sel[2]}});
    result = result | (input_3 & {7{sel[3]}});
    result = result | (input_4 & {7{sel[4]}});
    MUX1HOT_v_7_5_2 = result;
  end
  endfunction


  function automatic [6:0] MUX1HOT_v_7_6_2;
    input [6:0] input_5;
    input [6:0] input_4;
    input [6:0] input_3;
    input [6:0] input_2;
    input [6:0] input_1;
    input [6:0] input_0;
    input [5:0] sel;
    reg [6:0] result;
  begin
    result = input_0 & {7{sel[0]}};
    result = result | (input_1 & {7{sel[1]}});
    result = result | (input_2 & {7{sel[2]}});
    result = result | (input_3 & {7{sel[3]}});
    result = result | (input_4 & {7{sel[4]}});
    result = result | (input_5 & {7{sel[5]}});
    MUX1HOT_v_7_6_2 = result;
  end
  endfunction


  function automatic  MUX_s_1_2_2;
    input  input_0;
    input  input_1;
    input  sel;
    reg  result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input  sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction


  function automatic [15:0] MUX_v_16_2_2;
    input [15:0] input_0;
    input [15:0] input_1;
    input  sel;
    reg [15:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_16_2_2 = result;
  end
  endfunction


  function automatic [1:0] MUX_v_2_2_2;
    input [1:0] input_0;
    input [1:0] input_1;
    input  sel;
    reg [1:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_2_2_2 = result;
  end
  endfunction


  function automatic [2:0] MUX_v_3_2_2;
    input [2:0] input_0;
    input [2:0] input_1;
    input  sel;
    reg [2:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_3_2_2 = result;
  end
  endfunction


  function automatic [3:0] MUX_v_4_2_2;
    input [3:0] input_0;
    input [3:0] input_1;
    input  sel;
    reg [3:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_4_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input  sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction


  function automatic [6:0] MUX_v_7_2_2;
    input [6:0] input_0;
    input [6:0] input_1;
    input  sel;
    reg [6:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_7_2_2 = result;
  end
  endfunction


  function automatic [8:0] MUX_v_9_2_2;
    input [8:0] input_0;
    input [8:0] input_1;
    input  sel;
    reg [8:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_9_2_2 = result;
  end
  endfunction


  function automatic [0:0] readslicef_6_1_5;
    input [5:0] vector;
    reg [5:0] tmp;
  begin
    tmp = vector >> 5;
    readslicef_6_1_5 = tmp[0:0];
  end
  endfunction


  function automatic [0:0] readslicef_8_1_7;
    input [7:0] vector;
    reg [7:0] tmp;
  begin
    tmp = vector >> 7;
    readslicef_8_1_7 = tmp[0:0];
  end
  endfunction


  function automatic [6:0] conv_s2u_5_7 ;
    input [4:0]  vector ;
  begin
    conv_s2u_5_7 = {{2{vector[4]}}, vector};
  end
  endfunction


  function automatic [8:0] conv_s2u_8_9 ;
    input [7:0]  vector ;
  begin
    conv_s2u_8_9 = {vector[7], vector};
  end
  endfunction


  function automatic [11:0] conv_s2u_11_12 ;
    input [10:0]  vector ;
  begin
    conv_s2u_11_12 = {vector[10], vector};
  end
  endfunction


  function automatic [13:0] conv_s2u_11_14 ;
    input [10:0]  vector ;
  begin
    conv_s2u_11_14 = {{3{vector[10]}}, vector};
  end
  endfunction


  function automatic [6:0] conv_u2s_4_7 ;
    input [3:0]  vector ;
  begin
    conv_u2s_4_7 = {{3{1'b0}}, vector};
  end
  endfunction


  function automatic [5:0] conv_u2s_5_6 ;
    input [4:0]  vector ;
  begin
    conv_u2s_5_6 =  {1'b0, vector};
  end
  endfunction


  function automatic [7:0] conv_u2s_7_8 ;
    input [6:0]  vector ;
  begin
    conv_u2s_7_8 =  {1'b0, vector};
  end
  endfunction


  function automatic [11:0] conv_u2u_5_12 ;
    input [4:0]  vector ;
  begin
    conv_u2u_5_12 = {{7{1'b0}}, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Jacobi2D_struct
// ------------------------------------------------------------------


module Jacobi2D_struct (
  clk, arst_n, a_chan_rsc_radr, a_chan_rsc_re, a_chan_rsc_q, a_chan_rsc_req_vz, a_chan_rsc_rls_lz,
      b_chan_rsc_radr, b_chan_rsc_re, b_chan_rsc_q, b_chan_rsc_req_vz, b_chan_rsc_rls_lz,
      a_out_chan_rsc_radr, a_out_chan_rsc_re, a_out_chan_rsc_q, a_out_chan_rsc_wadr,
      a_out_chan_rsc_d, a_out_chan_rsc_we, a_out_chan_rsc_req_vz, a_out_chan_rsc_rls_lz,
      b_out_chan_rsc_radr, b_out_chan_rsc_re, b_out_chan_rsc_q, b_out_chan_rsc_wadr,
      b_out_chan_rsc_d, b_out_chan_rsc_we, b_out_chan_rsc_req_vz, b_out_chan_rsc_rls_lz
);
  input clk;
  input arst_n;
  output [13:0] a_chan_rsc_radr;
  output a_chan_rsc_re;
  input [15:0] a_chan_rsc_q;
  input a_chan_rsc_req_vz;
  output a_chan_rsc_rls_lz;
  output [13:0] b_chan_rsc_radr;
  output b_chan_rsc_re;
  input [15:0] b_chan_rsc_q;
  input b_chan_rsc_req_vz;
  output b_chan_rsc_rls_lz;
  output [13:0] a_out_chan_rsc_radr;
  output a_out_chan_rsc_re;
  input [15:0] a_out_chan_rsc_q;
  output [13:0] a_out_chan_rsc_wadr;
  output [15:0] a_out_chan_rsc_d;
  output a_out_chan_rsc_we;
  input a_out_chan_rsc_req_vz;
  output a_out_chan_rsc_rls_lz;
  output [13:0] b_out_chan_rsc_radr;
  output b_out_chan_rsc_re;
  input [15:0] b_out_chan_rsc_q;
  output [13:0] b_out_chan_rsc_wadr;
  output [15:0] b_out_chan_rsc_d;
  output b_out_chan_rsc_we;
  input b_out_chan_rsc_req_vz;
  output b_out_chan_rsc_rls_lz;


  // Interconnect Declarations
  wire [13:0] a_chan_rsci_radr_d;
  wire [15:0] a_chan_rsci_q_d;
  wire [13:0] b_chan_rsci_radr_d;
  wire [15:0] b_chan_rsci_q_d;
  wire [13:0] a_out_chan_rsci_radr_d;
  wire [13:0] a_out_chan_rsci_wadr_d;
  wire [15:0] a_out_chan_rsci_d_d;
  wire [15:0] a_out_chan_rsci_q_d;
  wire [13:0] b_out_chan_rsci_radr_d;
  wire [13:0] b_out_chan_rsci_wadr_d;
  wire [15:0] b_out_chan_rsci_d_d;
  wire [15:0] b_out_chan_rsci_q_d;
  wire a_chan_rsci_re_d_iff;
  wire b_chan_rsci_re_d_iff;
  wire a_out_chan_rsci_we_d_iff;
  wire a_out_chan_rsci_re_d_iff;
  wire b_out_chan_rsci_we_d_iff;
  wire b_out_chan_rsci_re_d_iff;


  // Interconnect Declarations for Component Instantiations 
  Jacobi2D_ccs_sample_mem_ccs_ram_sync_1R1W_rport_7_16_14_10000_10000_16_5_gen a_chan_rsci
      (
      .q(a_chan_rsc_q),
      .re(a_chan_rsc_re),
      .radr(a_chan_rsc_radr),
      .radr_d(a_chan_rsci_radr_d),
      .re_d(a_chan_rsci_re_d_iff),
      .q_d(a_chan_rsci_q_d),
      .port_0_r_ram_ir_internal_RMASK_B_d(a_chan_rsci_re_d_iff)
    );
  Jacobi2D_ccs_sample_mem_ccs_ram_sync_1R1W_rport_8_16_14_10000_10000_16_5_gen b_chan_rsci
      (
      .q(b_chan_rsc_q),
      .re(b_chan_rsc_re),
      .radr(b_chan_rsc_radr),
      .radr_d(b_chan_rsci_radr_d),
      .re_d(b_chan_rsci_re_d_iff),
      .q_d(b_chan_rsci_q_d),
      .port_0_r_ram_ir_internal_RMASK_B_d(b_chan_rsci_re_d_iff)
    );
  Jacobi2D_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_9_16_14_10000_10000_16_5_gen a_out_chan_rsci
      (
      .we(a_out_chan_rsc_we),
      .d(a_out_chan_rsc_d),
      .wadr(a_out_chan_rsc_wadr),
      .q(a_out_chan_rsc_q),
      .re(a_out_chan_rsc_re),
      .radr(a_out_chan_rsc_radr),
      .radr_d(a_out_chan_rsci_radr_d),
      .wadr_d(a_out_chan_rsci_wadr_d),
      .d_d(a_out_chan_rsci_d_d),
      .we_d(a_out_chan_rsci_we_d_iff),
      .re_d(a_out_chan_rsci_re_d_iff),
      .q_d(a_out_chan_rsci_q_d),
      .port_0_r_ram_ir_internal_RMASK_B_d(a_out_chan_rsci_re_d_iff),
      .port_1_w_ram_ir_internal_WMASK_B_d(a_out_chan_rsci_we_d_iff)
    );
  Jacobi2D_ccs_sample_mem_ccs_ram_sync_1R1W_rwport_10_16_14_10000_10000_16_5_gen
      b_out_chan_rsci (
      .we(b_out_chan_rsc_we),
      .d(b_out_chan_rsc_d),
      .wadr(b_out_chan_rsc_wadr),
      .q(b_out_chan_rsc_q),
      .re(b_out_chan_rsc_re),
      .radr(b_out_chan_rsc_radr),
      .radr_d(b_out_chan_rsci_radr_d),
      .wadr_d(b_out_chan_rsci_wadr_d),
      .d_d(b_out_chan_rsci_d_d),
      .we_d(b_out_chan_rsci_we_d_iff),
      .re_d(b_out_chan_rsci_re_d_iff),
      .q_d(b_out_chan_rsci_q_d),
      .port_0_r_ram_ir_internal_RMASK_B_d(b_out_chan_rsci_re_d_iff),
      .port_1_w_ram_ir_internal_WMASK_B_d(b_out_chan_rsci_we_d_iff)
    );
  Jacobi2D_run Jacobi2D_run_inst (
      .clk(clk),
      .arst_n(arst_n),
      .a_chan_rsc_req_vz(a_chan_rsc_req_vz),
      .a_chan_rsc_rls_lz(a_chan_rsc_rls_lz),
      .b_chan_rsc_req_vz(b_chan_rsc_req_vz),
      .b_chan_rsc_rls_lz(b_chan_rsc_rls_lz),
      .a_out_chan_rsc_req_vz(a_out_chan_rsc_req_vz),
      .a_out_chan_rsc_rls_lz(a_out_chan_rsc_rls_lz),
      .b_out_chan_rsc_req_vz(b_out_chan_rsc_req_vz),
      .b_out_chan_rsc_rls_lz(b_out_chan_rsc_rls_lz),
      .a_chan_rsci_radr_d(a_chan_rsci_radr_d),
      .a_chan_rsci_q_d(a_chan_rsci_q_d),
      .b_chan_rsci_radr_d(b_chan_rsci_radr_d),
      .b_chan_rsci_q_d(b_chan_rsci_q_d),
      .a_out_chan_rsci_radr_d(a_out_chan_rsci_radr_d),
      .a_out_chan_rsci_wadr_d(a_out_chan_rsci_wadr_d),
      .a_out_chan_rsci_d_d(a_out_chan_rsci_d_d),
      .a_out_chan_rsci_q_d(a_out_chan_rsci_q_d),
      .b_out_chan_rsci_radr_d(b_out_chan_rsci_radr_d),
      .b_out_chan_rsci_wadr_d(b_out_chan_rsci_wadr_d),
      .b_out_chan_rsci_d_d(b_out_chan_rsci_d_d),
      .b_out_chan_rsci_q_d(b_out_chan_rsci_q_d),
      .a_chan_rsci_re_d_pff(a_chan_rsci_re_d_iff),
      .b_chan_rsci_re_d_pff(b_chan_rsci_re_d_iff),
      .a_out_chan_rsci_we_d_pff(a_out_chan_rsci_we_d_iff),
      .a_out_chan_rsci_re_d_pff(a_out_chan_rsci_re_d_iff),
      .b_out_chan_rsci_we_d_pff(b_out_chan_rsci_we_d_iff),
      .b_out_chan_rsci_re_d_pff(b_out_chan_rsci_re_d_iff)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Jacobi2D
// ------------------------------------------------------------------


module Jacobi2D (
  clk, arst_n, a_chan_rsc_radr, a_chan_rsc_re, a_chan_rsc_q, a_chan_rsc_req_vz, a_chan_rsc_rls_lz,
      b_chan_rsc_radr, b_chan_rsc_re, b_chan_rsc_q, b_chan_rsc_req_vz, b_chan_rsc_rls_lz,
      a_out_chan_rsc_radr, a_out_chan_rsc_re, a_out_chan_rsc_q, a_out_chan_rsc_wadr,
      a_out_chan_rsc_d, a_out_chan_rsc_we, a_out_chan_rsc_req_vz, a_out_chan_rsc_rls_lz,
      b_out_chan_rsc_radr, b_out_chan_rsc_re, b_out_chan_rsc_q, b_out_chan_rsc_wadr,
      b_out_chan_rsc_d, b_out_chan_rsc_we, b_out_chan_rsc_req_vz, b_out_chan_rsc_rls_lz
);
  input clk;
  input arst_n;
  output [13:0] a_chan_rsc_radr;
  output a_chan_rsc_re;
  input [15:0] a_chan_rsc_q;
  input a_chan_rsc_req_vz;
  output a_chan_rsc_rls_lz;
  output [13:0] b_chan_rsc_radr;
  output b_chan_rsc_re;
  input [15:0] b_chan_rsc_q;
  input b_chan_rsc_req_vz;
  output b_chan_rsc_rls_lz;
  output [13:0] a_out_chan_rsc_radr;
  output a_out_chan_rsc_re;
  input [15:0] a_out_chan_rsc_q;
  output [13:0] a_out_chan_rsc_wadr;
  output [15:0] a_out_chan_rsc_d;
  output a_out_chan_rsc_we;
  input a_out_chan_rsc_req_vz;
  output a_out_chan_rsc_rls_lz;
  output [13:0] b_out_chan_rsc_radr;
  output b_out_chan_rsc_re;
  input [15:0] b_out_chan_rsc_q;
  output [13:0] b_out_chan_rsc_wadr;
  output [15:0] b_out_chan_rsc_d;
  output b_out_chan_rsc_we;
  input b_out_chan_rsc_req_vz;
  output b_out_chan_rsc_rls_lz;



  // Interconnect Declarations for Component Instantiations 
  Jacobi2D_struct Jacobi2D_struct_inst (
      .clk(clk),
      .arst_n(arst_n),
      .a_chan_rsc_radr(a_chan_rsc_radr),
      .a_chan_rsc_re(a_chan_rsc_re),
      .a_chan_rsc_q(a_chan_rsc_q),
      .a_chan_rsc_req_vz(a_chan_rsc_req_vz),
      .a_chan_rsc_rls_lz(a_chan_rsc_rls_lz),
      .b_chan_rsc_radr(b_chan_rsc_radr),
      .b_chan_rsc_re(b_chan_rsc_re),
      .b_chan_rsc_q(b_chan_rsc_q),
      .b_chan_rsc_req_vz(b_chan_rsc_req_vz),
      .b_chan_rsc_rls_lz(b_chan_rsc_rls_lz),
      .a_out_chan_rsc_radr(a_out_chan_rsc_radr),
      .a_out_chan_rsc_re(a_out_chan_rsc_re),
      .a_out_chan_rsc_q(a_out_chan_rsc_q),
      .a_out_chan_rsc_wadr(a_out_chan_rsc_wadr),
      .a_out_chan_rsc_d(a_out_chan_rsc_d),
      .a_out_chan_rsc_we(a_out_chan_rsc_we),
      .a_out_chan_rsc_req_vz(a_out_chan_rsc_req_vz),
      .a_out_chan_rsc_rls_lz(a_out_chan_rsc_rls_lz),
      .b_out_chan_rsc_radr(b_out_chan_rsc_radr),
      .b_out_chan_rsc_re(b_out_chan_rsc_re),
      .b_out_chan_rsc_q(b_out_chan_rsc_q),
      .b_out_chan_rsc_wadr(b_out_chan_rsc_wadr),
      .b_out_chan_rsc_d(b_out_chan_rsc_d),
      .b_out_chan_rsc_we(b_out_chan_rsc_we),
      .b_out_chan_rsc_req_vz(b_out_chan_rsc_req_vz),
      .b_out_chan_rsc_rls_lz(b_out_chan_rsc_rls_lz)
    );
endmodule



